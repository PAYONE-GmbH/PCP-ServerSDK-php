<?php
/**
 * CardPaymentMethodSpecificInput
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  PayoneCommercePlatform\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Commerce Platform API
 *
 * RESTful API for the creation of Commerce Cases with Checkouts and the execution of Payments.
 *
 * The version of the OpenAPI document: 1.6.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace PayoneCommercePlatform\Sdk\Domain;

use ArrayAccess;
use PayoneCommercePlatform\Sdk\ObjectSerializer;

/**
 * CardPaymentMethodSpecificInput Class Doc Comment
 *
 * @category Class
 * @description Object containing the specific input details for card payments.
 * @package  PayoneCommercePlatform\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CardPaymentMethodSpecificInput implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CardPaymentMethodSpecificInput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'authorizationMode' => '\PayoneCommercePlatform\Sdk\Domain\AuthorizationMode',
        'recurring' => '\PayoneCommercePlatform\Sdk\Domain\CardRecurrenceDetails',
        'paymentProcessingToken' => 'string',
        'reportingToken' => 'string',
        'transactionChannel' => '\PayoneCommercePlatform\Sdk\Domain\TransactionChannel',
        'unscheduledCardOnFileRequestor' => '\PayoneCommercePlatform\Sdk\Domain\UnscheduledCardOnFileRequestor',
        'unscheduledCardOnFileSequenceIndicator' => '\PayoneCommercePlatform\Sdk\Domain\UnscheduledCardOnFileSequenceIndicator',
        'paymentProductId' => 'int',
        'card' => '\PayoneCommercePlatform\Sdk\Domain\CardInfo',
        'returnUrl' => 'string',
        'cardOnFileRecurringFrequency' => 'string',
        'cardOnFileRecurringExpiration' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'authorizationMode' => null,
        'recurring' => null,
        'paymentProcessingToken' => null,
        'reportingToken' => null,
        'transactionChannel' => null,
        'unscheduledCardOnFileRequestor' => null,
        'unscheduledCardOnFileSequenceIndicator' => null,
        'paymentProductId' => 'int32',
        'card' => null,
        'returnUrl' => null,
        'cardOnFileRecurringFrequency' => null,
        'cardOnFileRecurringExpiration' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'authorizationMode' => false,
        'recurring' => false,
        'paymentProcessingToken' => false,
        'reportingToken' => false,
        'transactionChannel' => false,
        'unscheduledCardOnFileRequestor' => false,
        'unscheduledCardOnFileSequenceIndicator' => false,
        'paymentProductId' => false,
        'card' => false,
        'returnUrl' => false,
        'cardOnFileRecurringFrequency' => false,
        'cardOnFileRecurringExpiration' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'authorizationMode' => 'authorizationMode',
        'recurring' => 'recurring',
        'paymentProcessingToken' => 'paymentProcessingToken',
        'reportingToken' => 'reportingToken',
        'transactionChannel' => 'transactionChannel',
        'unscheduledCardOnFileRequestor' => 'unscheduledCardOnFileRequestor',
        'unscheduledCardOnFileSequenceIndicator' => 'unscheduledCardOnFileSequenceIndicator',
        'paymentProductId' => 'paymentProductId',
        'card' => 'card',
        'returnUrl' => 'returnUrl',
        'cardOnFileRecurringFrequency' => 'cardOnFileRecurringFrequency',
        'cardOnFileRecurringExpiration' => 'cardOnFileRecurringExpiration'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'authorizationMode' => 'setAuthorizationMode',
        'recurring' => 'setRecurring',
        'paymentProcessingToken' => 'setPaymentProcessingToken',
        'reportingToken' => 'setReportingToken',
        'transactionChannel' => 'setTransactionChannel',
        'unscheduledCardOnFileRequestor' => 'setUnscheduledCardOnFileRequestor',
        'unscheduledCardOnFileSequenceIndicator' => 'setUnscheduledCardOnFileSequenceIndicator',
        'paymentProductId' => 'setPaymentProductId',
        'card' => 'setCard',
        'returnUrl' => 'setReturnUrl',
        'cardOnFileRecurringFrequency' => 'setCardOnFileRecurringFrequency',
        'cardOnFileRecurringExpiration' => 'setCardOnFileRecurringExpiration'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'authorizationMode' => 'getAuthorizationMode',
        'recurring' => 'getRecurring',
        'paymentProcessingToken' => 'getPaymentProcessingToken',
        'reportingToken' => 'getReportingToken',
        'transactionChannel' => 'getTransactionChannel',
        'unscheduledCardOnFileRequestor' => 'getUnscheduledCardOnFileRequestor',
        'unscheduledCardOnFileSequenceIndicator' => 'getUnscheduledCardOnFileSequenceIndicator',
        'paymentProductId' => 'getPaymentProductId',
        'card' => 'getCard',
        'returnUrl' => 'getReturnUrl',
        'cardOnFileRecurringFrequency' => 'getCardOnFileRecurringFrequency',
        'cardOnFileRecurringExpiration' => 'getCardOnFileRecurringExpiration'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CARD_ON_FILE_RECURRING_FREQUENCY_YEARLY = 'Yearly';
    public const CARD_ON_FILE_RECURRING_FREQUENCY_QUARTERLY = 'Quarterly';
    public const CARD_ON_FILE_RECURRING_FREQUENCY_MONTHLY = 'Monthly';
    public const CARD_ON_FILE_RECURRING_FREQUENCY_WEEKLY = 'Weekly';
    public const CARD_ON_FILE_RECURRING_FREQUENCY_DAILY = 'Daily';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCardOnFileRecurringFrequencyAllowableValues()
    {
        return [
            self::CARD_ON_FILE_RECURRING_FREQUENCY_YEARLY,
            self::CARD_ON_FILE_RECURRING_FREQUENCY_QUARTERLY,
            self::CARD_ON_FILE_RECURRING_FREQUENCY_MONTHLY,
            self::CARD_ON_FILE_RECURRING_FREQUENCY_WEEKLY,
            self::CARD_ON_FILE_RECURRING_FREQUENCY_DAILY,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('authorizationMode', $data ?? [], null);
        $this->setIfExists('recurring', $data ?? [], null);
        $this->setIfExists('paymentProcessingToken', $data ?? [], null);
        $this->setIfExists('reportingToken', $data ?? [], null);
        $this->setIfExists('transactionChannel', $data ?? [], null);
        $this->setIfExists('unscheduledCardOnFileRequestor', $data ?? [], null);
        $this->setIfExists('unscheduledCardOnFileSequenceIndicator', $data ?? [], null);
        $this->setIfExists('paymentProductId', $data ?? [], null);
        $this->setIfExists('card', $data ?? [], null);
        $this->setIfExists('returnUrl', $data ?? [], null);
        $this->setIfExists('cardOnFileRecurringFrequency', $data ?? [], null);
        $this->setIfExists('cardOnFileRecurringExpiration', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['paymentProcessingToken']) && (mb_strlen($this->container['paymentProcessingToken']) > 40)) {
            $invalidProperties[] = "invalid value for 'paymentProcessingToken', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['reportingToken']) && (mb_strlen($this->container['reportingToken']) > 40)) {
            $invalidProperties[] = "invalid value for 'reportingToken', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['paymentProductId']) && ($this->container['paymentProductId'] > 99999)) {
            $invalidProperties[] = "invalid value for 'paymentProductId', must be smaller than or equal to 99999.";
        }

        if (!is_null($this->container['paymentProductId']) && ($this->container['paymentProductId'] < 0)) {
            $invalidProperties[] = "invalid value for 'paymentProductId', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['returnUrl']) && (mb_strlen($this->container['returnUrl']) > 200)) {
            $invalidProperties[] = "invalid value for 'returnUrl', the character length must be smaller than or equal to 200.";
        }

        $allowedValues = $this->getCardOnFileRecurringFrequencyAllowableValues();
        if (!is_null($this->container['cardOnFileRecurringFrequency']) && !in_array($this->container['cardOnFileRecurringFrequency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'cardOnFileRecurringFrequency', must be one of '%s'",
                $this->container['cardOnFileRecurringFrequency'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['cardOnFileRecurringExpiration']) && (mb_strlen($this->container['cardOnFileRecurringExpiration']) > 8)) {
            $invalidProperties[] = "invalid value for 'cardOnFileRecurringExpiration', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['cardOnFileRecurringExpiration']) && !preg_match("/^((19|20|21)\\d{6})?$/", $this->container['cardOnFileRecurringExpiration'])) {
            $invalidProperties[] = "invalid value for 'cardOnFileRecurringExpiration', must be conform to the pattern /^((19|20|21)\\d{6})?$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets authorizationMode
     *
     * @return \PayoneCommercePlatform\Sdk\Domain\AuthorizationMode|null
     */
    public function getAuthorizationMode()
    {
        return $this->container['authorizationMode'];
    }

    /**
     * Sets authorizationMode
     *
     * @param \PayoneCommercePlatform\Sdk\Domain\AuthorizationMode|null $authorizationMode authorizationMode
     *
     * @return self
     */
    public function setAuthorizationMode($authorizationMode)
    {
        if (is_null($authorizationMode)) {
            throw new \InvalidArgumentException('non-nullable authorizationMode cannot be null');
        }
        $this->container['authorizationMode'] = $authorizationMode;

        return $this;
    }

    /**
     * Gets recurring
     *
     * @return \PayoneCommercePlatform\Sdk\Domain\CardRecurrenceDetails|null
     */
    public function getRecurring()
    {
        return $this->container['recurring'];
    }

    /**
     * Sets recurring
     *
     * @param \PayoneCommercePlatform\Sdk\Domain\CardRecurrenceDetails|null $recurring recurring
     *
     * @return self
     */
    public function setRecurring($recurring)
    {
        if (is_null($recurring)) {
            throw new \InvalidArgumentException('non-nullable recurring cannot be null');
        }
        $this->container['recurring'] = $recurring;

        return $this;
    }

    /**
     * Gets paymentProcessingToken
     *
     * @return string|null
     */
    public function getPaymentProcessingToken()
    {
        return $this->container['paymentProcessingToken'];
    }

    /**
     * Sets paymentProcessingToken
     *
     * @param string|null $paymentProcessingToken ID of the token to use to create the payment.
     *
     * @return self
     */
    public function setPaymentProcessingToken($paymentProcessingToken)
    {
        if (is_null($paymentProcessingToken)) {
            throw new \InvalidArgumentException('non-nullable paymentProcessingToken cannot be null');
        }
        if ((mb_strlen($paymentProcessingToken) > 40)) {
            throw new \InvalidArgumentException('invalid length for $paymentProcessingToken when calling CardPaymentMethodSpecificInput., must be smaller than or equal to 40.');
        }

        $this->container['paymentProcessingToken'] = $paymentProcessingToken;

        return $this;
    }

    /**
     * Gets reportingToken
     *
     * @return string|null
     */
    public function getReportingToken()
    {
        return $this->container['reportingToken'];
    }

    /**
     * Sets reportingToken
     *
     * @param string|null $reportingToken Token to identify the card in the reporting.
     *
     * @return self
     */
    public function setReportingToken($reportingToken)
    {
        if (is_null($reportingToken)) {
            throw new \InvalidArgumentException('non-nullable reportingToken cannot be null');
        }
        if ((mb_strlen($reportingToken) > 40)) {
            throw new \InvalidArgumentException('invalid length for $reportingToken when calling CardPaymentMethodSpecificInput., must be smaller than or equal to 40.');
        }

        $this->container['reportingToken'] = $reportingToken;

        return $this;
    }

    /**
     * Gets transactionChannel
     *
     * @return \PayoneCommercePlatform\Sdk\Domain\TransactionChannel|null
     */
    public function getTransactionChannel()
    {
        return $this->container['transactionChannel'];
    }

    /**
     * Sets transactionChannel
     *
     * @param \PayoneCommercePlatform\Sdk\Domain\TransactionChannel|null $transactionChannel transactionChannel
     *
     * @return self
     */
    public function setTransactionChannel($transactionChannel)
    {
        if (is_null($transactionChannel)) {
            throw new \InvalidArgumentException('non-nullable transactionChannel cannot be null');
        }
        $this->container['transactionChannel'] = $transactionChannel;

        return $this;
    }

    /**
     * Gets unscheduledCardOnFileRequestor
     *
     * @return \PayoneCommercePlatform\Sdk\Domain\UnscheduledCardOnFileRequestor|null
     */
    public function getUnscheduledCardOnFileRequestor()
    {
        return $this->container['unscheduledCardOnFileRequestor'];
    }

    /**
     * Sets unscheduledCardOnFileRequestor
     *
     * @param \PayoneCommercePlatform\Sdk\Domain\UnscheduledCardOnFileRequestor|null $unscheduledCardOnFileRequestor unscheduledCardOnFileRequestor
     *
     * @return self
     */
    public function setUnscheduledCardOnFileRequestor($unscheduledCardOnFileRequestor)
    {
        if (is_null($unscheduledCardOnFileRequestor)) {
            throw new \InvalidArgumentException('non-nullable unscheduledCardOnFileRequestor cannot be null');
        }
        $this->container['unscheduledCardOnFileRequestor'] = $unscheduledCardOnFileRequestor;

        return $this;
    }

    /**
     * Gets unscheduledCardOnFileSequenceIndicator
     *
     * @return \PayoneCommercePlatform\Sdk\Domain\UnscheduledCardOnFileSequenceIndicator|null
     */
    public function getUnscheduledCardOnFileSequenceIndicator()
    {
        return $this->container['unscheduledCardOnFileSequenceIndicator'];
    }

    /**
     * Sets unscheduledCardOnFileSequenceIndicator
     *
     * @param \PayoneCommercePlatform\Sdk\Domain\UnscheduledCardOnFileSequenceIndicator|null $unscheduledCardOnFileSequenceIndicator unscheduledCardOnFileSequenceIndicator
     *
     * @return self
     */
    public function setUnscheduledCardOnFileSequenceIndicator($unscheduledCardOnFileSequenceIndicator)
    {
        if (is_null($unscheduledCardOnFileSequenceIndicator)) {
            throw new \InvalidArgumentException('non-nullable unscheduledCardOnFileSequenceIndicator cannot be null');
        }
        $this->container['unscheduledCardOnFileSequenceIndicator'] = $unscheduledCardOnFileSequenceIndicator;

        return $this;
    }

    /**
     * Gets paymentProductId
     *
     * @return int|null
     */
    public function getPaymentProductId()
    {
        return $this->container['paymentProductId'];
    }

    /**
     * Sets paymentProductId
     *
     * @param int|null $paymentProductId Payment product identifier - please check product documentation for a full overview of possible values.
     *
     * @return self
     */
    public function setPaymentProductId($paymentProductId)
    {
        if (is_null($paymentProductId)) {
            throw new \InvalidArgumentException('non-nullable paymentProductId cannot be null');
        }

        if (($paymentProductId > 99999)) {
            throw new \InvalidArgumentException('invalid value for $paymentProductId when calling CardPaymentMethodSpecificInput., must be smaller than or equal to 99999.');
        }
        if (($paymentProductId < 0)) {
            throw new \InvalidArgumentException('invalid value for $paymentProductId when calling CardPaymentMethodSpecificInput., must be bigger than or equal to 0.');
        }

        $this->container['paymentProductId'] = $paymentProductId;

        return $this;
    }

    /**
     * Gets card
     *
     * @return \PayoneCommercePlatform\Sdk\Domain\CardInfo|null
     */
    public function getCard()
    {
        return $this->container['card'];
    }

    /**
     * Sets card
     *
     * @param \PayoneCommercePlatform\Sdk\Domain\CardInfo|null $card card
     *
     * @return self
     */
    public function setCard($card)
    {
        if (is_null($card)) {
            throw new \InvalidArgumentException('non-nullable card cannot be null');
        }
        $this->container['card'] = $card;

        return $this;
    }

    /**
     * Gets returnUrl
     *
     * @return string|null
     */
    public function getReturnUrl()
    {
        return $this->container['returnUrl'];
    }

    /**
     * Sets returnUrl
     *
     * @param string|null $returnUrl The URL that the customer is redirect to after the payment flow has finished. You can add any number of key value pairs in the query string that, for instance help you to identify the customer when they return to your site. Please note that we will also append some additional key value pairs that will also help you with this identification process. Note: The provided URL should be absolute and contain the protocol to use, e.g. http:// or https://. For use on mobile devices a custom protocol can be used in the form of protocol://. This protocol must be registered on the device first. URLs without a protocol will be rejected.
     *
     * @return self
     */
    public function setReturnUrl($returnUrl)
    {
        if (is_null($returnUrl)) {
            throw new \InvalidArgumentException('non-nullable returnUrl cannot be null');
        }
        if ((mb_strlen($returnUrl) > 200)) {
            throw new \InvalidArgumentException('invalid length for $returnUrl when calling CardPaymentMethodSpecificInput., must be smaller than or equal to 200.');
        }

        $this->container['returnUrl'] = $returnUrl;

        return $this;
    }

    /**
     * Gets cardOnFileRecurringFrequency
     *
     * @return string|null
     */
    public function getCardOnFileRecurringFrequency()
    {
        return $this->container['cardOnFileRecurringFrequency'];
    }

    /**
     * Sets cardOnFileRecurringFrequency
     *
     * @param string|null $cardOnFileRecurringFrequency Period of payment occurrence for recurring and installment payments. Allowed values: * Yearly * Quarterly * Monthly  * Weekly * Daily Supported soon
     *
     * @return self
     */
    public function setCardOnFileRecurringFrequency($cardOnFileRecurringFrequency)
    {
        if (is_null($cardOnFileRecurringFrequency)) {
            throw new \InvalidArgumentException('non-nullable cardOnFileRecurringFrequency cannot be null');
        }
        $allowedValues = $this->getCardOnFileRecurringFrequencyAllowableValues();
        if (!in_array($cardOnFileRecurringFrequency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'cardOnFileRecurringFrequency', must be one of '%s'",
                    $cardOnFileRecurringFrequency,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['cardOnFileRecurringFrequency'] = $cardOnFileRecurringFrequency;

        return $this;
    }

    /**
     * Gets cardOnFileRecurringExpiration
     *
     * @return string|null
     */
    public function getCardOnFileRecurringExpiration()
    {
        return $this->container['cardOnFileRecurringExpiration'];
    }

    /**
     * Sets cardOnFileRecurringExpiration
     *
     * @param string|null $cardOnFileRecurringExpiration The end date of the last scheduled payment in a series of transactions. Format YYYYMMDD Supported soon
     *
     * @return self
     */
    public function setCardOnFileRecurringExpiration($cardOnFileRecurringExpiration)
    {
        if (is_null($cardOnFileRecurringExpiration)) {
            throw new \InvalidArgumentException('non-nullable cardOnFileRecurringExpiration cannot be null');
        }
        if ((mb_strlen($cardOnFileRecurringExpiration) > 8)) {
            throw new \InvalidArgumentException('invalid length for $cardOnFileRecurringExpiration when calling CardPaymentMethodSpecificInput., must be smaller than or equal to 8.');
        }
        if ((!preg_match("/^((19|20|21)\\d{6})?$/", ObjectSerializer::toString($cardOnFileRecurringExpiration)))) {
            throw new \InvalidArgumentException("invalid value for \$cardOnFileRecurringExpiration when calling CardPaymentMethodSpecificInput., must conform to the pattern /^((19|20|21)\\d{6})?$/.");
        }

        $this->container['cardOnFileRecurringExpiration'] = $cardOnFileRecurringExpiration;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
