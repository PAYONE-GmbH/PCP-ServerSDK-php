<?php
/**
 * InstallmentOption
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  PayoneCommercePlatform\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Commerce Platform API
 *
 * RESTful API for the creation of Commerce Cases with Checkouts and the execution of Payments.
 *
 * The version of the OpenAPI document: 1.6.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace PayoneCommercePlatform\Sdk\Domain;

use \ArrayAccess;
use \PayoneCommercePlatform\Sdk\ObjectSerializer;

/**
 * InstallmentOption Class Doc Comment
 *
 * @category Class
 * @package  PayoneCommercePlatform\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class InstallmentOption implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'InstallmentOption';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'installmentOptionId' => 'string',
        'numberOfPayments' => 'int',
        'monthlyAmount' => '\PayoneCommercePlatform\Sdk\Domain\AmountOfMoney',
        'lastRateAmount' => '\PayoneCommercePlatform\Sdk\Domain\AmountOfMoney',
        'effectiveInterestRate' => 'int',
        'nominalInterestRate' => 'int',
        'totalAmount' => '\PayoneCommercePlatform\Sdk\Domain\AmountOfMoney',
        'firstRateDate' => 'string',
        'creditInformation' => '\PayoneCommercePlatform\Sdk\Domain\LinkInformation'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'installmentOptionId' => null,
        'numberOfPayments' => 'int32',
        'monthlyAmount' => null,
        'lastRateAmount' => null,
        'effectiveInterestRate' => 'int32',
        'nominalInterestRate' => 'int32',
        'totalAmount' => null,
        'firstRateDate' => null,
        'creditInformation' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'installmentOptionId' => false,
        'numberOfPayments' => false,
        'monthlyAmount' => false,
        'lastRateAmount' => false,
        'effectiveInterestRate' => false,
        'nominalInterestRate' => false,
        'totalAmount' => false,
        'firstRateDate' => false,
        'creditInformation' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'installmentOptionId' => 'installmentOptionId',
        'numberOfPayments' => 'numberOfPayments',
        'monthlyAmount' => 'monthlyAmount',
        'lastRateAmount' => 'lastRateAmount',
        'effectiveInterestRate' => 'effectiveInterestRate',
        'nominalInterestRate' => 'nominalInterestRate',
        'totalAmount' => 'totalAmount',
        'firstRateDate' => 'firstRateDate',
        'creditInformation' => 'creditInformation'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'installmentOptionId' => 'setInstallmentOptionId',
        'numberOfPayments' => 'setNumberOfPayments',
        'monthlyAmount' => 'setMonthlyAmount',
        'lastRateAmount' => 'setLastRateAmount',
        'effectiveInterestRate' => 'setEffectiveInterestRate',
        'nominalInterestRate' => 'setNominalInterestRate',
        'totalAmount' => 'setTotalAmount',
        'firstRateDate' => 'setFirstRateDate',
        'creditInformation' => 'setCreditInformation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'installmentOptionId' => 'getInstallmentOptionId',
        'numberOfPayments' => 'getNumberOfPayments',
        'monthlyAmount' => 'getMonthlyAmount',
        'lastRateAmount' => 'getLastRateAmount',
        'effectiveInterestRate' => 'getEffectiveInterestRate',
        'nominalInterestRate' => 'getNominalInterestRate',
        'totalAmount' => 'getTotalAmount',
        'firstRateDate' => 'getFirstRateDate',
        'creditInformation' => 'getCreditInformation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('installmentOptionId', $data ?? [], null);
        $this->setIfExists('numberOfPayments', $data ?? [], null);
        $this->setIfExists('monthlyAmount', $data ?? [], null);
        $this->setIfExists('lastRateAmount', $data ?? [], null);
        $this->setIfExists('effectiveInterestRate', $data ?? [], null);
        $this->setIfExists('nominalInterestRate', $data ?? [], null);
        $this->setIfExists('totalAmount', $data ?? [], null);
        $this->setIfExists('firstRateDate', $data ?? [], null);
        $this->setIfExists('creditInformation', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['installmentOptionId'] === null) {
            $invalidProperties[] = "'installmentOptionId' can't be null";
        }
        if ($this->container['numberOfPayments'] === null) {
            $invalidProperties[] = "'numberOfPayments' can't be null";
        }
        if ($this->container['monthlyAmount'] === null) {
            $invalidProperties[] = "'monthlyAmount' can't be null";
        }
        if ($this->container['lastRateAmount'] === null) {
            $invalidProperties[] = "'lastRateAmount' can't be null";
        }
        if ($this->container['effectiveInterestRate'] === null) {
            $invalidProperties[] = "'effectiveInterestRate' can't be null";
        }
        if ($this->container['nominalInterestRate'] === null) {
            $invalidProperties[] = "'nominalInterestRate' can't be null";
        }
        if ($this->container['totalAmount'] === null) {
            $invalidProperties[] = "'totalAmount' can't be null";
        }
        if ($this->container['firstRateDate'] === null) {
            $invalidProperties[] = "'firstRateDate' can't be null";
        }
        if ((mb_strlen($this->container['firstRateDate']) > 8)) {
            $invalidProperties[] = "invalid value for 'firstRateDate', the character length must be smaller than or equal to 8.";
        }

        if (!preg_match("/^((19|20|21)\\d{6})?$/", $this->container['firstRateDate'])) {
            $invalidProperties[] = "invalid value for 'firstRateDate', must be conform to the pattern /^((19|20|21)\\d{6})?$/.";
        }

        if ($this->container['creditInformation'] === null) {
            $invalidProperties[] = "'creditInformation' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets installmentOptionId
     *
     * @return string
     */
    public function getInstallmentOptionId()
    {
        return $this->container['installmentOptionId'];
    }

    /**
     * Sets installmentOptionId
     *
     * @param string $installmentOptionId Installment option Identifier. Use this in the Complete Payment for the selected installment option.
     *
     * @return self
     */
    public function setInstallmentOptionId($installmentOptionId)
    {
        if (is_null($installmentOptionId)) {
            throw new \InvalidArgumentException('non-nullable installmentOptionId cannot be null');
        }
        $this->container['installmentOptionId'] = $installmentOptionId;

        return $this;
    }

    /**
     * Gets numberOfPayments
     *
     * @return int
     */
    public function getNumberOfPayments()
    {
        return $this->container['numberOfPayments'];
    }

    /**
     * Sets numberOfPayments
     *
     * @param int $numberOfPayments The number of monthly payments for this installment.
     *
     * @return self
     */
    public function setNumberOfPayments($numberOfPayments)
    {
        if (is_null($numberOfPayments)) {
            throw new \InvalidArgumentException('non-nullable numberOfPayments cannot be null');
        }
        $this->container['numberOfPayments'] = $numberOfPayments;

        return $this;
    }

    /**
     * Gets monthlyAmount
     *
     * @return \PayoneCommercePlatform\Sdk\Domain\AmountOfMoney
     */
    public function getMonthlyAmount()
    {
        return $this->container['monthlyAmount'];
    }

    /**
     * Sets monthlyAmount
     *
     * @param \PayoneCommercePlatform\Sdk\Domain\AmountOfMoney $monthlyAmount Monthly rate amount.
     *
     * @return self
     */
    public function setMonthlyAmount($monthlyAmount)
    {
        if (is_null($monthlyAmount)) {
            throw new \InvalidArgumentException('non-nullable monthlyAmount cannot be null');
        }
        $this->container['monthlyAmount'] = $monthlyAmount;

        return $this;
    }

    /**
     * Gets lastRateAmount
     *
     * @return \PayoneCommercePlatform\Sdk\Domain\AmountOfMoney
     */
    public function getLastRateAmount()
    {
        return $this->container['lastRateAmount'];
    }

    /**
     * Sets lastRateAmount
     *
     * @param \PayoneCommercePlatform\Sdk\Domain\AmountOfMoney $lastRateAmount Last rate amount.
     *
     * @return self
     */
    public function setLastRateAmount($lastRateAmount)
    {
        if (is_null($lastRateAmount)) {
            throw new \InvalidArgumentException('non-nullable lastRateAmount cannot be null');
        }
        $this->container['lastRateAmount'] = $lastRateAmount;

        return $this;
    }

    /**
     * Gets effectiveInterestRate
     *
     * @return int
     */
    public function getEffectiveInterestRate()
    {
        return $this->container['effectiveInterestRate'];
    }

    /**
     * Sets effectiveInterestRate
     *
     * @param int $effectiveInterestRate Effective interest amount in percent with two decimals.
     *
     * @return self
     */
    public function setEffectiveInterestRate($effectiveInterestRate)
    {
        if (is_null($effectiveInterestRate)) {
            throw new \InvalidArgumentException('non-nullable effectiveInterestRate cannot be null');
        }
        $this->container['effectiveInterestRate'] = $effectiveInterestRate;

        return $this;
    }

    /**
     * Gets nominalInterestRate
     *
     * @return int
     */
    public function getNominalInterestRate()
    {
        return $this->container['nominalInterestRate'];
    }

    /**
     * Sets nominalInterestRate
     *
     * @param int $nominalInterestRate Nominal interest amount in percent with two decimals.
     *
     * @return self
     */
    public function setNominalInterestRate($nominalInterestRate)
    {
        if (is_null($nominalInterestRate)) {
            throw new \InvalidArgumentException('non-nullable nominalInterestRate cannot be null');
        }
        $this->container['nominalInterestRate'] = $nominalInterestRate;

        return $this;
    }

    /**
     * Gets totalAmount
     *
     * @return \PayoneCommercePlatform\Sdk\Domain\AmountOfMoney
     */
    public function getTotalAmount()
    {
        return $this->container['totalAmount'];
    }

    /**
     * Sets totalAmount
     *
     * @param \PayoneCommercePlatform\Sdk\Domain\AmountOfMoney $totalAmount Total rate amount.
     *
     * @return self
     */
    public function setTotalAmount($totalAmount)
    {
        if (is_null($totalAmount)) {
            throw new \InvalidArgumentException('non-nullable totalAmount cannot be null');
        }
        $this->container['totalAmount'] = $totalAmount;

        return $this;
    }

    /**
     * Gets firstRateDate
     *
     * @return string
     */
    public function getFirstRateDate()
    {
        return $this->container['firstRateDate'];
    }

    /**
     * Sets firstRateDate
     *
     * @param string $firstRateDate Due date of first rate. Format: YYYYMMDD
     *
     * @return self
     */
    public function setFirstRateDate($firstRateDate)
    {
        if (is_null($firstRateDate)) {
            throw new \InvalidArgumentException('non-nullable firstRateDate cannot be null');
        }
        if ((mb_strlen($firstRateDate) > 8)) {
            throw new \InvalidArgumentException('invalid length for $firstRateDate when calling InstallmentOption., must be smaller than or equal to 8.');
        }
        if ((!preg_match("/^((19|20|21)\\d{6})?$/", ObjectSerializer::toString($firstRateDate)))) {
            throw new \InvalidArgumentException("invalid value for \$firstRateDate when calling InstallmentOption., must conform to the pattern /^((19|20|21)\\d{6})?$/.");
        }

        $this->container['firstRateDate'] = $firstRateDate;

        return $this;
    }

    /**
     * Gets creditInformation
     *
     * @return \PayoneCommercePlatform\Sdk\Domain\LinkInformation
     */
    public function getCreditInformation()
    {
        return $this->container['creditInformation'];
    }

    /**
     * Sets creditInformation
     *
     * @param \PayoneCommercePlatform\Sdk\Domain\LinkInformation $creditInformation Link with credit information.
     *
     * @return self
     */
    public function setCreditInformation($creditInformation)
    {
        if (is_null($creditInformation)) {
            throw new \InvalidArgumentException('non-nullable creditInformation cannot be null');
        }
        $this->container['creditInformation'] = $creditInformation;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


