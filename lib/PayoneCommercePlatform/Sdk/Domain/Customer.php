<?php
/**
 * Customer
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  PayoneCommercePlatform\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Commerce Platform API
 *
 * RESTful API for the creation of Commerce Cases with Checkouts and the execution of Payments.
 *
 * The version of the OpenAPI document: 1.6.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace PayoneCommercePlatform\Sdk\Domain;

use ArrayAccess;
use PayoneCommercePlatform\Sdk\ObjectSerializer;

/**
 * Customer Class Doc Comment
 *
 * @category Class
 * @description Object containing the details of a customer.
 * @package  PayoneCommercePlatform\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Customer implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Customer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'companyInformation' => '\PayoneCommercePlatform\Sdk\Domain\CompanyInformation',
        'merchantCustomerId' => 'string',
        'billingAddress' => '\PayoneCommercePlatform\Sdk\Domain\Address',
        'contactDetails' => '\PayoneCommercePlatform\Sdk\Domain\ContactDetails',
        'fiscalNumber' => 'string',
        'businessRelation' => 'string',
        'locale' => 'string',
        'personalInformation' => '\PayoneCommercePlatform\Sdk\Domain\PersonalInformation'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'companyInformation' => null,
        'merchantCustomerId' => null,
        'billingAddress' => null,
        'contactDetails' => null,
        'fiscalNumber' => null,
        'businessRelation' => null,
        'locale' => null,
        'personalInformation' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'companyInformation' => false,
        'merchantCustomerId' => false,
        'billingAddress' => false,
        'contactDetails' => false,
        'fiscalNumber' => false,
        'businessRelation' => false,
        'locale' => false,
        'personalInformation' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'companyInformation' => 'companyInformation',
        'merchantCustomerId' => 'merchantCustomerId',
        'billingAddress' => 'billingAddress',
        'contactDetails' => 'contactDetails',
        'fiscalNumber' => 'fiscalNumber',
        'businessRelation' => 'businessRelation',
        'locale' => 'locale',
        'personalInformation' => 'personalInformation'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'companyInformation' => 'setCompanyInformation',
        'merchantCustomerId' => 'setMerchantCustomerId',
        'billingAddress' => 'setBillingAddress',
        'contactDetails' => 'setContactDetails',
        'fiscalNumber' => 'setFiscalNumber',
        'businessRelation' => 'setBusinessRelation',
        'locale' => 'setLocale',
        'personalInformation' => 'setPersonalInformation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'companyInformation' => 'getCompanyInformation',
        'merchantCustomerId' => 'getMerchantCustomerId',
        'billingAddress' => 'getBillingAddress',
        'contactDetails' => 'getContactDetails',
        'fiscalNumber' => 'getFiscalNumber',
        'businessRelation' => 'getBusinessRelation',
        'locale' => 'getLocale',
        'personalInformation' => 'getPersonalInformation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('companyInformation', $data ?? [], null);
        $this->setIfExists('merchantCustomerId', $data ?? [], null);
        $this->setIfExists('billingAddress', $data ?? [], null);
        $this->setIfExists('contactDetails', $data ?? [], null);
        $this->setIfExists('fiscalNumber', $data ?? [], null);
        $this->setIfExists('businessRelation', $data ?? [], null);
        $this->setIfExists('locale', $data ?? [], null);
        $this->setIfExists('personalInformation', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['merchantCustomerId']) && (mb_strlen($this->container['merchantCustomerId']) > 20)) {
            $invalidProperties[] = "invalid value for 'merchantCustomerId', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['fiscalNumber']) && (mb_strlen($this->container['fiscalNumber']) > 14)) {
            $invalidProperties[] = "invalid value for 'fiscalNumber', the character length must be smaller than or equal to 14.";
        }

        if (!is_null($this->container['locale']) && (mb_strlen($this->container['locale']) > 2)) {
            $invalidProperties[] = "invalid value for 'locale', the character length must be smaller than or equal to 2.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets companyInformation
     *
     * @return \PayoneCommercePlatform\Sdk\Domain\CompanyInformation|null
     */
    public function getCompanyInformation()
    {
        return $this->container['companyInformation'];
    }

    /**
     * Sets companyInformation
     *
     * @param \PayoneCommercePlatform\Sdk\Domain\CompanyInformation|null $companyInformation companyInformation
     *
     * @return self
     */
    public function setCompanyInformation($companyInformation)
    {
        if (is_null($companyInformation)) {
            throw new \InvalidArgumentException('non-nullable companyInformation cannot be null');
        }
        $this->container['companyInformation'] = $companyInformation;

        return $this;
    }

    /**
     * Gets merchantCustomerId
     *
     * @return string|null
     */
    public function getMerchantCustomerId()
    {
        return $this->container['merchantCustomerId'];
    }

    /**
     * Sets merchantCustomerId
     *
     * @param string|null $merchantCustomerId Unique identifier for the customer.
     *
     * @return self
     */
    public function setMerchantCustomerId($merchantCustomerId)
    {
        if (is_null($merchantCustomerId)) {
            throw new \InvalidArgumentException('non-nullable merchantCustomerId cannot be null');
        }
        if ((mb_strlen($merchantCustomerId) > 20)) {
            throw new \InvalidArgumentException('invalid length for $merchantCustomerId when calling Customer., must be smaller than or equal to 20.');
        }

        $this->container['merchantCustomerId'] = $merchantCustomerId;

        return $this;
    }

    /**
     * Gets billingAddress
     *
     * @return \PayoneCommercePlatform\Sdk\Domain\Address|null
     */
    public function getBillingAddress()
    {
        return $this->container['billingAddress'];
    }

    /**
     * Sets billingAddress
     *
     * @param \PayoneCommercePlatform\Sdk\Domain\Address|null $billingAddress billingAddress
     *
     * @return self
     */
    public function setBillingAddress($billingAddress)
    {
        if (is_null($billingAddress)) {
            throw new \InvalidArgumentException('non-nullable billingAddress cannot be null');
        }
        $this->container['billingAddress'] = $billingAddress;

        return $this;
    }

    /**
     * Gets contactDetails
     *
     * @return \PayoneCommercePlatform\Sdk\Domain\ContactDetails|null
     */
    public function getContactDetails()
    {
        return $this->container['contactDetails'];
    }

    /**
     * Sets contactDetails
     *
     * @param \PayoneCommercePlatform\Sdk\Domain\ContactDetails|null $contactDetails contactDetails
     *
     * @return self
     */
    public function setContactDetails($contactDetails)
    {
        if (is_null($contactDetails)) {
            throw new \InvalidArgumentException('non-nullable contactDetails cannot be null');
        }
        $this->container['contactDetails'] = $contactDetails;

        return $this;
    }

    /**
     * Gets fiscalNumber
     *
     * @return string|null
     */
    public function getFiscalNumber()
    {
        return $this->container['fiscalNumber'];
    }

    /**
     * Sets fiscalNumber
     *
     * @param string|null $fiscalNumber Fiscal registration number of the customer or the tax registration number of the company for a business customer. Please find below specifics per country:  * Brazil - Consumer (CPF) with a length of 11 digits  * Brazil - Company (CNPJ) with a length of 14 digits  * Denmark - Consumer (CPR-nummer or personnummer) with a length of 10 digits  * Finland - Consumer (Finnish: henkilötunnus (abbreviated as HETU), Swedish: personbeteckning) with a length of 11 characters  * Norway - Consumer (fødselsnummer) with a length of 11 digits  * Sweden - Consumer (personnummer) with a length of 10 or 12 digits
     *
     * @return self
     */
    public function setFiscalNumber($fiscalNumber)
    {
        if (is_null($fiscalNumber)) {
            throw new \InvalidArgumentException('non-nullable fiscalNumber cannot be null');
        }
        if ((mb_strlen($fiscalNumber) > 14)) {
            throw new \InvalidArgumentException('invalid length for $fiscalNumber when calling Customer., must be smaller than or equal to 14.');
        }

        $this->container['fiscalNumber'] = $fiscalNumber;

        return $this;
    }

    /**
     * Gets businessRelation
     *
     * @return string|null
     */
    public function getBusinessRelation()
    {
        return $this->container['businessRelation'];
    }

    /**
     * Sets businessRelation
     *
     * @param string|null $businessRelation Business relation to the customer. Possible values:         * B2C - Indicates business to consumer * B2B - Indicates business to business  Mandatory for the the following payment methods: * 3390 - PAYONE Secured Invoice * 3391 - PAYONE Secured Installment * 3392 - PAYONE Secured Direct Debit
     *
     * @return self
     */
    public function setBusinessRelation($businessRelation)
    {
        if (is_null($businessRelation)) {
            throw new \InvalidArgumentException('non-nullable businessRelation cannot be null');
        }
        $this->container['businessRelation'] = $businessRelation;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return string|null
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param string|null $locale The locale that the customer should be addressed in (for 3rd parties).   Note: Only the language code is supported.
     *
     * @return self
     */
    public function setLocale($locale)
    {
        if (is_null($locale)) {
            throw new \InvalidArgumentException('non-nullable locale cannot be null');
        }
        if ((mb_strlen($locale) > 2)) {
            throw new \InvalidArgumentException('invalid length for $locale when calling Customer., must be smaller than or equal to 2.');
        }

        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets personalInformation
     *
     * @return \PayoneCommercePlatform\Sdk\Domain\PersonalInformation|null
     */
    public function getPersonalInformation()
    {
        return $this->container['personalInformation'];
    }

    /**
     * Sets personalInformation
     *
     * @param \PayoneCommercePlatform\Sdk\Domain\PersonalInformation|null $personalInformation personalInformation
     *
     * @return self
     */
    public function setPersonalInformation($personalInformation)
    {
        if (is_null($personalInformation)) {
            throw new \InvalidArgumentException('non-nullable personalInformation cannot be null');
        }
        $this->container['personalInformation'] = $personalInformation;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
