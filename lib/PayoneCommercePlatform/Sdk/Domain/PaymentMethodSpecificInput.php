<?php
/**
 * PaymentMethodSpecificInput
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  PayoneCommercePlatform\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Commerce Platform API
 *
 * RESTful API for the creation of Commerce Cases with Checkouts and the execution of Payments.
 *
 * The version of the OpenAPI document: 1.6.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace PayoneCommercePlatform\Sdk\Domain;

use ArrayAccess;
use PayoneCommercePlatform\Sdk\ObjectSerializer;

/**
 * PaymentMethodSpecificInput Class Doc Comment
 *
 * @category Class
 * @description Input for the payment for a respective payment method. In case the paymentMethodSpecificInput has already been provided when creating the Commerce Case or Checkout, it will automatically be used for the Payment Execution. If a new input will be provided, the existing input will be updated.
 * @package  PayoneCommercePlatform\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PaymentMethodSpecificInput implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PaymentMethodSpecificInput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'cardPaymentMethodSpecificInput' => '\PayoneCommercePlatform\Sdk\Domain\CardPaymentMethodSpecificInput',
        'mobilePaymentMethodSpecificInput' => '\PayoneCommercePlatform\Sdk\Domain\MobilePaymentMethodSpecificInput',
        'redirectPaymentMethodSpecificInput' => '\PayoneCommercePlatform\Sdk\Domain\RedirectPaymentMethodSpecificInput',
        'sepaDirectDebitPaymentMethodSpecificInput' => '\PayoneCommercePlatform\Sdk\Domain\SepaDirectDebitPaymentMethodSpecificInput',
        'financingPaymentMethodSpecificInput' => '\PayoneCommercePlatform\Sdk\Domain\FinancingPaymentMethodSpecificInput',
        'customerDevice' => '\PayoneCommercePlatform\Sdk\Domain\CustomerDevice',
        'paymentChannel' => '\PayoneCommercePlatform\Sdk\Domain\PaymentChannel'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'cardPaymentMethodSpecificInput' => null,
        'mobilePaymentMethodSpecificInput' => null,
        'redirectPaymentMethodSpecificInput' => null,
        'sepaDirectDebitPaymentMethodSpecificInput' => null,
        'financingPaymentMethodSpecificInput' => null,
        'customerDevice' => null,
        'paymentChannel' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'cardPaymentMethodSpecificInput' => false,
        'mobilePaymentMethodSpecificInput' => false,
        'redirectPaymentMethodSpecificInput' => false,
        'sepaDirectDebitPaymentMethodSpecificInput' => false,
        'financingPaymentMethodSpecificInput' => false,
        'customerDevice' => false,
        'paymentChannel' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cardPaymentMethodSpecificInput' => 'cardPaymentMethodSpecificInput',
        'mobilePaymentMethodSpecificInput' => 'mobilePaymentMethodSpecificInput',
        'redirectPaymentMethodSpecificInput' => 'redirectPaymentMethodSpecificInput',
        'sepaDirectDebitPaymentMethodSpecificInput' => 'sepaDirectDebitPaymentMethodSpecificInput',
        'financingPaymentMethodSpecificInput' => 'financingPaymentMethodSpecificInput',
        'customerDevice' => 'customerDevice',
        'paymentChannel' => 'paymentChannel'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cardPaymentMethodSpecificInput' => 'setCardPaymentMethodSpecificInput',
        'mobilePaymentMethodSpecificInput' => 'setMobilePaymentMethodSpecificInput',
        'redirectPaymentMethodSpecificInput' => 'setRedirectPaymentMethodSpecificInput',
        'sepaDirectDebitPaymentMethodSpecificInput' => 'setSepaDirectDebitPaymentMethodSpecificInput',
        'financingPaymentMethodSpecificInput' => 'setFinancingPaymentMethodSpecificInput',
        'customerDevice' => 'setCustomerDevice',
        'paymentChannel' => 'setPaymentChannel'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cardPaymentMethodSpecificInput' => 'getCardPaymentMethodSpecificInput',
        'mobilePaymentMethodSpecificInput' => 'getMobilePaymentMethodSpecificInput',
        'redirectPaymentMethodSpecificInput' => 'getRedirectPaymentMethodSpecificInput',
        'sepaDirectDebitPaymentMethodSpecificInput' => 'getSepaDirectDebitPaymentMethodSpecificInput',
        'financingPaymentMethodSpecificInput' => 'getFinancingPaymentMethodSpecificInput',
        'customerDevice' => 'getCustomerDevice',
        'paymentChannel' => 'getPaymentChannel'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('cardPaymentMethodSpecificInput', $data ?? [], null);
        $this->setIfExists('mobilePaymentMethodSpecificInput', $data ?? [], null);
        $this->setIfExists('redirectPaymentMethodSpecificInput', $data ?? [], null);
        $this->setIfExists('sepaDirectDebitPaymentMethodSpecificInput', $data ?? [], null);
        $this->setIfExists('financingPaymentMethodSpecificInput', $data ?? [], null);
        $this->setIfExists('customerDevice', $data ?? [], null);
        $this->setIfExists('paymentChannel', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cardPaymentMethodSpecificInput
     *
     * @return \PayoneCommercePlatform\Sdk\Domain\CardPaymentMethodSpecificInput|null
     */
    public function getCardPaymentMethodSpecificInput()
    {
        return $this->container['cardPaymentMethodSpecificInput'];
    }

    /**
     * Sets cardPaymentMethodSpecificInput
     *
     * @param \PayoneCommercePlatform\Sdk\Domain\CardPaymentMethodSpecificInput|null $cardPaymentMethodSpecificInput cardPaymentMethodSpecificInput
     *
     * @return self
     */
    public function setCardPaymentMethodSpecificInput($cardPaymentMethodSpecificInput)
    {
        if (is_null($cardPaymentMethodSpecificInput)) {
            throw new \InvalidArgumentException('non-nullable cardPaymentMethodSpecificInput cannot be null');
        }
        $this->container['cardPaymentMethodSpecificInput'] = $cardPaymentMethodSpecificInput;

        return $this;
    }

    /**
     * Gets mobilePaymentMethodSpecificInput
     *
     * @return \PayoneCommercePlatform\Sdk\Domain\MobilePaymentMethodSpecificInput|null
     */
    public function getMobilePaymentMethodSpecificInput()
    {
        return $this->container['mobilePaymentMethodSpecificInput'];
    }

    /**
     * Sets mobilePaymentMethodSpecificInput
     *
     * @param \PayoneCommercePlatform\Sdk\Domain\MobilePaymentMethodSpecificInput|null $mobilePaymentMethodSpecificInput mobilePaymentMethodSpecificInput
     *
     * @return self
     */
    public function setMobilePaymentMethodSpecificInput($mobilePaymentMethodSpecificInput)
    {
        if (is_null($mobilePaymentMethodSpecificInput)) {
            throw new \InvalidArgumentException('non-nullable mobilePaymentMethodSpecificInput cannot be null');
        }
        $this->container['mobilePaymentMethodSpecificInput'] = $mobilePaymentMethodSpecificInput;

        return $this;
    }

    /**
     * Gets redirectPaymentMethodSpecificInput
     *
     * @return \PayoneCommercePlatform\Sdk\Domain\RedirectPaymentMethodSpecificInput|null
     */
    public function getRedirectPaymentMethodSpecificInput()
    {
        return $this->container['redirectPaymentMethodSpecificInput'];
    }

    /**
     * Sets redirectPaymentMethodSpecificInput
     *
     * @param \PayoneCommercePlatform\Sdk\Domain\RedirectPaymentMethodSpecificInput|null $redirectPaymentMethodSpecificInput redirectPaymentMethodSpecificInput
     *
     * @return self
     */
    public function setRedirectPaymentMethodSpecificInput($redirectPaymentMethodSpecificInput)
    {
        if (is_null($redirectPaymentMethodSpecificInput)) {
            throw new \InvalidArgumentException('non-nullable redirectPaymentMethodSpecificInput cannot be null');
        }
        $this->container['redirectPaymentMethodSpecificInput'] = $redirectPaymentMethodSpecificInput;

        return $this;
    }

    /**
     * Gets sepaDirectDebitPaymentMethodSpecificInput
     *
     * @return \PayoneCommercePlatform\Sdk\Domain\SepaDirectDebitPaymentMethodSpecificInput|null
     */
    public function getSepaDirectDebitPaymentMethodSpecificInput()
    {
        return $this->container['sepaDirectDebitPaymentMethodSpecificInput'];
    }

    /**
     * Sets sepaDirectDebitPaymentMethodSpecificInput
     *
     * @param \PayoneCommercePlatform\Sdk\Domain\SepaDirectDebitPaymentMethodSpecificInput|null $sepaDirectDebitPaymentMethodSpecificInput sepaDirectDebitPaymentMethodSpecificInput
     *
     * @return self
     */
    public function setSepaDirectDebitPaymentMethodSpecificInput($sepaDirectDebitPaymentMethodSpecificInput)
    {
        if (is_null($sepaDirectDebitPaymentMethodSpecificInput)) {
            throw new \InvalidArgumentException('non-nullable sepaDirectDebitPaymentMethodSpecificInput cannot be null');
        }
        $this->container['sepaDirectDebitPaymentMethodSpecificInput'] = $sepaDirectDebitPaymentMethodSpecificInput;

        return $this;
    }

    /**
     * Gets financingPaymentMethodSpecificInput
     *
     * @return \PayoneCommercePlatform\Sdk\Domain\FinancingPaymentMethodSpecificInput|null
     */
    public function getFinancingPaymentMethodSpecificInput()
    {
        return $this->container['financingPaymentMethodSpecificInput'];
    }

    /**
     * Sets financingPaymentMethodSpecificInput
     *
     * @param \PayoneCommercePlatform\Sdk\Domain\FinancingPaymentMethodSpecificInput|null $financingPaymentMethodSpecificInput financingPaymentMethodSpecificInput
     *
     * @return self
     */
    public function setFinancingPaymentMethodSpecificInput($financingPaymentMethodSpecificInput)
    {
        if (is_null($financingPaymentMethodSpecificInput)) {
            throw new \InvalidArgumentException('non-nullable financingPaymentMethodSpecificInput cannot be null');
        }
        $this->container['financingPaymentMethodSpecificInput'] = $financingPaymentMethodSpecificInput;

        return $this;
    }

    /**
     * Gets customerDevice
     *
     * @return \PayoneCommercePlatform\Sdk\Domain\CustomerDevice|null
     */
    public function getCustomerDevice()
    {
        return $this->container['customerDevice'];
    }

    /**
     * Sets customerDevice
     *
     * @param \PayoneCommercePlatform\Sdk\Domain\CustomerDevice|null $customerDevice customerDevice
     *
     * @return self
     */
    public function setCustomerDevice($customerDevice)
    {
        if (is_null($customerDevice)) {
            throw new \InvalidArgumentException('non-nullable customerDevice cannot be null');
        }
        $this->container['customerDevice'] = $customerDevice;

        return $this;
    }

    /**
     * Gets paymentChannel
     *
     * @return \PayoneCommercePlatform\Sdk\Domain\PaymentChannel|null
     */
    public function getPaymentChannel()
    {
        return $this->container['paymentChannel'];
    }

    /**
     * Sets paymentChannel
     *
     * @param \PayoneCommercePlatform\Sdk\Domain\PaymentChannel|null $paymentChannel paymentChannel
     *
     * @return self
     */
    public function setPaymentChannel($paymentChannel)
    {
        if (is_null($paymentChannel)) {
            throw new \InvalidArgumentException('non-nullable paymentChannel cannot be null');
        }
        $this->container['paymentChannel'] = $paymentChannel;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
