<?php
/**
 * CreateCheckoutResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  PayoneCommercePlatform\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Commerce Platform API
 *
 * RESTful API for the creation of Commerce Cases with Checkouts and the execution of Payments.
 *
 * The version of the OpenAPI document: 1.6.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace PayoneCommercePlatform\Sdk\Domain;

use \ArrayAccess;
use \PayoneCommercePlatform\Sdk\ObjectSerializer;

/**
 * CreateCheckoutResponse Class Doc Comment
 *
 * @category Class
 * @description Object containing the reference of the Checkout for following requests.
 * @package  PayoneCommercePlatform\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateCheckoutResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreateCheckoutResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'checkoutId' => 'string',
        'shoppingCart' => '\PayoneCommercePlatform\Sdk\Domain\ShoppingCartResult',
        'paymentResponse' => '\PayoneCommercePlatform\Sdk\Domain\CreatePaymentResponse',
        'errorResponse' => '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse',
        'amountOfMoney' => '\PayoneCommercePlatform\Sdk\Domain\AmountOfMoney',
        'references' => '\PayoneCommercePlatform\Sdk\Domain\CheckoutReferences',
        'shipping' => '\PayoneCommercePlatform\Sdk\Domain\Shipping',
        'paymentExecution' => '\PayoneCommercePlatform\Sdk\Domain\PaymentExecution',
        'checkoutStatus' => '\PayoneCommercePlatform\Sdk\Domain\StatusCheckout',
        'statusOutput' => '\PayoneCommercePlatform\Sdk\Domain\StatusOutput',
        'creationDateTime' => '\DateTime',
        'allowedPaymentActions' => '\PayoneCommercePlatform\Sdk\Domain\AllowedPaymentActions[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'checkoutId' => 'UUID',
        'shoppingCart' => null,
        'paymentResponse' => null,
        'errorResponse' => null,
        'amountOfMoney' => null,
        'references' => null,
        'shipping' => null,
        'paymentExecution' => null,
        'checkoutStatus' => null,
        'statusOutput' => null,
        'creationDateTime' => 'date-time',
        'allowedPaymentActions' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'checkoutId' => false,
        'shoppingCart' => false,
        'paymentResponse' => false,
        'errorResponse' => false,
        'amountOfMoney' => false,
        'references' => false,
        'shipping' => false,
        'paymentExecution' => false,
        'checkoutStatus' => false,
        'statusOutput' => false,
        'creationDateTime' => false,
        'allowedPaymentActions' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'checkoutId' => 'checkoutId',
        'shoppingCart' => 'shoppingCart',
        'paymentResponse' => 'paymentResponse',
        'errorResponse' => 'errorResponse',
        'amountOfMoney' => 'amountOfMoney',
        'references' => 'references',
        'shipping' => 'shipping',
        'paymentExecution' => 'paymentExecution',
        'checkoutStatus' => 'checkoutStatus',
        'statusOutput' => 'statusOutput',
        'creationDateTime' => 'creationDateTime',
        'allowedPaymentActions' => 'allowedPaymentActions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'checkoutId' => 'setCheckoutId',
        'shoppingCart' => 'setShoppingCart',
        'paymentResponse' => 'setPaymentResponse',
        'errorResponse' => 'setErrorResponse',
        'amountOfMoney' => 'setAmountOfMoney',
        'references' => 'setReferences',
        'shipping' => 'setShipping',
        'paymentExecution' => 'setPaymentExecution',
        'checkoutStatus' => 'setCheckoutStatus',
        'statusOutput' => 'setStatusOutput',
        'creationDateTime' => 'setCreationDateTime',
        'allowedPaymentActions' => 'setAllowedPaymentActions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'checkoutId' => 'getCheckoutId',
        'shoppingCart' => 'getShoppingCart',
        'paymentResponse' => 'getPaymentResponse',
        'errorResponse' => 'getErrorResponse',
        'amountOfMoney' => 'getAmountOfMoney',
        'references' => 'getReferences',
        'shipping' => 'getShipping',
        'paymentExecution' => 'getPaymentExecution',
        'checkoutStatus' => 'getCheckoutStatus',
        'statusOutput' => 'getStatusOutput',
        'creationDateTime' => 'getCreationDateTime',
        'allowedPaymentActions' => 'getAllowedPaymentActions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('checkoutId', $data ?? [], null);
        $this->setIfExists('shoppingCart', $data ?? [], null);
        $this->setIfExists('paymentResponse', $data ?? [], null);
        $this->setIfExists('errorResponse', $data ?? [], null);
        $this->setIfExists('amountOfMoney', $data ?? [], null);
        $this->setIfExists('references', $data ?? [], null);
        $this->setIfExists('shipping', $data ?? [], null);
        $this->setIfExists('paymentExecution', $data ?? [], null);
        $this->setIfExists('checkoutStatus', $data ?? [], null);
        $this->setIfExists('statusOutput', $data ?? [], null);
        $this->setIfExists('creationDateTime', $data ?? [], null);
        $this->setIfExists('allowedPaymentActions', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets checkoutId
     *
     * @return string|null
     */
    public function getCheckoutId()
    {
        return $this->container['checkoutId'];
    }

    /**
     * Sets checkoutId
     *
     * @param string|null $checkoutId Reference to the Checkout. Can be used for following requests to get and update the Checkout and execute the payment.
     *
     * @return self
     */
    public function setCheckoutId($checkoutId)
    {
        if (is_null($checkoutId)) {
            throw new \InvalidArgumentException('non-nullable checkoutId cannot be null');
        }
        $this->container['checkoutId'] = $checkoutId;

        return $this;
    }

    /**
     * Gets shoppingCart
     *
     * @return \PayoneCommercePlatform\Sdk\Domain\ShoppingCartResult|null
     */
    public function getShoppingCart()
    {
        return $this->container['shoppingCart'];
    }

    /**
     * Sets shoppingCart
     *
     * @param \PayoneCommercePlatform\Sdk\Domain\ShoppingCartResult|null $shoppingCart shoppingCart
     *
     * @return self
     */
    public function setShoppingCart($shoppingCart)
    {
        if (is_null($shoppingCart)) {
            throw new \InvalidArgumentException('non-nullable shoppingCart cannot be null');
        }
        $this->container['shoppingCart'] = $shoppingCart;

        return $this;
    }

    /**
     * Gets paymentResponse
     *
     * @return \PayoneCommercePlatform\Sdk\Domain\CreatePaymentResponse|null
     */
    public function getPaymentResponse()
    {
        return $this->container['paymentResponse'];
    }

    /**
     * Sets paymentResponse
     *
     * @param \PayoneCommercePlatform\Sdk\Domain\CreatePaymentResponse|null $paymentResponse paymentResponse
     *
     * @return self
     */
    public function setPaymentResponse($paymentResponse)
    {
        if (is_null($paymentResponse)) {
            throw new \InvalidArgumentException('non-nullable paymentResponse cannot be null');
        }
        $this->container['paymentResponse'] = $paymentResponse;

        return $this;
    }

    /**
     * Gets errorResponse
     *
     * @return \PayoneCommercePlatform\Sdk\Domain\ErrorResponse|null
     */
    public function getErrorResponse()
    {
        return $this->container['errorResponse'];
    }

    /**
     * Sets errorResponse
     *
     * @param \PayoneCommercePlatform\Sdk\Domain\ErrorResponse|null $errorResponse errorResponse
     *
     * @return self
     */
    public function setErrorResponse($errorResponse)
    {
        if (is_null($errorResponse)) {
            throw new \InvalidArgumentException('non-nullable errorResponse cannot be null');
        }
        $this->container['errorResponse'] = $errorResponse;

        return $this;
    }

    /**
     * Gets amountOfMoney
     *
     * @return \PayoneCommercePlatform\Sdk\Domain\AmountOfMoney|null
     */
    public function getAmountOfMoney()
    {
        return $this->container['amountOfMoney'];
    }

    /**
     * Sets amountOfMoney
     *
     * @param \PayoneCommercePlatform\Sdk\Domain\AmountOfMoney|null $amountOfMoney amountOfMoney
     *
     * @return self
     */
    public function setAmountOfMoney($amountOfMoney)
    {
        if (is_null($amountOfMoney)) {
            throw new \InvalidArgumentException('non-nullable amountOfMoney cannot be null');
        }
        $this->container['amountOfMoney'] = $amountOfMoney;

        return $this;
    }

    /**
     * Gets references
     *
     * @return \PayoneCommercePlatform\Sdk\Domain\CheckoutReferences|null
     */
    public function getReferences()
    {
        return $this->container['references'];
    }

    /**
     * Sets references
     *
     * @param \PayoneCommercePlatform\Sdk\Domain\CheckoutReferences|null $references references
     *
     * @return self
     */
    public function setReferences($references)
    {
        if (is_null($references)) {
            throw new \InvalidArgumentException('non-nullable references cannot be null');
        }
        $this->container['references'] = $references;

        return $this;
    }

    /**
     * Gets shipping
     *
     * @return \PayoneCommercePlatform\Sdk\Domain\Shipping|null
     */
    public function getShipping()
    {
        return $this->container['shipping'];
    }

    /**
     * Sets shipping
     *
     * @param \PayoneCommercePlatform\Sdk\Domain\Shipping|null $shipping shipping
     *
     * @return self
     */
    public function setShipping($shipping)
    {
        if (is_null($shipping)) {
            throw new \InvalidArgumentException('non-nullable shipping cannot be null');
        }
        $this->container['shipping'] = $shipping;

        return $this;
    }

    /**
     * Gets paymentExecution
     *
     * @return \PayoneCommercePlatform\Sdk\Domain\PaymentExecution|null
     */
    public function getPaymentExecution()
    {
        return $this->container['paymentExecution'];
    }

    /**
     * Sets paymentExecution
     *
     * @param \PayoneCommercePlatform\Sdk\Domain\PaymentExecution|null $paymentExecution paymentExecution
     *
     * @return self
     */
    public function setPaymentExecution($paymentExecution)
    {
        if (is_null($paymentExecution)) {
            throw new \InvalidArgumentException('non-nullable paymentExecution cannot be null');
        }
        $this->container['paymentExecution'] = $paymentExecution;

        return $this;
    }

    /**
     * Gets checkoutStatus
     *
     * @return \PayoneCommercePlatform\Sdk\Domain\StatusCheckout|null
     */
    public function getCheckoutStatus()
    {
        return $this->container['checkoutStatus'];
    }

    /**
     * Sets checkoutStatus
     *
     * @param \PayoneCommercePlatform\Sdk\Domain\StatusCheckout|null $checkoutStatus checkoutStatus
     *
     * @return self
     */
    public function setCheckoutStatus($checkoutStatus)
    {
        if (is_null($checkoutStatus)) {
            throw new \InvalidArgumentException('non-nullable checkoutStatus cannot be null');
        }
        $this->container['checkoutStatus'] = $checkoutStatus;

        return $this;
    }

    /**
     * Gets statusOutput
     *
     * @return \PayoneCommercePlatform\Sdk\Domain\StatusOutput|null
     */
    public function getStatusOutput()
    {
        return $this->container['statusOutput'];
    }

    /**
     * Sets statusOutput
     *
     * @param \PayoneCommercePlatform\Sdk\Domain\StatusOutput|null $statusOutput statusOutput
     *
     * @return self
     */
    public function setStatusOutput($statusOutput)
    {
        if (is_null($statusOutput)) {
            throw new \InvalidArgumentException('non-nullable statusOutput cannot be null');
        }
        $this->container['statusOutput'] = $statusOutput;

        return $this;
    }

    /**
     * Gets creationDateTime
     *
     * @return \DateTime|null
     */
    public function getCreationDateTime()
    {
        return $this->container['creationDateTime'];
    }

    /**
     * Sets creationDateTime
     *
     * @param \DateTime|null $creationDateTime Creation date and time of the Checkout in RFC3339 format. It can either be provided in the request or otherwise will be automatically set to the time when the request CreateCommerceCase was received. Response values will always be in UTC time, but when providing this field in the requests, the time offset can have different formats.  Accepted formats are: * YYYY-MM-DD'T'HH:mm:ss'Z' * YYYY-MM-DD'T'HH:mm:ss+XX:XX * YYYY-MM-DD'T'HH:mm:ss-XX:XX * YYYY-MM-DD'T'HH:mm'Z' * YYYY-MM-DD'T'HH:mm+XX:XX * YYYY-MM-DD'T'HH:mm-XX:XX  All other formats may be ignored by the system.
     *
     * @return self
     */
    public function setCreationDateTime($creationDateTime)
    {
        if (is_null($creationDateTime)) {
            throw new \InvalidArgumentException('non-nullable creationDateTime cannot be null');
        }
        $this->container['creationDateTime'] = $creationDateTime;

        return $this;
    }

    /**
     * Gets allowedPaymentActions
     *
     * @return \PayoneCommercePlatform\Sdk\Domain\AllowedPaymentActions[]|null
     */
    public function getAllowedPaymentActions()
    {
        return $this->container['allowedPaymentActions'];
    }

    /**
     * Sets allowedPaymentActions
     *
     * @param \PayoneCommercePlatform\Sdk\Domain\AllowedPaymentActions[]|null $allowedPaymentActions allowedPaymentActions
     *
     * @return self
     */
    public function setAllowedPaymentActions($allowedPaymentActions)
    {
        if (is_null($allowedPaymentActions)) {
            throw new \InvalidArgumentException('non-nullable allowedPaymentActions cannot be null');
        }
        $this->container['allowedPaymentActions'] = $allowedPaymentActions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


