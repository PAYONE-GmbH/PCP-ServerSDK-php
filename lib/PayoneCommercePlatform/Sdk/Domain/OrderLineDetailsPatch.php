<?php
/**
 * OrderLineDetailsPatch
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  PayoneCommercePlatform\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Commerce Platform API
 *
 * RESTful API for the creation of Commerce Cases with Checkouts and the execution of Payments.
 *
 * The version of the OpenAPI document: 1.6.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace PayoneCommercePlatform\Sdk\Domain;

use \ArrayAccess;
use \PayoneCommercePlatform\Sdk\ObjectSerializer;

/**
 * OrderLineDetailsPatch Class Doc Comment
 *
 * @category Class
 * @description Object containing additional information that when supplied can have a beneficial effect on the discountrates.
 * @package  PayoneCommercePlatform\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrderLineDetailsPatch implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OrderLineDetailsPatch';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'status' => '\PayoneCommercePlatform\Sdk\Domain\CartItemOrderStatus[]',
        'productCode' => 'string',
        'productPrice' => 'int',
        'productType' => '\PayoneCommercePlatform\Sdk\Domain\ProductType',
        'quantity' => 'int',
        'taxAmount' => 'int',
        'productUrl' => 'string',
        'productImageUrl' => 'string',
        'productCategoryPath' => 'string',
        'merchantShopDeliveryReference' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'UUID',
        'status' => null,
        'productCode' => null,
        'productPrice' => 'int64',
        'productType' => null,
        'quantity' => 'int64',
        'taxAmount' => 'int64',
        'productUrl' => 'uri',
        'productImageUrl' => 'uri',
        'productCategoryPath' => null,
        'merchantShopDeliveryReference' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'status' => false,
        'productCode' => false,
        'productPrice' => false,
        'productType' => false,
        'quantity' => false,
        'taxAmount' => false,
        'productUrl' => false,
        'productImageUrl' => false,
        'productCategoryPath' => false,
        'merchantShopDeliveryReference' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'status' => 'status',
        'productCode' => 'productCode',
        'productPrice' => 'productPrice',
        'productType' => 'productType',
        'quantity' => 'quantity',
        'taxAmount' => 'taxAmount',
        'productUrl' => 'productUrl',
        'productImageUrl' => 'productImageUrl',
        'productCategoryPath' => 'productCategoryPath',
        'merchantShopDeliveryReference' => 'merchantShopDeliveryReference'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'status' => 'setStatus',
        'productCode' => 'setProductCode',
        'productPrice' => 'setProductPrice',
        'productType' => 'setProductType',
        'quantity' => 'setQuantity',
        'taxAmount' => 'setTaxAmount',
        'productUrl' => 'setProductUrl',
        'productImageUrl' => 'setProductImageUrl',
        'productCategoryPath' => 'setProductCategoryPath',
        'merchantShopDeliveryReference' => 'setMerchantShopDeliveryReference'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'status' => 'getStatus',
        'productCode' => 'getProductCode',
        'productPrice' => 'getProductPrice',
        'productType' => 'getProductType',
        'quantity' => 'getQuantity',
        'taxAmount' => 'getTaxAmount',
        'productUrl' => 'getProductUrl',
        'productImageUrl' => 'getProductImageUrl',
        'productCategoryPath' => 'getProductCategoryPath',
        'merchantShopDeliveryReference' => 'getMerchantShopDeliveryReference'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('productCode', $data ?? [], null);
        $this->setIfExists('productPrice', $data ?? [], null);
        $this->setIfExists('productType', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('taxAmount', $data ?? [], null);
        $this->setIfExists('productUrl', $data ?? [], null);
        $this->setIfExists('productImageUrl', $data ?? [], null);
        $this->setIfExists('productCategoryPath', $data ?? [], null);
        $this->setIfExists('merchantShopDeliveryReference', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['productPrice'] === null) {
            $invalidProperties[] = "'productPrice' can't be null";
        }
        if (($this->container['productPrice'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'productPrice', must be smaller than or equal to 2147483647.";
        }

        if (($this->container['productPrice'] < 0)) {
            $invalidProperties[] = "invalid value for 'productPrice', must be bigger than or equal to 0.";
        }

        if ($this->container['quantity'] === null) {
            $invalidProperties[] = "'quantity' can't be null";
        }
        if (($this->container['quantity'] > 9999)) {
            $invalidProperties[] = "invalid value for 'quantity', must be smaller than or equal to 9999.";
        }

        if (($this->container['quantity'] < 0)) {
            $invalidProperties[] = "invalid value for 'quantity', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['taxAmount']) && ($this->container['taxAmount'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'taxAmount', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['taxAmount']) && ($this->container['taxAmount'] < 0)) {
            $invalidProperties[] = "invalid value for 'taxAmount', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['productUrl']) && (mb_strlen($this->container['productUrl']) > 2048)) {
            $invalidProperties[] = "invalid value for 'productUrl', the character length must be smaller than or equal to 2048.";
        }

        if (!is_null($this->container['productImageUrl']) && (mb_strlen($this->container['productImageUrl']) > 2048)) {
            $invalidProperties[] = "invalid value for 'productImageUrl', the character length must be smaller than or equal to 2048.";
        }

        if (!is_null($this->container['productCategoryPath']) && (mb_strlen($this->container['productCategoryPath']) > 2048)) {
            $invalidProperties[] = "invalid value for 'productCategoryPath', the character length must be smaller than or equal to 2048.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Unique identifier of a cart item
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \PayoneCommercePlatform\Sdk\Domain\CartItemOrderStatus[]|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \PayoneCommercePlatform\Sdk\Domain\CartItemOrderStatus[]|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets productCode
     *
     * @return string|null
     */
    public function getProductCode()
    {
        return $this->container['productCode'];
    }

    /**
     * Sets productCode
     *
     * @param string|null $productCode Product or UPC Code
     *
     * @return self
     */
    public function setProductCode($productCode)
    {
        if (is_null($productCode)) {
            throw new \InvalidArgumentException('non-nullable productCode cannot be null');
        }
        $this->container['productCode'] = $productCode;

        return $this;
    }

    /**
     * Gets productPrice
     *
     * @return int
     */
    public function getProductPrice()
    {
        return $this->container['productPrice'];
    }

    /**
     * Sets productPrice
     *
     * @param int $productPrice The price of one unit of the product, the value should be zero or greater.
     *
     * @return self
     */
    public function setProductPrice($productPrice)
    {
        if (is_null($productPrice)) {
            throw new \InvalidArgumentException('non-nullable productPrice cannot be null');
        }

        if (($productPrice > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $productPrice when calling OrderLineDetailsPatch., must be smaller than or equal to 2147483647.');
        }
        if (($productPrice < 0)) {
            throw new \InvalidArgumentException('invalid value for $productPrice when calling OrderLineDetailsPatch., must be bigger than or equal to 0.');
        }

        $this->container['productPrice'] = $productPrice;

        return $this;
    }

    /**
     * Gets productType
     *
     * @return \PayoneCommercePlatform\Sdk\Domain\ProductType|null
     */
    public function getProductType()
    {
        return $this->container['productType'];
    }

    /**
     * Sets productType
     *
     * @param \PayoneCommercePlatform\Sdk\Domain\ProductType|null $productType productType
     *
     * @return self
     */
    public function setProductType($productType)
    {
        if (is_null($productType)) {
            throw new \InvalidArgumentException('non-nullable productType cannot be null');
        }
        $this->container['productType'] = $productType;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int $quantity Quantity of the units being purchased, should be greater than zero Note: Must not be all spaces or all zeros
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }

        if (($quantity > 9999)) {
            throw new \InvalidArgumentException('invalid value for $quantity when calling OrderLineDetailsPatch., must be smaller than or equal to 9999.');
        }
        if (($quantity < 0)) {
            throw new \InvalidArgumentException('invalid value for $quantity when calling OrderLineDetailsPatch., must be bigger than or equal to 0.');
        }

        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets taxAmount
     *
     * @return int|null
     */
    public function getTaxAmount()
    {
        return $this->container['taxAmount'];
    }

    /**
     * Sets taxAmount
     *
     * @param int|null $taxAmount Tax on the line item, with the last two digits implied as decimal places
     *
     * @return self
     */
    public function setTaxAmount($taxAmount)
    {
        if (is_null($taxAmount)) {
            throw new \InvalidArgumentException('non-nullable taxAmount cannot be null');
        }

        if (($taxAmount > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $taxAmount when calling OrderLineDetailsPatch., must be smaller than or equal to 2147483647.');
        }
        if (($taxAmount < 0)) {
            throw new \InvalidArgumentException('invalid value for $taxAmount when calling OrderLineDetailsPatch., must be bigger than or equal to 0.');
        }

        $this->container['taxAmount'] = $taxAmount;

        return $this;
    }

    /**
     * Gets productUrl
     *
     * @return string|null
     */
    public function getProductUrl()
    {
        return $this->container['productUrl'];
    }

    /**
     * Sets productUrl
     *
     * @param string|null $productUrl URL of the product in shop.   Used for PAYONE Buy Now, Pay Later (BNPL).
     *
     * @return self
     */
    public function setProductUrl($productUrl)
    {
        if (is_null($productUrl)) {
            throw new \InvalidArgumentException('non-nullable productUrl cannot be null');
        }
        if ((mb_strlen($productUrl) > 2048)) {
            throw new \InvalidArgumentException('invalid length for $productUrl when calling OrderLineDetailsPatch., must be smaller than or equal to 2048.');
        }

        $this->container['productUrl'] = $productUrl;

        return $this;
    }

    /**
     * Gets productImageUrl
     *
     * @return string|null
     */
    public function getProductImageUrl()
    {
        return $this->container['productImageUrl'];
    }

    /**
     * Sets productImageUrl
     *
     * @param string|null $productImageUrl URL of a product image.   Used for PAYONE Buy Now, Pay Later (BNPL).
     *
     * @return self
     */
    public function setProductImageUrl($productImageUrl)
    {
        if (is_null($productImageUrl)) {
            throw new \InvalidArgumentException('non-nullable productImageUrl cannot be null');
        }
        if ((mb_strlen($productImageUrl) > 2048)) {
            throw new \InvalidArgumentException('invalid length for $productImageUrl when calling OrderLineDetailsPatch., must be smaller than or equal to 2048.');
        }

        $this->container['productImageUrl'] = $productImageUrl;

        return $this;
    }

    /**
     * Gets productCategoryPath
     *
     * @return string|null
     */
    public function getProductCategoryPath()
    {
        return $this->container['productCategoryPath'];
    }

    /**
     * Sets productCategoryPath
     *
     * @param string|null $productCategoryPath Category path of the item.   Used for PAYONE Buy Now, Pay Later (BNPL).
     *
     * @return self
     */
    public function setProductCategoryPath($productCategoryPath)
    {
        if (is_null($productCategoryPath)) {
            throw new \InvalidArgumentException('non-nullable productCategoryPath cannot be null');
        }
        if ((mb_strlen($productCategoryPath) > 2048)) {
            throw new \InvalidArgumentException('invalid length for $productCategoryPath when calling OrderLineDetailsPatch., must be smaller than or equal to 2048.');
        }

        $this->container['productCategoryPath'] = $productCategoryPath;

        return $this;
    }

    /**
     * Gets merchantShopDeliveryReference
     *
     * @return string|null
     */
    public function getMerchantShopDeliveryReference()
    {
        return $this->container['merchantShopDeliveryReference'];
    }

    /**
     * Sets merchantShopDeliveryReference
     *
     * @param string|null $merchantShopDeliveryReference Optional parameter to define the delivery shop or touchpoint where an item has been collected (e.g. for Click & Collect or Click & Reserve).
     *
     * @return self
     */
    public function setMerchantShopDeliveryReference($merchantShopDeliveryReference)
    {
        if (is_null($merchantShopDeliveryReference)) {
            throw new \InvalidArgumentException('non-nullable merchantShopDeliveryReference cannot be null');
        }
        $this->container['merchantShopDeliveryReference'] = $merchantShopDeliveryReference;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


