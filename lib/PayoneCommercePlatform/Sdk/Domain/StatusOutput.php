<?php
/**
 * StatusOutput
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  PayoneCommercePlatform\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Commerce Platform API
 *
 * RESTful API for the creation of Commerce Cases with Checkouts and the execution of Payments.
 *
 * The version of the OpenAPI document: 1.6.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace PayoneCommercePlatform\Sdk\Domain;

use ArrayAccess;
use PayoneCommercePlatform\Sdk\ObjectSerializer;

/**
 * StatusOutput Class Doc Comment
 *
 * @category Class
 * @description Contains information about whether the payment of the Checkout has already been completed and how much of the total sum has been collected already.
 * @package  PayoneCommercePlatform\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class StatusOutput implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'StatusOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'paymentStatus' => 'string',
        'isModifiable' => 'bool',
        'openAmount' => 'int',
        'collectedAmount' => 'int',
        'cancelledAmount' => 'int',
        'refundedAmount' => 'int',
        'chargebackAmount' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'paymentStatus' => null,
        'isModifiable' => null,
        'openAmount' => 'int64',
        'collectedAmount' => 'int64',
        'cancelledAmount' => 'int64',
        'refundedAmount' => 'int64',
        'chargebackAmount' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'paymentStatus' => false,
        'isModifiable' => false,
        'openAmount' => false,
        'collectedAmount' => false,
        'cancelledAmount' => false,
        'refundedAmount' => false,
        'chargebackAmount' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'paymentStatus' => 'paymentStatus',
        'isModifiable' => 'isModifiable',
        'openAmount' => 'openAmount',
        'collectedAmount' => 'collectedAmount',
        'cancelledAmount' => 'cancelledAmount',
        'refundedAmount' => 'refundedAmount',
        'chargebackAmount' => 'chargebackAmount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'paymentStatus' => 'setPaymentStatus',
        'isModifiable' => 'setIsModifiable',
        'openAmount' => 'setOpenAmount',
        'collectedAmount' => 'setCollectedAmount',
        'cancelledAmount' => 'setCancelledAmount',
        'refundedAmount' => 'setRefundedAmount',
        'chargebackAmount' => 'setChargebackAmount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'paymentStatus' => 'getPaymentStatus',
        'isModifiable' => 'getIsModifiable',
        'openAmount' => 'getOpenAmount',
        'collectedAmount' => 'getCollectedAmount',
        'cancelledAmount' => 'getCancelledAmount',
        'refundedAmount' => 'getRefundedAmount',
        'chargebackAmount' => 'getChargebackAmount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const PAYMENT_STATUS_WAITING_FOR_PAYMENT = 'WAITING_FOR_PAYMENT';
    public const PAYMENT_STATUS_PAYMENT_NOT_COMPLETED = 'PAYMENT_NOT_COMPLETED';
    public const PAYMENT_STATUS_PAYMENT_COMPLETED = 'PAYMENT_COMPLETED';
    public const PAYMENT_STATUS_NO_PAYMENT = 'NO_PAYMENT';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentStatusAllowableValues()
    {
        return [
            self::PAYMENT_STATUS_WAITING_FOR_PAYMENT,
            self::PAYMENT_STATUS_PAYMENT_NOT_COMPLETED,
            self::PAYMENT_STATUS_PAYMENT_COMPLETED,
            self::PAYMENT_STATUS_NO_PAYMENT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('paymentStatus', $data ?? [], null);
        $this->setIfExists('isModifiable', $data ?? [], null);
        $this->setIfExists('openAmount', $data ?? [], null);
        $this->setIfExists('collectedAmount', $data ?? [], null);
        $this->setIfExists('cancelledAmount', $data ?? [], null);
        $this->setIfExists('refundedAmount', $data ?? [], null);
        $this->setIfExists('chargebackAmount', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPaymentStatusAllowableValues();
        if (!is_null($this->container['paymentStatus']) && !in_array($this->container['paymentStatus'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'paymentStatus', must be one of '%s'",
                $this->container['paymentStatus'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['openAmount']) && ($this->container['openAmount'] > 999999999999)) {
            $invalidProperties[] = "invalid value for 'openAmount', must be smaller than or equal to 999999999999.";
        }

        if (!is_null($this->container['openAmount']) && ($this->container['openAmount'] < 0)) {
            $invalidProperties[] = "invalid value for 'openAmount', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['collectedAmount']) && ($this->container['collectedAmount'] > 999999999999)) {
            $invalidProperties[] = "invalid value for 'collectedAmount', must be smaller than or equal to 999999999999.";
        }

        if (!is_null($this->container['collectedAmount']) && ($this->container['collectedAmount'] < 0)) {
            $invalidProperties[] = "invalid value for 'collectedAmount', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['cancelledAmount']) && ($this->container['cancelledAmount'] > 999999999999)) {
            $invalidProperties[] = "invalid value for 'cancelledAmount', must be smaller than or equal to 999999999999.";
        }

        if (!is_null($this->container['cancelledAmount']) && ($this->container['cancelledAmount'] < 0)) {
            $invalidProperties[] = "invalid value for 'cancelledAmount', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['refundedAmount']) && ($this->container['refundedAmount'] > 999999999999)) {
            $invalidProperties[] = "invalid value for 'refundedAmount', must be smaller than or equal to 999999999999.";
        }

        if (!is_null($this->container['refundedAmount']) && ($this->container['refundedAmount'] < 0)) {
            $invalidProperties[] = "invalid value for 'refundedAmount', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['chargebackAmount']) && ($this->container['chargebackAmount'] > 999999999999)) {
            $invalidProperties[] = "invalid value for 'chargebackAmount', must be smaller than or equal to 999999999999.";
        }

        if (!is_null($this->container['chargebackAmount']) && ($this->container['chargebackAmount'] < 0)) {
            $invalidProperties[] = "invalid value for 'chargebackAmount', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets paymentStatus
     *
     * @return string|null
     */
    public function getPaymentStatus()
    {
        return $this->container['paymentStatus'];
    }

    /**
     * Sets paymentStatus
     *
     * @param string|null $paymentStatus * WAITING_FOR_PAYMENT - There does not yet exist a PaymentExecution nor a PaymentInformation for this Checkout. * PAYMENT_NOT_COMPLETED - There exists a PaymentExecution or a PaymentInformation for this Checkout, but all or some part of the total amount is still unpaid. * PAYMENT_COMPLETED - There exists a PaymentExecution or a PaymentInformation for this Checkout and the total amount is fully paid. * NO_PAYMENT - Checkout was created and deleted. No Payment Execution and no other actions can be triggered on the Checkout.
     *
     * @return self
     */
    public function setPaymentStatus($paymentStatus)
    {
        if (is_null($paymentStatus)) {
            throw new \InvalidArgumentException('non-nullable paymentStatus cannot be null');
        }
        $allowedValues = $this->getPaymentStatusAllowableValues();
        if (!in_array($paymentStatus, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'paymentStatus', must be one of '%s'",
                    $paymentStatus,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['paymentStatus'] = $paymentStatus;

        return $this;
    }

    /**
     * Gets isModifiable
     *
     * @return bool|null
     */
    public function getIsModifiable()
    {
        return $this->container['isModifiable'];
    }

    /**
     * Sets isModifiable
     *
     * @param bool|null $isModifiable Indicates whether the Checkout can still be modified. False if any payment is already in progress, true otherwise.
     *
     * @return self
     */
    public function setIsModifiable($isModifiable)
    {
        if (is_null($isModifiable)) {
            throw new \InvalidArgumentException('non-nullable isModifiable cannot be null');
        }
        $this->container['isModifiable'] = $isModifiable;

        return $this;
    }

    /**
     * Gets openAmount
     *
     * @return int|null
     */
    public function getOpenAmount()
    {
        return $this->container['openAmount'];
    }

    /**
     * Sets openAmount
     *
     * @param int|null $openAmount Amount in cents always having 2 decimals. The amount yet to be paid.
     *
     * @return self
     */
    public function setOpenAmount($openAmount)
    {
        if (is_null($openAmount)) {
            throw new \InvalidArgumentException('non-nullable openAmount cannot be null');
        }

        if (($openAmount > 999999999999)) {
            throw new \InvalidArgumentException('invalid value for $openAmount when calling StatusOutput., must be smaller than or equal to 999999999999.');
        }
        if (($openAmount < 0)) {
            throw new \InvalidArgumentException('invalid value for $openAmount when calling StatusOutput., must be bigger than or equal to 0.');
        }

        $this->container['openAmount'] = $openAmount;

        return $this;
    }

    /**
     * Gets collectedAmount
     *
     * @return int|null
     */
    public function getCollectedAmount()
    {
        return $this->container['collectedAmount'];
    }

    /**
     * Sets collectedAmount
     *
     * @param int|null $collectedAmount Amount in cents always having 2 decimals. The amount that has already been collected.
     *
     * @return self
     */
    public function setCollectedAmount($collectedAmount)
    {
        if (is_null($collectedAmount)) {
            throw new \InvalidArgumentException('non-nullable collectedAmount cannot be null');
        }

        if (($collectedAmount > 999999999999)) {
            throw new \InvalidArgumentException('invalid value for $collectedAmount when calling StatusOutput., must be smaller than or equal to 999999999999.');
        }
        if (($collectedAmount < 0)) {
            throw new \InvalidArgumentException('invalid value for $collectedAmount when calling StatusOutput., must be bigger than or equal to 0.');
        }

        $this->container['collectedAmount'] = $collectedAmount;

        return $this;
    }

    /**
     * Gets cancelledAmount
     *
     * @return int|null
     */
    public function getCancelledAmount()
    {
        return $this->container['cancelledAmount'];
    }

    /**
     * Sets cancelledAmount
     *
     * @param int|null $cancelledAmount Amount in cents always having 2 decimals. The amount that has already been cancelled.
     *
     * @return self
     */
    public function setCancelledAmount($cancelledAmount)
    {
        if (is_null($cancelledAmount)) {
            throw new \InvalidArgumentException('non-nullable cancelledAmount cannot be null');
        }

        if (($cancelledAmount > 999999999999)) {
            throw new \InvalidArgumentException('invalid value for $cancelledAmount when calling StatusOutput., must be smaller than or equal to 999999999999.');
        }
        if (($cancelledAmount < 0)) {
            throw new \InvalidArgumentException('invalid value for $cancelledAmount when calling StatusOutput., must be bigger than or equal to 0.');
        }

        $this->container['cancelledAmount'] = $cancelledAmount;

        return $this;
    }

    /**
     * Gets refundedAmount
     *
     * @return int|null
     */
    public function getRefundedAmount()
    {
        return $this->container['refundedAmount'];
    }

    /**
     * Sets refundedAmount
     *
     * @param int|null $refundedAmount Amount in cents always having 2 decimals. Amount that has been collected but was refunded to the customer.
     *
     * @return self
     */
    public function setRefundedAmount($refundedAmount)
    {
        if (is_null($refundedAmount)) {
            throw new \InvalidArgumentException('non-nullable refundedAmount cannot be null');
        }

        if (($refundedAmount > 999999999999)) {
            throw new \InvalidArgumentException('invalid value for $refundedAmount when calling StatusOutput., must be smaller than or equal to 999999999999.');
        }
        if (($refundedAmount < 0)) {
            throw new \InvalidArgumentException('invalid value for $refundedAmount when calling StatusOutput., must be bigger than or equal to 0.');
        }

        $this->container['refundedAmount'] = $refundedAmount;

        return $this;
    }

    /**
     * Gets chargebackAmount
     *
     * @return int|null
     */
    public function getChargebackAmount()
    {
        return $this->container['chargebackAmount'];
    }

    /**
     * Sets chargebackAmount
     *
     * @param int|null $chargebackAmount Amount in cents always having 2 decimals. Amount that has been collected but was chargebacked by the customer.
     *
     * @return self
     */
    public function setChargebackAmount($chargebackAmount)
    {
        if (is_null($chargebackAmount)) {
            throw new \InvalidArgumentException('non-nullable chargebackAmount cannot be null');
        }

        if (($chargebackAmount > 999999999999)) {
            throw new \InvalidArgumentException('invalid value for $chargebackAmount when calling StatusOutput., must be smaller than or equal to 999999999999.');
        }
        if (($chargebackAmount < 0)) {
            throw new \InvalidArgumentException('invalid value for $chargebackAmount when calling StatusOutput., must be bigger than or equal to 0.');
        }

        $this->container['chargebackAmount'] = $chargebackAmount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
