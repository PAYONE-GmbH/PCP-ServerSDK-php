<?php
/**
 * PaymentInformationRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  PayoneCommercePlatform\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Commerce Platform API
 *
 * RESTful API for the creation of Commerce Cases with Checkouts and the execution of Payments.
 *
 * The version of the OpenAPI document: 1.6.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace PayoneCommercePlatform\Sdk\Domain;

use ArrayAccess;
use PayoneCommercePlatform\Sdk\ObjectSerializer;

// { "hello": { "world": true }, "version": 14, "url": null }
$helper = [
  'hello' => [
    'world' => true,
  ],
  'version' => 14,
  'url' => null
];

/**
 * PaymentInformationRequest Class Doc Comment
 *
 * @category Class
 * @package  PayoneCommercePlatform\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PaymentInformationRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PaymentInformationRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'amountOfMoney' => '\PayoneCommercePlatform\Sdk\Domain\AmountOfMoney',
        'type' => '\PayoneCommercePlatform\Sdk\Domain\PaymentType',
        'paymentChannel' => '\PayoneCommercePlatform\Sdk\Domain\PaymentChannel',
        'paymentProductId' => 'int',
        'merchantReference' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'amountOfMoney' => null,
        'type' => null,
        'paymentChannel' => null,
        'paymentProductId' => 'int32',
        'merchantReference' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'amountOfMoney' => false,
        'type' => false,
        'paymentChannel' => false,
        'paymentProductId' => false,
        'merchantReference' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amountOfMoney' => 'amountOfMoney',
        'type' => 'type',
        'paymentChannel' => 'paymentChannel',
        'paymentProductId' => 'paymentProductId',
        'merchantReference' => 'merchantReference'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amountOfMoney' => 'setAmountOfMoney',
        'type' => 'setType',
        'paymentChannel' => 'setPaymentChannel',
        'paymentProductId' => 'setPaymentProductId',
        'merchantReference' => 'setMerchantReference'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amountOfMoney' => 'getAmountOfMoney',
        'type' => 'getType',
        'paymentChannel' => 'getPaymentChannel',
        'paymentProductId' => 'getPaymentProductId',
        'merchantReference' => 'getMerchantReference'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('amountOfMoney', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('paymentChannel', $data ?? [], null);
        $this->setIfExists('paymentProductId', $data ?? [], null);
        $this->setIfExists('merchantReference', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['amountOfMoney'] === null) {
            $invalidProperties[] = "'amountOfMoney' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['paymentChannel'] === null) {
            $invalidProperties[] = "'paymentChannel' can't be null";
        }
        if ($this->container['paymentProductId'] === null) {
            $invalidProperties[] = "'paymentProductId' can't be null";
        }
        if (($this->container['paymentProductId'] > 99999)) {
            $invalidProperties[] = "invalid value for 'paymentProductId', must be smaller than or equal to 99999.";
        }

        if (($this->container['paymentProductId'] < 0)) {
            $invalidProperties[] = "invalid value for 'paymentProductId', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['merchantReference']) && (mb_strlen($this->container['merchantReference']) > 40)) {
            $invalidProperties[] = "invalid value for 'merchantReference', the character length must be smaller than or equal to 40.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amountOfMoney
     *
     * @return \PayoneCommercePlatform\Sdk\Domain\AmountOfMoney
     */
    public function getAmountOfMoney()
    {
        return $this->container['amountOfMoney'];
    }

    /**
     * Sets amountOfMoney
     *
     * @param \PayoneCommercePlatform\Sdk\Domain\AmountOfMoney $amountOfMoney amountOfMoney
     *
     * @return self
     */
    public function setAmountOfMoney($amountOfMoney)
    {
        if (is_null($amountOfMoney)) {
            throw new \InvalidArgumentException('non-nullable amountOfMoney cannot be null');
        }
        $this->container['amountOfMoney'] = $amountOfMoney;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \PayoneCommercePlatform\Sdk\Domain\PaymentType
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \PayoneCommercePlatform\Sdk\Domain\PaymentType $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets paymentChannel
     *
     * @return \PayoneCommercePlatform\Sdk\Domain\PaymentChannel
     */
    public function getPaymentChannel()
    {
        return $this->container['paymentChannel'];
    }

    /**
     * Sets paymentChannel
     *
     * @param \PayoneCommercePlatform\Sdk\Domain\PaymentChannel $paymentChannel paymentChannel
     *
     * @return self
     */
    public function setPaymentChannel($paymentChannel)
    {
        if (is_null($paymentChannel)) {
            throw new \InvalidArgumentException('non-nullable paymentChannel cannot be null');
        }
        $this->container['paymentChannel'] = $paymentChannel;

        return $this;
    }

    /**
     * Gets paymentProductId
     *
     * @return int
     */
    public function getPaymentProductId()
    {
        return $this->container['paymentProductId'];
    }

    /**
     * Sets paymentProductId
     *
     * @param int $paymentProductId Payment method identifier - please check the product documentation for a full overview of possible values.
     *
     * @return self
     */
    public function setPaymentProductId($paymentProductId)
    {
        if (is_null($paymentProductId)) {
            throw new \InvalidArgumentException('non-nullable paymentProductId cannot be null');
        }

        if (($paymentProductId > 99999)) {
            throw new \InvalidArgumentException('invalid value for $paymentProductId when calling PaymentInformationRequest., must be smaller than or equal to 99999.');
        }
        if (($paymentProductId < 0)) {
            throw new \InvalidArgumentException('invalid value for $paymentProductId when calling PaymentInformationRequest., must be bigger than or equal to 0.');
        }

        $this->container['paymentProductId'] = $paymentProductId;

        return $this;
    }

    /**
     * Gets merchantReference
     *
     * @return string|null
     */
    public function getMerchantReference()
    {
        return $this->container['merchantReference'];
    }

    /**
     * Sets merchantReference
     *
     * @param string|null $merchantReference Unique reference of the PaymentInformation. In case of card present transactions, the reference from the ECR or terminal will be used. It is always the reference for external transactions. (e.g. card present payments, cash payments or payments processed by other payment providers).
     *
     * @return self
     */
    public function setMerchantReference($merchantReference)
    {
        if (is_null($merchantReference)) {
            throw new \InvalidArgumentException('non-nullable merchantReference cannot be null');
        }
        if ((mb_strlen($merchantReference) > 40)) {
            throw new \InvalidArgumentException('invalid length for $merchantReference when calling PaymentInformationRequest., must be smaller than or equal to 40.');
        }

        $this->container['merchantReference'] = $merchantReference;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
