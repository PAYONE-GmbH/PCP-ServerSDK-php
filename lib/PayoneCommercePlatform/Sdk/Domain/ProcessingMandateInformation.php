<?php
/**
 * ProcessingMandateInformation
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  PayoneCommercePlatform\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Commerce Platform API
 *
 * RESTful API for the creation of Commerce Cases with Checkouts and the execution of Payments.
 *
 * The version of the OpenAPI document: 1.6.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace PayoneCommercePlatform\Sdk\Domain;

use ArrayAccess;
use PayoneCommercePlatform\Sdk\ObjectSerializer;

/**
 * ProcessingMandateInformation Class Doc Comment
 *
 * @category Class
 * @description Object containing the relevant information of a SEPA Direct Debit mandate for processing (mandatory fields in pain.008). Renamed from CreateMandateWithReturnUrl to ProcessingMandateInformation.
 * @package  PayoneCommercePlatform\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ProcessingMandateInformation implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ProcessingMandateInformation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'bankAccountIban' => '\PayoneCommercePlatform\Sdk\Domain\BankAccountInformation',
        'recurrenceType' => '\PayoneCommercePlatform\Sdk\Domain\MandateRecurrenceType',
        'uniqueMandateReference' => 'string',
        'dateOfSignature' => 'string',
        'creditorId' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'bankAccountIban' => null,
        'recurrenceType' => null,
        'uniqueMandateReference' => null,
        'dateOfSignature' => null,
        'creditorId' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'bankAccountIban' => false,
        'recurrenceType' => false,
        'uniqueMandateReference' => false,
        'dateOfSignature' => false,
        'creditorId' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bankAccountIban' => 'bankAccountIban',
        'recurrenceType' => 'recurrenceType',
        'uniqueMandateReference' => 'uniqueMandateReference',
        'dateOfSignature' => 'dateOfSignature',
        'creditorId' => 'creditorId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bankAccountIban' => 'setBankAccountIban',
        'recurrenceType' => 'setRecurrenceType',
        'uniqueMandateReference' => 'setUniqueMandateReference',
        'dateOfSignature' => 'setDateOfSignature',
        'creditorId' => 'setCreditorId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bankAccountIban' => 'getBankAccountIban',
        'recurrenceType' => 'getRecurrenceType',
        'uniqueMandateReference' => 'getUniqueMandateReference',
        'dateOfSignature' => 'getDateOfSignature',
        'creditorId' => 'getCreditorId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('bankAccountIban', $data ?? [], null);
        $this->setIfExists('recurrenceType', $data ?? [], null);
        $this->setIfExists('uniqueMandateReference', $data ?? [], null);
        $this->setIfExists('dateOfSignature', $data ?? [], null);
        $this->setIfExists('creditorId', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['bankAccountIban'] === null) {
            $invalidProperties[] = "'bankAccountIban' can't be null";
        }
        if ($this->container['recurrenceType'] === null) {
            $invalidProperties[] = "'recurrenceType' can't be null";
        }
        if ($this->container['uniqueMandateReference'] === null) {
            $invalidProperties[] = "'uniqueMandateReference' can't be null";
        }
        if ((mb_strlen($this->container['uniqueMandateReference']) > 35)) {
            $invalidProperties[] = "invalid value for 'uniqueMandateReference', the character length must be smaller than or equal to 35.";
        }

        if (!preg_match("/^[A-Za-z0-9\\+\\-\\.()]{1,35}$/", $this->container['uniqueMandateReference'])) {
            $invalidProperties[] = "invalid value for 'uniqueMandateReference', must be conform to the pattern /^[A-Za-z0-9\\+\\-\\.()]{1,35}$/.";
        }

        if ($this->container['dateOfSignature'] === null) {
            $invalidProperties[] = "'dateOfSignature' can't be null";
        }
        if ((mb_strlen($this->container['dateOfSignature']) > 8)) {
            $invalidProperties[] = "invalid value for 'dateOfSignature', the character length must be smaller than or equal to 8.";
        }

        if (!preg_match("/^((19|20|21)\\d{6})?$/", $this->container['dateOfSignature'])) {
            $invalidProperties[] = "invalid value for 'dateOfSignature', must be conform to the pattern /^((19|20|21)\\d{6})?$/.";
        }

        if ($this->container['creditorId'] === null) {
            $invalidProperties[] = "'creditorId' can't be null";
        }
        if ((mb_strlen($this->container['creditorId']) > 31)) {
            $invalidProperties[] = "invalid value for 'creditorId', the character length must be smaller than or equal to 31.";
        }

        if (!preg_match("/^[A-Z]{2}[0-9]{2}[a-zA-Z0-9\\+\\?\/\\-:\\(\\)\\.,\\']{1,31}$/", $this->container['creditorId'])) {
            $invalidProperties[] = "invalid value for 'creditorId', must be conform to the pattern /^[A-Z]{2}[0-9]{2}[a-zA-Z0-9\\+\\?\/\\-:\\(\\)\\.,\\']{1,31}$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bankAccountIban
     *
     * @return \PayoneCommercePlatform\Sdk\Domain\BankAccountInformation
     */
    public function getBankAccountIban()
    {
        return $this->container['bankAccountIban'];
    }

    /**
     * Sets bankAccountIban
     *
     * @param \PayoneCommercePlatform\Sdk\Domain\BankAccountInformation $bankAccountIban bankAccountIban
     *
     * @return self
     */
    public function setBankAccountIban($bankAccountIban)
    {
        if (is_null($bankAccountIban)) {
            throw new \InvalidArgumentException('non-nullable bankAccountIban cannot be null');
        }
        $this->container['bankAccountIban'] = $bankAccountIban;

        return $this;
    }

    /**
     * Gets recurrenceType
     *
     * @return \PayoneCommercePlatform\Sdk\Domain\MandateRecurrenceType
     */
    public function getRecurrenceType()
    {
        return $this->container['recurrenceType'];
    }

    /**
     * Sets recurrenceType
     *
     * @param \PayoneCommercePlatform\Sdk\Domain\MandateRecurrenceType $recurrenceType recurrenceType
     *
     * @return self
     */
    public function setRecurrenceType($recurrenceType)
    {
        if (is_null($recurrenceType)) {
            throw new \InvalidArgumentException('non-nullable recurrenceType cannot be null');
        }
        $this->container['recurrenceType'] = $recurrenceType;

        return $this;
    }

    /**
     * Gets uniqueMandateReference
     *
     * @return string
     */
    public function getUniqueMandateReference()
    {
        return $this->container['uniqueMandateReference'];
    }

    /**
     * Sets uniqueMandateReference
     *
     * @param string $uniqueMandateReference The unique identifier of the mandate
     *
     * @return self
     */
    public function setUniqueMandateReference($uniqueMandateReference)
    {
        if (is_null($uniqueMandateReference)) {
            throw new \InvalidArgumentException('non-nullable uniqueMandateReference cannot be null');
        }
        if ((mb_strlen($uniqueMandateReference) > 35)) {
            throw new \InvalidArgumentException('invalid length for $uniqueMandateReference when calling ProcessingMandateInformation., must be smaller than or equal to 35.');
        }
        if ((!preg_match("/^[A-Za-z0-9\\+\\-\\.()]{1,35}$/", ObjectSerializer::toString($uniqueMandateReference)))) {
            throw new \InvalidArgumentException("invalid value for \$uniqueMandateReference when calling ProcessingMandateInformation., must conform to the pattern /^[A-Za-z0-9\\+\\-\\.()]{1,35}$/.");
        }

        $this->container['uniqueMandateReference'] = $uniqueMandateReference;

        return $this;
    }

    /**
     * Gets dateOfSignature
     *
     * @return string
     */
    public function getDateOfSignature()
    {
        return $this->container['dateOfSignature'];
    }

    /**
     * Sets dateOfSignature
     *
     * @param string $dateOfSignature The date of signature of the mandate. Format YYYYMMDD
     *
     * @return self
     */
    public function setDateOfSignature($dateOfSignature)
    {
        if (is_null($dateOfSignature)) {
            throw new \InvalidArgumentException('non-nullable dateOfSignature cannot be null');
        }
        if ((mb_strlen($dateOfSignature) > 8)) {
            throw new \InvalidArgumentException('invalid length for $dateOfSignature when calling ProcessingMandateInformation., must be smaller than or equal to 8.');
        }
        if ((!preg_match("/^((19|20|21)\\d{6})?$/", ObjectSerializer::toString($dateOfSignature)))) {
            throw new \InvalidArgumentException("invalid value for \$dateOfSignature when calling ProcessingMandateInformation., must conform to the pattern /^((19|20|21)\\d{6})?$/.");
        }

        $this->container['dateOfSignature'] = $dateOfSignature;

        return $this;
    }

    /**
     * Gets creditorId
     *
     * @return string
     */
    public function getCreditorId()
    {
        return $this->container['creditorId'];
    }

    /**
     * Sets creditorId
     *
     * @param string $creditorId Your unique creditor identifier.
     *
     * @return self
     */
    public function setCreditorId($creditorId)
    {
        if (is_null($creditorId)) {
            throw new \InvalidArgumentException('non-nullable creditorId cannot be null');
        }
        if ((mb_strlen($creditorId) > 31)) {
            throw new \InvalidArgumentException('invalid length for $creditorId when calling ProcessingMandateInformation., must be smaller than or equal to 31.');
        }
        if ((!preg_match("/^[A-Z]{2}[0-9]{2}[a-zA-Z0-9\\+\\?\/\\-:\\(\\)\\.,\\']{1,31}$/", ObjectSerializer::toString($creditorId)))) {
            throw new \InvalidArgumentException("invalid value for \$creditorId when calling ProcessingMandateInformation., must conform to the pattern /^[A-Z]{2}[0-9]{2}[a-zA-Z0-9\\+\\?\/\\-:\\(\\)\\.,\\']{1,31}$/.");
        }

        $this->container['creditorId'] = $creditorId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
