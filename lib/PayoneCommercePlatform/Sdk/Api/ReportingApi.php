<?php
/**
 * ReportingApi
 * PHP version 7.4
 *
 * @category Class
 * @package  PayoneCommercePlatform\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Commerce Platform API
 *
 * RESTful API for the creation of Commerce Cases with Checkouts and the execution of Payments.
 *
 * The version of the OpenAPI document: 1.6.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace PayoneCommercePlatform\Sdk\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use PayoneCommercePlatform\Sdk\ApiException;
use PayoneCommercePlatform\Sdk\Configuration;
use PayoneCommercePlatform\Sdk\HeaderSelector;
use PayoneCommercePlatform\Sdk\ObjectSerializer;

/**
 * ReportingApi Class Doc Comment
 *
 * @category Class
 * @package  PayoneCommercePlatform\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ReportingApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getCheckoutSummaryReports' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getCheckoutSummaryReports
     *
     * Get a summarized list of Checkouts in csv format based on provided search criteria
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant. (required)
     * @param  \DateTime $fromDate Date and time in RFC3339 format after which Checkouts should be included in the request. Accepted formats are: * YYYY-MM-DD&#39;T&#39;HH:mm:ss&#39;Z&#39; * YYYY-MM-DD&#39;T&#39;HH:mm:ss+XX:XX * YYYY-MM-DD&#39;T&#39;HH:mm:ss-XX:XX * YYYY-MM-DD&#39;T&#39;HH:mm&#39;Z&#39; * YYYY-MM-DD&#39;T&#39;HH:mm+XX:XX * YYYY-MM-DD&#39;T&#39;HH:mm-XX:XX          All other formats may be ignored by the system. (optional)
     * @param  \DateTime $toDate Date and time in RFC3339 format after which Checkouts should be included in the request. Accepted formats are: * YYYY-MM-DD&#39;T&#39;HH:mm:ss&#39;Z&#39; * YYYY-MM-DD&#39;T&#39;HH:mm:ss+XX:XX * YYYY-MM-DD&#39;T&#39;HH:mm:ss-XX:XX * YYYY-MM-DD&#39;T&#39;HH:mm&#39;Z&#39; * YYYY-MM-DD&#39;T&#39;HH:mm+XX:XX * YYYY-MM-DD&#39;T&#39;HH:mm-XX:XX All other formats may be ignored by the system. (optional)
     * @param  int $fromCheckoutAmount Minimum monetary value of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
     * @param  int $toCheckoutAmount Maximum monetary value of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
     * @param  int $fromOpenAmount Minimum open amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
     * @param  int $toOpenAmount Maximum open amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
     * @param  int $fromCollectedAmount Minimum collected amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
     * @param  int $toCollectedAmount Maximum collected amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
     * @param  int $fromCancelledAmount Minimum cancelled amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
     * @param  int $toCancelledAmount Maximum cancelled amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
     * @param  int $fromRefundAmount Minimum refund amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
     * @param  int $toRefundAmount Maximum refund amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
     * @param  int $fromChargebackAmount Minimum chargeback amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
     * @param  int $toChargebackAmount Maximum chargeback amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
     * @param  string $checkoutId Unique identifier of a Checkout (optional)
     * @param  string $merchantReference Unique reference of the Checkout that is also returned for reporting and reconciliation purposes. (optional)
     * @param  string $merchantCustomerId Unique identifier for the customer. (optional)
     * @param  int[] $includePaymentProductId Filter your results by payment product ID so that only Checkouts containing a Payment Execution with one of the specified payment product IDs are returned. (optional)
     * @param  \PayoneCommercePlatform\Sdk\Domain\StatusCheckout[] $includeCheckoutStatus Filter your results by Checkout status so that only Checkouts with the specified statuses are returned. (optional)
     * @param  \PayoneCommercePlatform\Sdk\Domain\ExtendedCheckoutStatus[] $includeExtendedCheckoutStatus Filter your results by extended Checkout status so that only Commerce Cases with Checkouts with the specified statuses are returned. (optional)
     * @param  \PayoneCommercePlatform\Sdk\Domain\PaymentChannel[] $includePaymentChannel Filter your results by payment channel so that only Checkouts which reference transactions on the given channels are returned. (optional)
     * @param  string $paymentReference Filter your results by the merchantReference of the paymentExecution or paymentInformation. (optional)
     * @param  string $paymentId Filter your results by the paymentExecutionId, paymentInformationId or the id of the payment. (optional)
     * @param  string $firstName Filter your results by the customer first name. It is also possible to filter by the first name from the shipping address. (optional)
     * @param  string $surname Filter your results by the customer surname. It is also possible to filter by the surname from the shipping address. (optional)
     * @param  string $email Filter your results by the customer email address. (optional)
     * @param  string $phoneNumber Filter your results by the customer phone number. (optional)
     * @param  string $dateOfBirth Filter your results by the date of birth. Format YYYYMMDD (optional)
     * @param  string $companyInformation Filter your results by the name of the company. (optional)
     * @param  string $reportingToken Filter your results by the reporting token. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCheckoutSummaryReports'] to see the possible values for this operation
     *
     * @throws \PayoneCommercePlatform\Sdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return string|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse
     */
    public function getCheckoutSummaryReports($merchantId, $fromDate = null, $toDate = null, $fromCheckoutAmount = null, $toCheckoutAmount = null, $fromOpenAmount = null, $toOpenAmount = null, $fromCollectedAmount = null, $toCollectedAmount = null, $fromCancelledAmount = null, $toCancelledAmount = null, $fromRefundAmount = null, $toRefundAmount = null, $fromChargebackAmount = null, $toChargebackAmount = null, $checkoutId = null, $merchantReference = null, $merchantCustomerId = null, $includePaymentProductId = null, $includeCheckoutStatus = null, $includeExtendedCheckoutStatus = null, $includePaymentChannel = null, $paymentReference = null, $paymentId = null, $firstName = null, $surname = null, $email = null, $phoneNumber = null, $dateOfBirth = null, $companyInformation = null, $reportingToken = null, string $contentType = self::contentTypes['getCheckoutSummaryReports'][0])
    {
        list($response) = $this->getCheckoutSummaryReportsWithHttpInfo($merchantId, $fromDate, $toDate, $fromCheckoutAmount, $toCheckoutAmount, $fromOpenAmount, $toOpenAmount, $fromCollectedAmount, $toCollectedAmount, $fromCancelledAmount, $toCancelledAmount, $fromRefundAmount, $toRefundAmount, $fromChargebackAmount, $toChargebackAmount, $checkoutId, $merchantReference, $merchantCustomerId, $includePaymentProductId, $includeCheckoutStatus, $includeExtendedCheckoutStatus, $includePaymentChannel, $paymentReference, $paymentId, $firstName, $surname, $email, $phoneNumber, $dateOfBirth, $companyInformation, $reportingToken, $contentType);
        return $response;
    }

    /**
     * Operation getCheckoutSummaryReportsWithHttpInfo
     *
     * Get a summarized list of Checkouts in csv format based on provided search criteria
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant. (required)
     * @param  \DateTime $fromDate Date and time in RFC3339 format after which Checkouts should be included in the request. Accepted formats are: * YYYY-MM-DD&#39;T&#39;HH:mm:ss&#39;Z&#39; * YYYY-MM-DD&#39;T&#39;HH:mm:ss+XX:XX * YYYY-MM-DD&#39;T&#39;HH:mm:ss-XX:XX * YYYY-MM-DD&#39;T&#39;HH:mm&#39;Z&#39; * YYYY-MM-DD&#39;T&#39;HH:mm+XX:XX * YYYY-MM-DD&#39;T&#39;HH:mm-XX:XX          All other formats may be ignored by the system. (optional)
     * @param  \DateTime $toDate Date and time in RFC3339 format after which Checkouts should be included in the request. Accepted formats are: * YYYY-MM-DD&#39;T&#39;HH:mm:ss&#39;Z&#39; * YYYY-MM-DD&#39;T&#39;HH:mm:ss+XX:XX * YYYY-MM-DD&#39;T&#39;HH:mm:ss-XX:XX * YYYY-MM-DD&#39;T&#39;HH:mm&#39;Z&#39; * YYYY-MM-DD&#39;T&#39;HH:mm+XX:XX * YYYY-MM-DD&#39;T&#39;HH:mm-XX:XX All other formats may be ignored by the system. (optional)
     * @param  int $fromCheckoutAmount Minimum monetary value of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
     * @param  int $toCheckoutAmount Maximum monetary value of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
     * @param  int $fromOpenAmount Minimum open amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
     * @param  int $toOpenAmount Maximum open amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
     * @param  int $fromCollectedAmount Minimum collected amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
     * @param  int $toCollectedAmount Maximum collected amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
     * @param  int $fromCancelledAmount Minimum cancelled amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
     * @param  int $toCancelledAmount Maximum cancelled amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
     * @param  int $fromRefundAmount Minimum refund amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
     * @param  int $toRefundAmount Maximum refund amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
     * @param  int $fromChargebackAmount Minimum chargeback amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
     * @param  int $toChargebackAmount Maximum chargeback amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
     * @param  string $checkoutId Unique identifier of a Checkout (optional)
     * @param  string $merchantReference Unique reference of the Checkout that is also returned for reporting and reconciliation purposes. (optional)
     * @param  string $merchantCustomerId Unique identifier for the customer. (optional)
     * @param  int[] $includePaymentProductId Filter your results by payment product ID so that only Checkouts containing a Payment Execution with one of the specified payment product IDs are returned. (optional)
     * @param  \PayoneCommercePlatform\Sdk\Domain\StatusCheckout[] $includeCheckoutStatus Filter your results by Checkout status so that only Checkouts with the specified statuses are returned. (optional)
     * @param  \PayoneCommercePlatform\Sdk\Domain\ExtendedCheckoutStatus[] $includeExtendedCheckoutStatus Filter your results by extended Checkout status so that only Commerce Cases with Checkouts with the specified statuses are returned. (optional)
     * @param  \PayoneCommercePlatform\Sdk\Domain\PaymentChannel[] $includePaymentChannel Filter your results by payment channel so that only Checkouts which reference transactions on the given channels are returned. (optional)
     * @param  string $paymentReference Filter your results by the merchantReference of the paymentExecution or paymentInformation. (optional)
     * @param  string $paymentId Filter your results by the paymentExecutionId, paymentInformationId or the id of the payment. (optional)
     * @param  string $firstName Filter your results by the customer first name. It is also possible to filter by the first name from the shipping address. (optional)
     * @param  string $surname Filter your results by the customer surname. It is also possible to filter by the surname from the shipping address. (optional)
     * @param  string $email Filter your results by the customer email address. (optional)
     * @param  string $phoneNumber Filter your results by the customer phone number. (optional)
     * @param  string $dateOfBirth Filter your results by the date of birth. Format YYYYMMDD (optional)
     * @param  string $companyInformation Filter your results by the name of the company. (optional)
     * @param  string $reportingToken Filter your results by the reporting token. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCheckoutSummaryReports'] to see the possible values for this operation
     *
     * @throws \PayoneCommercePlatform\Sdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of string|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCheckoutSummaryReportsWithHttpInfo($merchantId, $fromDate = null, $toDate = null, $fromCheckoutAmount = null, $toCheckoutAmount = null, $fromOpenAmount = null, $toOpenAmount = null, $fromCollectedAmount = null, $toCollectedAmount = null, $fromCancelledAmount = null, $toCancelledAmount = null, $fromRefundAmount = null, $toRefundAmount = null, $fromChargebackAmount = null, $toChargebackAmount = null, $checkoutId = null, $merchantReference = null, $merchantCustomerId = null, $includePaymentProductId = null, $includeCheckoutStatus = null, $includeExtendedCheckoutStatus = null, $includePaymentChannel = null, $paymentReference = null, $paymentId = null, $firstName = null, $surname = null, $email = null, $phoneNumber = null, $dateOfBirth = null, $companyInformation = null, $reportingToken = null, string $contentType = self::contentTypes['getCheckoutSummaryReports'][0])
    {
        $request = $this->getCheckoutSummaryReportsRequest($merchantId, $fromDate, $toDate, $fromCheckoutAmount, $toCheckoutAmount, $fromOpenAmount, $toOpenAmount, $fromCollectedAmount, $toCollectedAmount, $fromCancelledAmount, $toCancelledAmount, $fromRefundAmount, $toRefundAmount, $fromChargebackAmount, $toChargebackAmount, $checkoutId, $merchantReference, $merchantCustomerId, $includePaymentProductId, $includeCheckoutStatus, $includeExtendedCheckoutStatus, $includePaymentChannel, $paymentReference, $paymentId, $firstName, $surname, $email, $phoneNumber, $dateOfBirth, $companyInformation, $reportingToken, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCheckoutSummaryReportsAsync
     *
     * Get a summarized list of Checkouts in csv format based on provided search criteria
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant. (required)
     * @param  \DateTime $fromDate Date and time in RFC3339 format after which Checkouts should be included in the request. Accepted formats are: * YYYY-MM-DD&#39;T&#39;HH:mm:ss&#39;Z&#39; * YYYY-MM-DD&#39;T&#39;HH:mm:ss+XX:XX * YYYY-MM-DD&#39;T&#39;HH:mm:ss-XX:XX * YYYY-MM-DD&#39;T&#39;HH:mm&#39;Z&#39; * YYYY-MM-DD&#39;T&#39;HH:mm+XX:XX * YYYY-MM-DD&#39;T&#39;HH:mm-XX:XX          All other formats may be ignored by the system. (optional)
     * @param  \DateTime $toDate Date and time in RFC3339 format after which Checkouts should be included in the request. Accepted formats are: * YYYY-MM-DD&#39;T&#39;HH:mm:ss&#39;Z&#39; * YYYY-MM-DD&#39;T&#39;HH:mm:ss+XX:XX * YYYY-MM-DD&#39;T&#39;HH:mm:ss-XX:XX * YYYY-MM-DD&#39;T&#39;HH:mm&#39;Z&#39; * YYYY-MM-DD&#39;T&#39;HH:mm+XX:XX * YYYY-MM-DD&#39;T&#39;HH:mm-XX:XX All other formats may be ignored by the system. (optional)
     * @param  int $fromCheckoutAmount Minimum monetary value of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
     * @param  int $toCheckoutAmount Maximum monetary value of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
     * @param  int $fromOpenAmount Minimum open amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
     * @param  int $toOpenAmount Maximum open amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
     * @param  int $fromCollectedAmount Minimum collected amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
     * @param  int $toCollectedAmount Maximum collected amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
     * @param  int $fromCancelledAmount Minimum cancelled amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
     * @param  int $toCancelledAmount Maximum cancelled amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
     * @param  int $fromRefundAmount Minimum refund amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
     * @param  int $toRefundAmount Maximum refund amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
     * @param  int $fromChargebackAmount Minimum chargeback amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
     * @param  int $toChargebackAmount Maximum chargeback amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
     * @param  string $checkoutId Unique identifier of a Checkout (optional)
     * @param  string $merchantReference Unique reference of the Checkout that is also returned for reporting and reconciliation purposes. (optional)
     * @param  string $merchantCustomerId Unique identifier for the customer. (optional)
     * @param  int[] $includePaymentProductId Filter your results by payment product ID so that only Checkouts containing a Payment Execution with one of the specified payment product IDs are returned. (optional)
     * @param  \PayoneCommercePlatform\Sdk\Domain\StatusCheckout[] $includeCheckoutStatus Filter your results by Checkout status so that only Checkouts with the specified statuses are returned. (optional)
     * @param  \PayoneCommercePlatform\Sdk\Domain\ExtendedCheckoutStatus[] $includeExtendedCheckoutStatus Filter your results by extended Checkout status so that only Commerce Cases with Checkouts with the specified statuses are returned. (optional)
     * @param  \PayoneCommercePlatform\Sdk\Domain\PaymentChannel[] $includePaymentChannel Filter your results by payment channel so that only Checkouts which reference transactions on the given channels are returned. (optional)
     * @param  string $paymentReference Filter your results by the merchantReference of the paymentExecution or paymentInformation. (optional)
     * @param  string $paymentId Filter your results by the paymentExecutionId, paymentInformationId or the id of the payment. (optional)
     * @param  string $firstName Filter your results by the customer first name. It is also possible to filter by the first name from the shipping address. (optional)
     * @param  string $surname Filter your results by the customer surname. It is also possible to filter by the surname from the shipping address. (optional)
     * @param  string $email Filter your results by the customer email address. (optional)
     * @param  string $phoneNumber Filter your results by the customer phone number. (optional)
     * @param  string $dateOfBirth Filter your results by the date of birth. Format YYYYMMDD (optional)
     * @param  string $companyInformation Filter your results by the name of the company. (optional)
     * @param  string $reportingToken Filter your results by the reporting token. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCheckoutSummaryReports'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCheckoutSummaryReportsAsync($merchantId, $fromDate = null, $toDate = null, $fromCheckoutAmount = null, $toCheckoutAmount = null, $fromOpenAmount = null, $toOpenAmount = null, $fromCollectedAmount = null, $toCollectedAmount = null, $fromCancelledAmount = null, $toCancelledAmount = null, $fromRefundAmount = null, $toRefundAmount = null, $fromChargebackAmount = null, $toChargebackAmount = null, $checkoutId = null, $merchantReference = null, $merchantCustomerId = null, $includePaymentProductId = null, $includeCheckoutStatus = null, $includeExtendedCheckoutStatus = null, $includePaymentChannel = null, $paymentReference = null, $paymentId = null, $firstName = null, $surname = null, $email = null, $phoneNumber = null, $dateOfBirth = null, $companyInformation = null, $reportingToken = null, string $contentType = self::contentTypes['getCheckoutSummaryReports'][0])
    {
        return $this->getCheckoutSummaryReportsAsyncWithHttpInfo($merchantId, $fromDate, $toDate, $fromCheckoutAmount, $toCheckoutAmount, $fromOpenAmount, $toOpenAmount, $fromCollectedAmount, $toCollectedAmount, $fromCancelledAmount, $toCancelledAmount, $fromRefundAmount, $toRefundAmount, $fromChargebackAmount, $toChargebackAmount, $checkoutId, $merchantReference, $merchantCustomerId, $includePaymentProductId, $includeCheckoutStatus, $includeExtendedCheckoutStatus, $includePaymentChannel, $paymentReference, $paymentId, $firstName, $surname, $email, $phoneNumber, $dateOfBirth, $companyInformation, $reportingToken, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCheckoutSummaryReportsAsyncWithHttpInfo
     *
     * Get a summarized list of Checkouts in csv format based on provided search criteria
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant. (required)
     * @param  \DateTime $fromDate Date and time in RFC3339 format after which Checkouts should be included in the request. Accepted formats are: * YYYY-MM-DD&#39;T&#39;HH:mm:ss&#39;Z&#39; * YYYY-MM-DD&#39;T&#39;HH:mm:ss+XX:XX * YYYY-MM-DD&#39;T&#39;HH:mm:ss-XX:XX * YYYY-MM-DD&#39;T&#39;HH:mm&#39;Z&#39; * YYYY-MM-DD&#39;T&#39;HH:mm+XX:XX * YYYY-MM-DD&#39;T&#39;HH:mm-XX:XX          All other formats may be ignored by the system. (optional)
     * @param  \DateTime $toDate Date and time in RFC3339 format after which Checkouts should be included in the request. Accepted formats are: * YYYY-MM-DD&#39;T&#39;HH:mm:ss&#39;Z&#39; * YYYY-MM-DD&#39;T&#39;HH:mm:ss+XX:XX * YYYY-MM-DD&#39;T&#39;HH:mm:ss-XX:XX * YYYY-MM-DD&#39;T&#39;HH:mm&#39;Z&#39; * YYYY-MM-DD&#39;T&#39;HH:mm+XX:XX * YYYY-MM-DD&#39;T&#39;HH:mm-XX:XX All other formats may be ignored by the system. (optional)
     * @param  int $fromCheckoutAmount Minimum monetary value of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
     * @param  int $toCheckoutAmount Maximum monetary value of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
     * @param  int $fromOpenAmount Minimum open amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
     * @param  int $toOpenAmount Maximum open amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
     * @param  int $fromCollectedAmount Minimum collected amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
     * @param  int $toCollectedAmount Maximum collected amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
     * @param  int $fromCancelledAmount Minimum cancelled amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
     * @param  int $toCancelledAmount Maximum cancelled amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
     * @param  int $fromRefundAmount Minimum refund amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
     * @param  int $toRefundAmount Maximum refund amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
     * @param  int $fromChargebackAmount Minimum chargeback amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
     * @param  int $toChargebackAmount Maximum chargeback amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
     * @param  string $checkoutId Unique identifier of a Checkout (optional)
     * @param  string $merchantReference Unique reference of the Checkout that is also returned for reporting and reconciliation purposes. (optional)
     * @param  string $merchantCustomerId Unique identifier for the customer. (optional)
     * @param  int[] $includePaymentProductId Filter your results by payment product ID so that only Checkouts containing a Payment Execution with one of the specified payment product IDs are returned. (optional)
     * @param  \PayoneCommercePlatform\Sdk\Domain\StatusCheckout[] $includeCheckoutStatus Filter your results by Checkout status so that only Checkouts with the specified statuses are returned. (optional)
     * @param  \PayoneCommercePlatform\Sdk\Domain\ExtendedCheckoutStatus[] $includeExtendedCheckoutStatus Filter your results by extended Checkout status so that only Commerce Cases with Checkouts with the specified statuses are returned. (optional)
     * @param  \PayoneCommercePlatform\Sdk\Domain\PaymentChannel[] $includePaymentChannel Filter your results by payment channel so that only Checkouts which reference transactions on the given channels are returned. (optional)
     * @param  string $paymentReference Filter your results by the merchantReference of the paymentExecution or paymentInformation. (optional)
     * @param  string $paymentId Filter your results by the paymentExecutionId, paymentInformationId or the id of the payment. (optional)
     * @param  string $firstName Filter your results by the customer first name. It is also possible to filter by the first name from the shipping address. (optional)
     * @param  string $surname Filter your results by the customer surname. It is also possible to filter by the surname from the shipping address. (optional)
     * @param  string $email Filter your results by the customer email address. (optional)
     * @param  string $phoneNumber Filter your results by the customer phone number. (optional)
     * @param  string $dateOfBirth Filter your results by the date of birth. Format YYYYMMDD (optional)
     * @param  string $companyInformation Filter your results by the name of the company. (optional)
     * @param  string $reportingToken Filter your results by the reporting token. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCheckoutSummaryReports'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCheckoutSummaryReportsAsyncWithHttpInfo($merchantId, $fromDate = null, $toDate = null, $fromCheckoutAmount = null, $toCheckoutAmount = null, $fromOpenAmount = null, $toOpenAmount = null, $fromCollectedAmount = null, $toCollectedAmount = null, $fromCancelledAmount = null, $toCancelledAmount = null, $fromRefundAmount = null, $toRefundAmount = null, $fromChargebackAmount = null, $toChargebackAmount = null, $checkoutId = null, $merchantReference = null, $merchantCustomerId = null, $includePaymentProductId = null, $includeCheckoutStatus = null, $includeExtendedCheckoutStatus = null, $includePaymentChannel = null, $paymentReference = null, $paymentId = null, $firstName = null, $surname = null, $email = null, $phoneNumber = null, $dateOfBirth = null, $companyInformation = null, $reportingToken = null, string $contentType = self::contentTypes['getCheckoutSummaryReports'][0])
    {
        $returnType = 'string';
        $request = $this->getCheckoutSummaryReportsRequest($merchantId, $fromDate, $toDate, $fromCheckoutAmount, $toCheckoutAmount, $fromOpenAmount, $toOpenAmount, $fromCollectedAmount, $toCollectedAmount, $fromCancelledAmount, $toCancelledAmount, $fromRefundAmount, $toRefundAmount, $fromChargebackAmount, $toChargebackAmount, $checkoutId, $merchantReference, $merchantCustomerId, $includePaymentProductId, $includeCheckoutStatus, $includeExtendedCheckoutStatus, $includePaymentChannel, $paymentReference, $paymentId, $firstName, $surname, $email, $phoneNumber, $dateOfBirth, $companyInformation, $reportingToken, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCheckoutSummaryReports'
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant. (required)
     * @param  \DateTime $fromDate Date and time in RFC3339 format after which Checkouts should be included in the request. Accepted formats are: * YYYY-MM-DD&#39;T&#39;HH:mm:ss&#39;Z&#39; * YYYY-MM-DD&#39;T&#39;HH:mm:ss+XX:XX * YYYY-MM-DD&#39;T&#39;HH:mm:ss-XX:XX * YYYY-MM-DD&#39;T&#39;HH:mm&#39;Z&#39; * YYYY-MM-DD&#39;T&#39;HH:mm+XX:XX * YYYY-MM-DD&#39;T&#39;HH:mm-XX:XX          All other formats may be ignored by the system. (optional)
     * @param  \DateTime $toDate Date and time in RFC3339 format after which Checkouts should be included in the request. Accepted formats are: * YYYY-MM-DD&#39;T&#39;HH:mm:ss&#39;Z&#39; * YYYY-MM-DD&#39;T&#39;HH:mm:ss+XX:XX * YYYY-MM-DD&#39;T&#39;HH:mm:ss-XX:XX * YYYY-MM-DD&#39;T&#39;HH:mm&#39;Z&#39; * YYYY-MM-DD&#39;T&#39;HH:mm+XX:XX * YYYY-MM-DD&#39;T&#39;HH:mm-XX:XX All other formats may be ignored by the system. (optional)
     * @param  int $fromCheckoutAmount Minimum monetary value of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
     * @param  int $toCheckoutAmount Maximum monetary value of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
     * @param  int $fromOpenAmount Minimum open amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
     * @param  int $toOpenAmount Maximum open amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
     * @param  int $fromCollectedAmount Minimum collected amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
     * @param  int $toCollectedAmount Maximum collected amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
     * @param  int $fromCancelledAmount Minimum cancelled amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
     * @param  int $toCancelledAmount Maximum cancelled amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
     * @param  int $fromRefundAmount Minimum refund amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
     * @param  int $toRefundAmount Maximum refund amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
     * @param  int $fromChargebackAmount Minimum chargeback amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
     * @param  int $toChargebackAmount Maximum chargeback amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
     * @param  string $checkoutId Unique identifier of a Checkout (optional)
     * @param  string $merchantReference Unique reference of the Checkout that is also returned for reporting and reconciliation purposes. (optional)
     * @param  string $merchantCustomerId Unique identifier for the customer. (optional)
     * @param  int[] $includePaymentProductId Filter your results by payment product ID so that only Checkouts containing a Payment Execution with one of the specified payment product IDs are returned. (optional)
     * @param  \PayoneCommercePlatform\Sdk\Domain\StatusCheckout[] $includeCheckoutStatus Filter your results by Checkout status so that only Checkouts with the specified statuses are returned. (optional)
     * @param  \PayoneCommercePlatform\Sdk\Domain\ExtendedCheckoutStatus[] $includeExtendedCheckoutStatus Filter your results by extended Checkout status so that only Commerce Cases with Checkouts with the specified statuses are returned. (optional)
     * @param  \PayoneCommercePlatform\Sdk\Domain\PaymentChannel[] $includePaymentChannel Filter your results by payment channel so that only Checkouts which reference transactions on the given channels are returned. (optional)
     * @param  string $paymentReference Filter your results by the merchantReference of the paymentExecution or paymentInformation. (optional)
     * @param  string $paymentId Filter your results by the paymentExecutionId, paymentInformationId or the id of the payment. (optional)
     * @param  string $firstName Filter your results by the customer first name. It is also possible to filter by the first name from the shipping address. (optional)
     * @param  string $surname Filter your results by the customer surname. It is also possible to filter by the surname from the shipping address. (optional)
     * @param  string $email Filter your results by the customer email address. (optional)
     * @param  string $phoneNumber Filter your results by the customer phone number. (optional)
     * @param  string $dateOfBirth Filter your results by the date of birth. Format YYYYMMDD (optional)
     * @param  string $companyInformation Filter your results by the name of the company. (optional)
     * @param  string $reportingToken Filter your results by the reporting token. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCheckoutSummaryReports'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCheckoutSummaryReportsRequest($merchantId, $fromDate = null, $toDate = null, $fromCheckoutAmount = null, $toCheckoutAmount = null, $fromOpenAmount = null, $toOpenAmount = null, $fromCollectedAmount = null, $toCollectedAmount = null, $fromCancelledAmount = null, $toCancelledAmount = null, $fromRefundAmount = null, $toRefundAmount = null, $fromChargebackAmount = null, $toChargebackAmount = null, $checkoutId = null, $merchantReference = null, $merchantCustomerId = null, $includePaymentProductId = null, $includeCheckoutStatus = null, $includeExtendedCheckoutStatus = null, $includePaymentChannel = null, $paymentReference = null, $paymentId = null, $firstName = null, $surname = null, $email = null, $phoneNumber = null, $dateOfBirth = null, $companyInformation = null, $reportingToken = null, string $contentType = self::contentTypes['getCheckoutSummaryReports'][0])
    {

        // verify the required parameter 'merchantId' is set
        if ($merchantId === null || (is_array($merchantId) && count($merchantId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchantId when calling getCheckoutSummaryReports'
            );
        }
        if (strlen($merchantId) > 64) {
            throw new \InvalidArgumentException('invalid length for "$merchantId" when calling ReportingApi.getCheckoutSummaryReports, must be smaller than or equal to 64.');
        }
        if (strlen($merchantId) < 0) {
            throw new \InvalidArgumentException('invalid length for "$merchantId" when calling ReportingApi.getCheckoutSummaryReports, must be bigger than or equal to 0.');
        }
        


        if ($fromCheckoutAmount !== null && $fromCheckoutAmount > 999999999999) {
            throw new \InvalidArgumentException('invalid value for "$fromCheckoutAmount" when calling ReportingApi.getCheckoutSummaryReports, must be smaller than or equal to 999999999999.');
        }
        if ($fromCheckoutAmount !== null && $fromCheckoutAmount < 0) {
            throw new \InvalidArgumentException('invalid value for "$fromCheckoutAmount" when calling ReportingApi.getCheckoutSummaryReports, must be bigger than or equal to 0.');
        }
        
        if ($toCheckoutAmount !== null && $toCheckoutAmount > 999999999999) {
            throw new \InvalidArgumentException('invalid value for "$toCheckoutAmount" when calling ReportingApi.getCheckoutSummaryReports, must be smaller than or equal to 999999999999.');
        }
        if ($toCheckoutAmount !== null && $toCheckoutAmount < 0) {
            throw new \InvalidArgumentException('invalid value for "$toCheckoutAmount" when calling ReportingApi.getCheckoutSummaryReports, must be bigger than or equal to 0.');
        }
        
        if ($fromOpenAmount !== null && $fromOpenAmount > 999999999999) {
            throw new \InvalidArgumentException('invalid value for "$fromOpenAmount" when calling ReportingApi.getCheckoutSummaryReports, must be smaller than or equal to 999999999999.');
        }
        if ($fromOpenAmount !== null && $fromOpenAmount < 0) {
            throw new \InvalidArgumentException('invalid value for "$fromOpenAmount" when calling ReportingApi.getCheckoutSummaryReports, must be bigger than or equal to 0.');
        }
        
        if ($toOpenAmount !== null && $toOpenAmount > 999999999999) {
            throw new \InvalidArgumentException('invalid value for "$toOpenAmount" when calling ReportingApi.getCheckoutSummaryReports, must be smaller than or equal to 999999999999.');
        }
        if ($toOpenAmount !== null && $toOpenAmount < 0) {
            throw new \InvalidArgumentException('invalid value for "$toOpenAmount" when calling ReportingApi.getCheckoutSummaryReports, must be bigger than or equal to 0.');
        }
        
        if ($fromCollectedAmount !== null && $fromCollectedAmount > 999999999999) {
            throw new \InvalidArgumentException('invalid value for "$fromCollectedAmount" when calling ReportingApi.getCheckoutSummaryReports, must be smaller than or equal to 999999999999.');
        }
        if ($fromCollectedAmount !== null && $fromCollectedAmount < 0) {
            throw new \InvalidArgumentException('invalid value for "$fromCollectedAmount" when calling ReportingApi.getCheckoutSummaryReports, must be bigger than or equal to 0.');
        }
        
        if ($toCollectedAmount !== null && $toCollectedAmount > 999999999999) {
            throw new \InvalidArgumentException('invalid value for "$toCollectedAmount" when calling ReportingApi.getCheckoutSummaryReports, must be smaller than or equal to 999999999999.');
        }
        if ($toCollectedAmount !== null && $toCollectedAmount < 0) {
            throw new \InvalidArgumentException('invalid value for "$toCollectedAmount" when calling ReportingApi.getCheckoutSummaryReports, must be bigger than or equal to 0.');
        }
        
        if ($fromCancelledAmount !== null && $fromCancelledAmount > 999999999999) {
            throw new \InvalidArgumentException('invalid value for "$fromCancelledAmount" when calling ReportingApi.getCheckoutSummaryReports, must be smaller than or equal to 999999999999.');
        }
        if ($fromCancelledAmount !== null && $fromCancelledAmount < 0) {
            throw new \InvalidArgumentException('invalid value for "$fromCancelledAmount" when calling ReportingApi.getCheckoutSummaryReports, must be bigger than or equal to 0.');
        }
        
        if ($toCancelledAmount !== null && $toCancelledAmount > 999999999999) {
            throw new \InvalidArgumentException('invalid value for "$toCancelledAmount" when calling ReportingApi.getCheckoutSummaryReports, must be smaller than or equal to 999999999999.');
        }
        if ($toCancelledAmount !== null && $toCancelledAmount < 0) {
            throw new \InvalidArgumentException('invalid value for "$toCancelledAmount" when calling ReportingApi.getCheckoutSummaryReports, must be bigger than or equal to 0.');
        }
        
        if ($fromRefundAmount !== null && $fromRefundAmount > 999999999999) {
            throw new \InvalidArgumentException('invalid value for "$fromRefundAmount" when calling ReportingApi.getCheckoutSummaryReports, must be smaller than or equal to 999999999999.');
        }
        if ($fromRefundAmount !== null && $fromRefundAmount < 0) {
            throw new \InvalidArgumentException('invalid value for "$fromRefundAmount" when calling ReportingApi.getCheckoutSummaryReports, must be bigger than or equal to 0.');
        }
        
        if ($toRefundAmount !== null && $toRefundAmount > 999999999999) {
            throw new \InvalidArgumentException('invalid value for "$toRefundAmount" when calling ReportingApi.getCheckoutSummaryReports, must be smaller than or equal to 999999999999.');
        }
        if ($toRefundAmount !== null && $toRefundAmount < 0) {
            throw new \InvalidArgumentException('invalid value for "$toRefundAmount" when calling ReportingApi.getCheckoutSummaryReports, must be bigger than or equal to 0.');
        }
        
        if ($fromChargebackAmount !== null && $fromChargebackAmount > 999999999999) {
            throw new \InvalidArgumentException('invalid value for "$fromChargebackAmount" when calling ReportingApi.getCheckoutSummaryReports, must be smaller than or equal to 999999999999.');
        }
        if ($fromChargebackAmount !== null && $fromChargebackAmount < 0) {
            throw new \InvalidArgumentException('invalid value for "$fromChargebackAmount" when calling ReportingApi.getCheckoutSummaryReports, must be bigger than or equal to 0.');
        }
        
        if ($toChargebackAmount !== null && $toChargebackAmount > 999999999999) {
            throw new \InvalidArgumentException('invalid value for "$toChargebackAmount" when calling ReportingApi.getCheckoutSummaryReports, must be smaller than or equal to 999999999999.');
        }
        if ($toChargebackAmount !== null && $toChargebackAmount < 0) {
            throw new \InvalidArgumentException('invalid value for "$toChargebackAmount" when calling ReportingApi.getCheckoutSummaryReports, must be bigger than or equal to 0.');
        }
        

        if ($merchantReference !== null && strlen($merchantReference) > 40) {
            throw new \InvalidArgumentException('invalid length for "$merchantReference" when calling ReportingApi.getCheckoutSummaryReports, must be smaller than or equal to 40.');
        }
        
        if ($merchantCustomerId !== null && strlen($merchantCustomerId) > 20) {
            throw new \InvalidArgumentException('invalid length for "$merchantCustomerId" when calling ReportingApi.getCheckoutSummaryReports, must be smaller than or equal to 20.');
        }
        










        if ($dateOfBirth !== null && strlen($dateOfBirth) > 8) {
            throw new \InvalidArgumentException('invalid length for "$dateOfBirth" when calling ReportingApi.getCheckoutSummaryReports, must be smaller than or equal to 8.');
        }
        if ($dateOfBirth !== null && !preg_match("/^((19|20|21)\\d{6})?$/", $dateOfBirth)) {
            throw new \InvalidArgumentException("invalid value for \"dateOfBirth\" when calling ReportingApi.getCheckoutSummaryReports, must conform to the pattern /^((19|20|21)\\d{6})?$/.");
        }
        

        if ($reportingToken !== null && strlen($reportingToken) > 40) {
            throw new \InvalidArgumentException('invalid length for "$reportingToken" when calling ReportingApi.getCheckoutSummaryReports, must be smaller than or equal to 40.');
        }
        

        $resourcePath = '/v1/{merchantId}/reports/checkout-summary';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fromDate,
            'fromDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $toDate,
            'toDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fromCheckoutAmount,
            'fromCheckoutAmount', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $toCheckoutAmount,
            'toCheckoutAmount', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fromOpenAmount,
            'fromOpenAmount', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $toOpenAmount,
            'toOpenAmount', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fromCollectedAmount,
            'fromCollectedAmount', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $toCollectedAmount,
            'toCollectedAmount', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fromCancelledAmount,
            'fromCancelledAmount', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $toCancelledAmount,
            'toCancelledAmount', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fromRefundAmount,
            'fromRefundAmount', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $toRefundAmount,
            'toRefundAmount', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fromChargebackAmount,
            'fromChargebackAmount', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $toChargebackAmount,
            'toChargebackAmount', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $checkoutId,
            'checkoutId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $merchantReference,
            'merchantReference', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $merchantCustomerId,
            'merchantCustomerId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $includePaymentProductId,
            'includePaymentProductId', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $includeCheckoutStatus,
            'includeCheckoutStatus', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $includeExtendedCheckoutStatus,
            'includeExtendedCheckoutStatus', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $includePaymentChannel,
            'includePaymentChannel', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $paymentReference,
            'paymentReference', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $paymentId,
            'paymentId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $firstName,
            'firstName', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $surname,
            'surname', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $email,
            'email', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $phoneNumber,
            'phoneNumber', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dateOfBirth,
            'dateOfBirth', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $companyInformation,
            'companyInformation', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $reportingToken,
            'reportingToken', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($merchantId !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantId' . '}',
                ObjectSerializer::toPathValue($merchantId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/csv', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
