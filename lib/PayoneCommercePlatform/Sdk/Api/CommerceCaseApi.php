<?php
/**
 * CommerceCaseApi
 * PHP version 7.4
 *
 * @category Class
 * @package  PayoneCommercePlatform\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Commerce Platform API
 *
 * RESTful API for the creation of Commerce Cases with Checkouts and the execution of Payments.
 *
 * The version of the OpenAPI document: 1.6.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace PayoneCommercePlatform\Sdk\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use PayoneCommercePlatform\Sdk\ApiException;
use PayoneCommercePlatform\Sdk\Configuration;
use PayoneCommercePlatform\Sdk\HeaderSelector;
use PayoneCommercePlatform\Sdk\ObjectSerializer;

/**
 * CommerceCaseApi Class Doc Comment
 *
 * @category Class
 * @package  PayoneCommercePlatform\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CommerceCaseApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createCommerceCase' => [
            'application/json',
        ],
        'getCommerceCase' => [
            'application/json',
        ],
        'getCommerceCases' => [
            'application/json',
        ],
        'updateCommerceCase' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createCommerceCase
     *
     * Create a Commerce Case
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. A Commerce Case has exactly one merchant. (required)
     * @param  \PayoneCommercePlatform\Sdk\Domain\CreateCommerceCaseRequest $createCommerceCaseRequest createCommerceCaseRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCommerceCase'] to see the possible values for this operation
     *
     * @throws \PayoneCommercePlatform\Sdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \PayoneCommercePlatform\Sdk\Domain\CreateCommerceCaseResponse|\PayoneCommercePlatform\Sdk\Domain\CreateCommerceCaseResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse
     */
    public function createCommerceCase($merchantId, $createCommerceCaseRequest, string $contentType = self::contentTypes['createCommerceCase'][0])
    {
        list($response) = $this->createCommerceCaseWithHttpInfo($merchantId, $createCommerceCaseRequest, $contentType);
        return $response;
    }

    /**
     * Operation createCommerceCaseWithHttpInfo
     *
     * Create a Commerce Case
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. A Commerce Case has exactly one merchant. (required)
     * @param  \PayoneCommercePlatform\Sdk\Domain\CreateCommerceCaseRequest $createCommerceCaseRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCommerceCase'] to see the possible values for this operation
     *
     * @throws \PayoneCommercePlatform\Sdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \PayoneCommercePlatform\Sdk\Domain\CreateCommerceCaseResponse|\PayoneCommercePlatform\Sdk\Domain\CreateCommerceCaseResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createCommerceCaseWithHttpInfo($merchantId, $createCommerceCaseRequest, string $contentType = self::contentTypes['createCommerceCase'][0])
    {
        $request = $this->createCommerceCaseRequest($merchantId, $createCommerceCaseRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\PayoneCommercePlatform\Sdk\Domain\CreateCommerceCaseResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\CreateCommerceCaseResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\CreateCommerceCaseResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 202:
                    if ('\PayoneCommercePlatform\Sdk\Domain\CreateCommerceCaseResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\CreateCommerceCaseResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\CreateCommerceCaseResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\PayoneCommercePlatform\Sdk\Domain\CreateCommerceCaseResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\CreateCommerceCaseResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\CreateCommerceCaseResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createCommerceCaseAsync
     *
     * Create a Commerce Case
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. A Commerce Case has exactly one merchant. (required)
     * @param  \PayoneCommercePlatform\Sdk\Domain\CreateCommerceCaseRequest $createCommerceCaseRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCommerceCase'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCommerceCaseAsync($merchantId, $createCommerceCaseRequest, string $contentType = self::contentTypes['createCommerceCase'][0])
    {
        return $this->createCommerceCaseAsyncWithHttpInfo($merchantId, $createCommerceCaseRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createCommerceCaseAsyncWithHttpInfo
     *
     * Create a Commerce Case
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. A Commerce Case has exactly one merchant. (required)
     * @param  \PayoneCommercePlatform\Sdk\Domain\CreateCommerceCaseRequest $createCommerceCaseRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCommerceCase'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCommerceCaseAsyncWithHttpInfo($merchantId, $createCommerceCaseRequest, string $contentType = self::contentTypes['createCommerceCase'][0])
    {
        $returnType = '\PayoneCommercePlatform\Sdk\Domain\CreateCommerceCaseResponse';
        $request = $this->createCommerceCaseRequest($merchantId, $createCommerceCaseRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createCommerceCase'
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. A Commerce Case has exactly one merchant. (required)
     * @param  \PayoneCommercePlatform\Sdk\Domain\CreateCommerceCaseRequest $createCommerceCaseRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCommerceCase'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createCommerceCaseRequest($merchantId, $createCommerceCaseRequest, string $contentType = self::contentTypes['createCommerceCase'][0])
    {

        // verify the required parameter 'merchantId' is set
        if ($merchantId === null || (is_array($merchantId) && count($merchantId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchantId when calling createCommerceCase'
            );
        }
        if (strlen($merchantId) > 64) {
            throw new \InvalidArgumentException('invalid length for "$merchantId" when calling CommerceCaseApi.createCommerceCase, must be smaller than or equal to 64.');
        }
        if (strlen($merchantId) < 0) {
            throw new \InvalidArgumentException('invalid length for "$merchantId" when calling CommerceCaseApi.createCommerceCase, must be bigger than or equal to 0.');
        }
        
        // verify the required parameter 'createCommerceCaseRequest' is set
        if ($createCommerceCaseRequest === null || (is_array($createCommerceCaseRequest) && count($createCommerceCaseRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $createCommerceCaseRequest when calling createCommerceCase'
            );
        }


        $resourcePath = '/v1/{merchantId}/commerce-cases';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($merchantId !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantId' . '}',
                ObjectSerializer::toPathValue($merchantId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($createCommerceCaseRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($createCommerceCaseRequest));
            } else {
                $httpBody = $createCommerceCaseRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCommerceCase
     *
     * Get Commerce Case Details
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant. (required)
     * @param  string $commerceCaseId Unique identifier of a Commerce Case. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCommerceCase'] to see the possible values for this operation
     *
     * @throws \PayoneCommercePlatform\Sdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \PayoneCommercePlatform\Sdk\Domain\CommerceCaseResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse
     */
    public function getCommerceCase($merchantId, $commerceCaseId, string $contentType = self::contentTypes['getCommerceCase'][0])
    {
        list($response) = $this->getCommerceCaseWithHttpInfo($merchantId, $commerceCaseId, $contentType);
        return $response;
    }

    /**
     * Operation getCommerceCaseWithHttpInfo
     *
     * Get Commerce Case Details
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant. (required)
     * @param  string $commerceCaseId Unique identifier of a Commerce Case. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCommerceCase'] to see the possible values for this operation
     *
     * @throws \PayoneCommercePlatform\Sdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \PayoneCommercePlatform\Sdk\Domain\CommerceCaseResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCommerceCaseWithHttpInfo($merchantId, $commerceCaseId, string $contentType = self::contentTypes['getCommerceCase'][0])
    {
        $request = $this->getCommerceCaseRequest($merchantId, $commerceCaseId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\PayoneCommercePlatform\Sdk\Domain\CommerceCaseResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\CommerceCaseResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\CommerceCaseResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\PayoneCommercePlatform\Sdk\Domain\CommerceCaseResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\CommerceCaseResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCommerceCaseAsync
     *
     * Get Commerce Case Details
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant. (required)
     * @param  string $commerceCaseId Unique identifier of a Commerce Case. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCommerceCase'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCommerceCaseAsync($merchantId, $commerceCaseId, string $contentType = self::contentTypes['getCommerceCase'][0])
    {
        return $this->getCommerceCaseAsyncWithHttpInfo($merchantId, $commerceCaseId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCommerceCaseAsyncWithHttpInfo
     *
     * Get Commerce Case Details
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant. (required)
     * @param  string $commerceCaseId Unique identifier of a Commerce Case. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCommerceCase'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCommerceCaseAsyncWithHttpInfo($merchantId, $commerceCaseId, string $contentType = self::contentTypes['getCommerceCase'][0])
    {
        $returnType = '\PayoneCommercePlatform\Sdk\Domain\CommerceCaseResponse';
        $request = $this->getCommerceCaseRequest($merchantId, $commerceCaseId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCommerceCase'
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant. (required)
     * @param  string $commerceCaseId Unique identifier of a Commerce Case. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCommerceCase'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCommerceCaseRequest($merchantId, $commerceCaseId, string $contentType = self::contentTypes['getCommerceCase'][0])
    {

        // verify the required parameter 'merchantId' is set
        if ($merchantId === null || (is_array($merchantId) && count($merchantId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchantId when calling getCommerceCase'
            );
        }
        if (strlen($merchantId) > 64) {
            throw new \InvalidArgumentException('invalid length for "$merchantId" when calling CommerceCaseApi.getCommerceCase, must be smaller than or equal to 64.');
        }
        if (strlen($merchantId) < 0) {
            throw new \InvalidArgumentException('invalid length for "$merchantId" when calling CommerceCaseApi.getCommerceCase, must be bigger than or equal to 0.');
        }
        
        // verify the required parameter 'commerceCaseId' is set
        if ($commerceCaseId === null || (is_array($commerceCaseId) && count($commerceCaseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commerceCaseId when calling getCommerceCase'
            );
        }


        $resourcePath = '/v1/{merchantId}/commerce-cases/{commerceCaseId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($merchantId !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantId' . '}',
                ObjectSerializer::toPathValue($merchantId),
                $resourcePath
            );
        }
        // path params
        if ($commerceCaseId !== null) {
            $resourcePath = str_replace(
                '{' . 'commerceCaseId' . '}',
                ObjectSerializer::toPathValue($commerceCaseId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCommerceCases
     *
     * Get a list of Commerce Cases based on Search Parameters
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. A Commerce Case has exactly one merchant. (required)
     * @param  int $offset The offset to load Commerce Cases starting with 0. (optional, default to 0)
     * @param  int $size The number of Commerce Cases loaded per page. (optional, default to 25)
     * @param  \DateTime $fromDate Date and time in ISO 8601 format a Commerce Cases should be included in the request. Excepted formats are:  * YYYY-MM-DDThh:mm:ssZ * YYYY-MM-DDThh:mm:ss+XX:XX All other formats are ignored or may not be handled properly. (optional)
     * @param  \DateTime $toDate Date and time in ISO 8601 format a Commerce Cases should be included in the request. Excepted formats are:  * YYYY-MM-DDThh:mm:ssZ * YYYY-MM-DDThh:mm:ss+XX:XX All other formats are ignored or may not be handled properly. (optional)
     * @param  string $commerceCaseId Unique identifier of a Commerce Case. (optional)
     * @param  string $merchantReference Unique reference of the Commerce Case that is also returned for reporting and reconciliation purposes. (optional)
     * @param  string $merchantCustomerId Unique identifier for the customer. (optional)
     * @param  \PayoneCommercePlatform\Sdk\Domain\StatusCheckout[] $includeCheckoutStatus Filter your results by the Checkout Status. The response will only return Commerce Cases with Checkouts with the provided Checkout Statuses. (optional)
     * @param  \PayoneCommercePlatform\Sdk\Domain\PaymentChannel[] $includePaymentChannel Filter your results by Payment Channel. The response will only return Commerce Cases with Checkouts for the provided Payment Channel. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCommerceCases'] to see the possible values for this operation
     *
     * @throws \PayoneCommercePlatform\Sdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \PayoneCommercePlatform\Sdk\Domain\CommerceCaseResponse[]|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse
     */
    public function getCommerceCases($merchantId, $offset = 0, $size = 25, $fromDate = null, $toDate = null, $commerceCaseId = null, $merchantReference = null, $merchantCustomerId = null, $includeCheckoutStatus = null, $includePaymentChannel = null, string $contentType = self::contentTypes['getCommerceCases'][0])
    {
        list($response) = $this->getCommerceCasesWithHttpInfo($merchantId, $offset, $size, $fromDate, $toDate, $commerceCaseId, $merchantReference, $merchantCustomerId, $includeCheckoutStatus, $includePaymentChannel, $contentType);
        return $response;
    }

    /**
     * Operation getCommerceCasesWithHttpInfo
     *
     * Get a list of Commerce Cases based on Search Parameters
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. A Commerce Case has exactly one merchant. (required)
     * @param  int $offset The offset to load Commerce Cases starting with 0. (optional, default to 0)
     * @param  int $size The number of Commerce Cases loaded per page. (optional, default to 25)
     * @param  \DateTime $fromDate Date and time in ISO 8601 format a Commerce Cases should be included in the request. Excepted formats are:  * YYYY-MM-DDThh:mm:ssZ * YYYY-MM-DDThh:mm:ss+XX:XX All other formats are ignored or may not be handled properly. (optional)
     * @param  \DateTime $toDate Date and time in ISO 8601 format a Commerce Cases should be included in the request. Excepted formats are:  * YYYY-MM-DDThh:mm:ssZ * YYYY-MM-DDThh:mm:ss+XX:XX All other formats are ignored or may not be handled properly. (optional)
     * @param  string $commerceCaseId Unique identifier of a Commerce Case. (optional)
     * @param  string $merchantReference Unique reference of the Commerce Case that is also returned for reporting and reconciliation purposes. (optional)
     * @param  string $merchantCustomerId Unique identifier for the customer. (optional)
     * @param  \PayoneCommercePlatform\Sdk\Domain\StatusCheckout[] $includeCheckoutStatus Filter your results by the Checkout Status. The response will only return Commerce Cases with Checkouts with the provided Checkout Statuses. (optional)
     * @param  \PayoneCommercePlatform\Sdk\Domain\PaymentChannel[] $includePaymentChannel Filter your results by Payment Channel. The response will only return Commerce Cases with Checkouts for the provided Payment Channel. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCommerceCases'] to see the possible values for this operation
     *
     * @throws \PayoneCommercePlatform\Sdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \PayoneCommercePlatform\Sdk\Domain\CommerceCaseResponse[]|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCommerceCasesWithHttpInfo($merchantId, $offset = 0, $size = 25, $fromDate = null, $toDate = null, $commerceCaseId = null, $merchantReference = null, $merchantCustomerId = null, $includeCheckoutStatus = null, $includePaymentChannel = null, string $contentType = self::contentTypes['getCommerceCases'][0])
    {
        $request = $this->getCommerceCasesRequest($merchantId, $offset, $size, $fromDate, $toDate, $commerceCaseId, $merchantReference, $merchantCustomerId, $includeCheckoutStatus, $includePaymentChannel, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\PayoneCommercePlatform\Sdk\Domain\CommerceCaseResponse[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\CommerceCaseResponse[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\CommerceCaseResponse[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\PayoneCommercePlatform\Sdk\Domain\CommerceCaseResponse[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\CommerceCaseResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCommerceCasesAsync
     *
     * Get a list of Commerce Cases based on Search Parameters
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. A Commerce Case has exactly one merchant. (required)
     * @param  int $offset The offset to load Commerce Cases starting with 0. (optional, default to 0)
     * @param  int $size The number of Commerce Cases loaded per page. (optional, default to 25)
     * @param  \DateTime $fromDate Date and time in ISO 8601 format a Commerce Cases should be included in the request. Excepted formats are:  * YYYY-MM-DDThh:mm:ssZ * YYYY-MM-DDThh:mm:ss+XX:XX All other formats are ignored or may not be handled properly. (optional)
     * @param  \DateTime $toDate Date and time in ISO 8601 format a Commerce Cases should be included in the request. Excepted formats are:  * YYYY-MM-DDThh:mm:ssZ * YYYY-MM-DDThh:mm:ss+XX:XX All other formats are ignored or may not be handled properly. (optional)
     * @param  string $commerceCaseId Unique identifier of a Commerce Case. (optional)
     * @param  string $merchantReference Unique reference of the Commerce Case that is also returned for reporting and reconciliation purposes. (optional)
     * @param  string $merchantCustomerId Unique identifier for the customer. (optional)
     * @param  \PayoneCommercePlatform\Sdk\Domain\StatusCheckout[] $includeCheckoutStatus Filter your results by the Checkout Status. The response will only return Commerce Cases with Checkouts with the provided Checkout Statuses. (optional)
     * @param  \PayoneCommercePlatform\Sdk\Domain\PaymentChannel[] $includePaymentChannel Filter your results by Payment Channel. The response will only return Commerce Cases with Checkouts for the provided Payment Channel. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCommerceCases'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCommerceCasesAsync($merchantId, $offset = 0, $size = 25, $fromDate = null, $toDate = null, $commerceCaseId = null, $merchantReference = null, $merchantCustomerId = null, $includeCheckoutStatus = null, $includePaymentChannel = null, string $contentType = self::contentTypes['getCommerceCases'][0])
    {
        return $this->getCommerceCasesAsyncWithHttpInfo($merchantId, $offset, $size, $fromDate, $toDate, $commerceCaseId, $merchantReference, $merchantCustomerId, $includeCheckoutStatus, $includePaymentChannel, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCommerceCasesAsyncWithHttpInfo
     *
     * Get a list of Commerce Cases based on Search Parameters
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. A Commerce Case has exactly one merchant. (required)
     * @param  int $offset The offset to load Commerce Cases starting with 0. (optional, default to 0)
     * @param  int $size The number of Commerce Cases loaded per page. (optional, default to 25)
     * @param  \DateTime $fromDate Date and time in ISO 8601 format a Commerce Cases should be included in the request. Excepted formats are:  * YYYY-MM-DDThh:mm:ssZ * YYYY-MM-DDThh:mm:ss+XX:XX All other formats are ignored or may not be handled properly. (optional)
     * @param  \DateTime $toDate Date and time in ISO 8601 format a Commerce Cases should be included in the request. Excepted formats are:  * YYYY-MM-DDThh:mm:ssZ * YYYY-MM-DDThh:mm:ss+XX:XX All other formats are ignored or may not be handled properly. (optional)
     * @param  string $commerceCaseId Unique identifier of a Commerce Case. (optional)
     * @param  string $merchantReference Unique reference of the Commerce Case that is also returned for reporting and reconciliation purposes. (optional)
     * @param  string $merchantCustomerId Unique identifier for the customer. (optional)
     * @param  \PayoneCommercePlatform\Sdk\Domain\StatusCheckout[] $includeCheckoutStatus Filter your results by the Checkout Status. The response will only return Commerce Cases with Checkouts with the provided Checkout Statuses. (optional)
     * @param  \PayoneCommercePlatform\Sdk\Domain\PaymentChannel[] $includePaymentChannel Filter your results by Payment Channel. The response will only return Commerce Cases with Checkouts for the provided Payment Channel. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCommerceCases'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCommerceCasesAsyncWithHttpInfo($merchantId, $offset = 0, $size = 25, $fromDate = null, $toDate = null, $commerceCaseId = null, $merchantReference = null, $merchantCustomerId = null, $includeCheckoutStatus = null, $includePaymentChannel = null, string $contentType = self::contentTypes['getCommerceCases'][0])
    {
        $returnType = '\PayoneCommercePlatform\Sdk\Domain\CommerceCaseResponse[]';
        $request = $this->getCommerceCasesRequest($merchantId, $offset, $size, $fromDate, $toDate, $commerceCaseId, $merchantReference, $merchantCustomerId, $includeCheckoutStatus, $includePaymentChannel, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCommerceCases'
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. A Commerce Case has exactly one merchant. (required)
     * @param  int $offset The offset to load Commerce Cases starting with 0. (optional, default to 0)
     * @param  int $size The number of Commerce Cases loaded per page. (optional, default to 25)
     * @param  \DateTime $fromDate Date and time in ISO 8601 format a Commerce Cases should be included in the request. Excepted formats are:  * YYYY-MM-DDThh:mm:ssZ * YYYY-MM-DDThh:mm:ss+XX:XX All other formats are ignored or may not be handled properly. (optional)
     * @param  \DateTime $toDate Date and time in ISO 8601 format a Commerce Cases should be included in the request. Excepted formats are:  * YYYY-MM-DDThh:mm:ssZ * YYYY-MM-DDThh:mm:ss+XX:XX All other formats are ignored or may not be handled properly. (optional)
     * @param  string $commerceCaseId Unique identifier of a Commerce Case. (optional)
     * @param  string $merchantReference Unique reference of the Commerce Case that is also returned for reporting and reconciliation purposes. (optional)
     * @param  string $merchantCustomerId Unique identifier for the customer. (optional)
     * @param  \PayoneCommercePlatform\Sdk\Domain\StatusCheckout[] $includeCheckoutStatus Filter your results by the Checkout Status. The response will only return Commerce Cases with Checkouts with the provided Checkout Statuses. (optional)
     * @param  \PayoneCommercePlatform\Sdk\Domain\PaymentChannel[] $includePaymentChannel Filter your results by Payment Channel. The response will only return Commerce Cases with Checkouts for the provided Payment Channel. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCommerceCases'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCommerceCasesRequest($merchantId, $offset = 0, $size = 25, $fromDate = null, $toDate = null, $commerceCaseId = null, $merchantReference = null, $merchantCustomerId = null, $includeCheckoutStatus = null, $includePaymentChannel = null, string $contentType = self::contentTypes['getCommerceCases'][0])
    {

        // verify the required parameter 'merchantId' is set
        if ($merchantId === null || (is_array($merchantId) && count($merchantId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchantId when calling getCommerceCases'
            );
        }
        if (strlen($merchantId) > 64) {
            throw new \InvalidArgumentException('invalid length for "$merchantId" when calling CommerceCaseApi.getCommerceCases, must be smaller than or equal to 64.');
        }
        if (strlen($merchantId) < 0) {
            throw new \InvalidArgumentException('invalid length for "$merchantId" when calling CommerceCaseApi.getCommerceCases, must be bigger than or equal to 0.');
        }
        
        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling CommerceCaseApi.getCommerceCases, must be bigger than or equal to 0.');
        }
        
        if ($size !== null && $size > 100) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling CommerceCaseApi.getCommerceCases, must be smaller than or equal to 100.');
        }
        if ($size !== null && $size < 1) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling CommerceCaseApi.getCommerceCases, must be bigger than or equal to 1.');
        }
        



        if ($merchantReference !== null && strlen($merchantReference) > 40) {
            throw new \InvalidArgumentException('invalid length for "$merchantReference" when calling CommerceCaseApi.getCommerceCases, must be smaller than or equal to 40.');
        }
        
        if ($merchantCustomerId !== null && strlen($merchantCustomerId) > 20) {
            throw new \InvalidArgumentException('invalid length for "$merchantCustomerId" when calling CommerceCaseApi.getCommerceCases, must be smaller than or equal to 20.');
        }
        



        $resourcePath = '/v1/{merchantId}/commerce-cases';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size,
            'size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fromDate,
            'fromDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $toDate,
            'toDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $commerceCaseId,
            'commerceCaseId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $merchantReference,
            'merchantReference', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $merchantCustomerId,
            'merchantCustomerId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $includeCheckoutStatus,
            'includeCheckoutStatus', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $includePaymentChannel,
            'includePaymentChannel', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($merchantId !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantId' . '}',
                ObjectSerializer::toPathValue($merchantId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateCommerceCase
     *
     * Modify an existing Commerce Case.
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant. (required)
     * @param  string $commerceCaseId Unique identifier of a Commerce Case. (required)
     * @param  \PayoneCommercePlatform\Sdk\Domain\Customer $customer customer (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCommerceCase'] to see the possible values for this operation
     *
     * @throws \PayoneCommercePlatform\Sdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateCommerceCase($merchantId, $commerceCaseId, $customer, string $contentType = self::contentTypes['updateCommerceCase'][0])
    {
        $this->updateCommerceCaseWithHttpInfo($merchantId, $commerceCaseId, $customer, $contentType);
    }

    /**
     * Operation updateCommerceCaseWithHttpInfo
     *
     * Modify an existing Commerce Case.
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant. (required)
     * @param  string $commerceCaseId Unique identifier of a Commerce Case. (required)
     * @param  \PayoneCommercePlatform\Sdk\Domain\Customer $customer (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCommerceCase'] to see the possible values for this operation
     *
     * @throws \PayoneCommercePlatform\Sdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCommerceCaseWithHttpInfo($merchantId, $commerceCaseId, $customer, string $contentType = self::contentTypes['updateCommerceCase'][0])
    {
        $request = $this->updateCommerceCaseRequest($merchantId, $commerceCaseId, $customer, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateCommerceCaseAsync
     *
     * Modify an existing Commerce Case.
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant. (required)
     * @param  string $commerceCaseId Unique identifier of a Commerce Case. (required)
     * @param  \PayoneCommercePlatform\Sdk\Domain\Customer $customer (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCommerceCase'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCommerceCaseAsync($merchantId, $commerceCaseId, $customer, string $contentType = self::contentTypes['updateCommerceCase'][0])
    {
        return $this->updateCommerceCaseAsyncWithHttpInfo($merchantId, $commerceCaseId, $customer, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateCommerceCaseAsyncWithHttpInfo
     *
     * Modify an existing Commerce Case.
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant. (required)
     * @param  string $commerceCaseId Unique identifier of a Commerce Case. (required)
     * @param  \PayoneCommercePlatform\Sdk\Domain\Customer $customer (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCommerceCase'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCommerceCaseAsyncWithHttpInfo($merchantId, $commerceCaseId, $customer, string $contentType = self::contentTypes['updateCommerceCase'][0])
    {
        $returnType = '';
        $request = $this->updateCommerceCaseRequest($merchantId, $commerceCaseId, $customer, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateCommerceCase'
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant. (required)
     * @param  string $commerceCaseId Unique identifier of a Commerce Case. (required)
     * @param  \PayoneCommercePlatform\Sdk\Domain\Customer $customer (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCommerceCase'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateCommerceCaseRequest($merchantId, $commerceCaseId, $customer, string $contentType = self::contentTypes['updateCommerceCase'][0])
    {

        // verify the required parameter 'merchantId' is set
        if ($merchantId === null || (is_array($merchantId) && count($merchantId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchantId when calling updateCommerceCase'
            );
        }
        if (strlen($merchantId) > 64) {
            throw new \InvalidArgumentException('invalid length for "$merchantId" when calling CommerceCaseApi.updateCommerceCase, must be smaller than or equal to 64.');
        }
        if (strlen($merchantId) < 0) {
            throw new \InvalidArgumentException('invalid length for "$merchantId" when calling CommerceCaseApi.updateCommerceCase, must be bigger than or equal to 0.');
        }
        
        // verify the required parameter 'commerceCaseId' is set
        if ($commerceCaseId === null || (is_array($commerceCaseId) && count($commerceCaseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commerceCaseId when calling updateCommerceCase'
            );
        }

        // verify the required parameter 'customer' is set
        if ($customer === null || (is_array($customer) && count($customer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer when calling updateCommerceCase'
            );
        }


        $resourcePath = '/v1/{merchantId}/commerce-cases/{commerceCaseId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($merchantId !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantId' . '}',
                ObjectSerializer::toPathValue($merchantId),
                $resourcePath
            );
        }
        // path params
        if ($commerceCaseId !== null) {
            $resourcePath = str_replace(
                '{' . 'commerceCaseId' . '}',
                ObjectSerializer::toPathValue($commerceCaseId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($customer)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($customer));
            } else {
                $httpBody = $customer;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
