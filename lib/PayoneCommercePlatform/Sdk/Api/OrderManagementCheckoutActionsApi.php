<?php
/**
 * OrderManagementCheckoutActionsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  PayoneCommercePlatform\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Commerce Platform API
 *
 * RESTful API for the creation of Commerce Cases with Checkouts and the execution of Payments.
 *
 * The version of the OpenAPI document: 1.6.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace PayoneCommercePlatform\Sdk\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use PayoneCommercePlatform\Sdk\ApiException;
use PayoneCommercePlatform\Sdk\Configuration;
use PayoneCommercePlatform\Sdk\HeaderSelector;
use PayoneCommercePlatform\Sdk\ObjectSerializer;

/**
 * OrderManagementCheckoutActionsApi Class Doc Comment
 *
 * @category Class
 * @package  PayoneCommercePlatform\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrderManagementCheckoutActionsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'cancelOrder' => [
            'application/json',
        ],
        'completeOrder' => [
            'application/json',
        ],
        'createOrder' => [
            'application/json',
        ],
        'deliverOrder' => [
            'application/json',
        ],
        'returnOrder' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation cancelOrder
     *
     * Mark items of a Checkout as cancelled and automatically cancel the payment for the items
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant. (required)
     * @param  string $commerceCaseId Unique identifier of a Commerce Case. (required)
     * @param  string $checkoutId Unique identifier of a Checkout (required)
     * @param  \PayoneCommercePlatform\Sdk\Domain\CancelRequest $cancelRequest cancelRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelOrder'] to see the possible values for this operation
     *
     * @throws \PayoneCommercePlatform\Sdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \PayoneCommercePlatform\Sdk\Domain\CancelResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse
     */
    public function cancelOrder($merchantId, $commerceCaseId, $checkoutId, $cancelRequest = null, string $contentType = self::contentTypes['cancelOrder'][0])
    {
        list($response) = $this->cancelOrderWithHttpInfo($merchantId, $commerceCaseId, $checkoutId, $cancelRequest, $contentType);
        return $response;
    }

    /**
     * Operation cancelOrderWithHttpInfo
     *
     * Mark items of a Checkout as cancelled and automatically cancel the payment for the items
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant. (required)
     * @param  string $commerceCaseId Unique identifier of a Commerce Case. (required)
     * @param  string $checkoutId Unique identifier of a Checkout (required)
     * @param  \PayoneCommercePlatform\Sdk\Domain\CancelRequest $cancelRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelOrder'] to see the possible values for this operation
     *
     * @throws \PayoneCommercePlatform\Sdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \PayoneCommercePlatform\Sdk\Domain\CancelResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelOrderWithHttpInfo($merchantId, $commerceCaseId, $checkoutId, $cancelRequest = null, string $contentType = self::contentTypes['cancelOrder'][0])
    {
        $request = $this->cancelOrderRequest($merchantId, $commerceCaseId, $checkoutId, $cancelRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\PayoneCommercePlatform\Sdk\Domain\CancelResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\CancelResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\CancelResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 402:
                    if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\PayoneCommercePlatform\Sdk\Domain\CancelResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\CancelResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cancelOrderAsync
     *
     * Mark items of a Checkout as cancelled and automatically cancel the payment for the items
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant. (required)
     * @param  string $commerceCaseId Unique identifier of a Commerce Case. (required)
     * @param  string $checkoutId Unique identifier of a Checkout (required)
     * @param  \PayoneCommercePlatform\Sdk\Domain\CancelRequest $cancelRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelOrderAsync($merchantId, $commerceCaseId, $checkoutId, $cancelRequest = null, string $contentType = self::contentTypes['cancelOrder'][0])
    {
        return $this->cancelOrderAsyncWithHttpInfo($merchantId, $commerceCaseId, $checkoutId, $cancelRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelOrderAsyncWithHttpInfo
     *
     * Mark items of a Checkout as cancelled and automatically cancel the payment for the items
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant. (required)
     * @param  string $commerceCaseId Unique identifier of a Commerce Case. (required)
     * @param  string $checkoutId Unique identifier of a Checkout (required)
     * @param  \PayoneCommercePlatform\Sdk\Domain\CancelRequest $cancelRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelOrderAsyncWithHttpInfo($merchantId, $commerceCaseId, $checkoutId, $cancelRequest = null, string $contentType = self::contentTypes['cancelOrder'][0])
    {
        $returnType = '\PayoneCommercePlatform\Sdk\Domain\CancelResponse';
        $request = $this->cancelOrderRequest($merchantId, $commerceCaseId, $checkoutId, $cancelRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelOrder'
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant. (required)
     * @param  string $commerceCaseId Unique identifier of a Commerce Case. (required)
     * @param  string $checkoutId Unique identifier of a Checkout (required)
     * @param  \PayoneCommercePlatform\Sdk\Domain\CancelRequest $cancelRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cancelOrderRequest($merchantId, $commerceCaseId, $checkoutId, $cancelRequest = null, string $contentType = self::contentTypes['cancelOrder'][0])
    {

        // verify the required parameter 'merchantId' is set
        if ($merchantId === null || (is_array($merchantId) && count($merchantId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchantId when calling cancelOrder'
            );
        }
        if (strlen($merchantId) > 64) {
            throw new \InvalidArgumentException('invalid length for "$merchantId" when calling OrderManagementCheckoutActionsApi.cancelOrder, must be smaller than or equal to 64.');
        }
        if (strlen($merchantId) < 0) {
            throw new \InvalidArgumentException('invalid length for "$merchantId" when calling OrderManagementCheckoutActionsApi.cancelOrder, must be bigger than or equal to 0.');
        }
        
        // verify the required parameter 'commerceCaseId' is set
        if ($commerceCaseId === null || (is_array($commerceCaseId) && count($commerceCaseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commerceCaseId when calling cancelOrder'
            );
        }

        // verify the required parameter 'checkoutId' is set
        if ($checkoutId === null || (is_array($checkoutId) && count($checkoutId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $checkoutId when calling cancelOrder'
            );
        }



        $resourcePath = '/v1/{merchantId}/commerce-cases/{commerceCaseId}/checkouts/{checkoutId}/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($merchantId !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantId' . '}',
                ObjectSerializer::toPathValue($merchantId),
                $resourcePath
            );
        }
        // path params
        if ($commerceCaseId !== null) {
            $resourcePath = str_replace(
                '{' . 'commerceCaseId' . '}',
                ObjectSerializer::toPathValue($commerceCaseId),
                $resourcePath
            );
        }
        // path params
        if ($checkoutId !== null) {
            $resourcePath = str_replace(
                '{' . 'checkoutId' . '}',
                ObjectSerializer::toPathValue($checkoutId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($cancelRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($cancelRequest));
            } else {
                $httpBody = $cancelRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation completeOrder
     *
     * Complete an Order
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. (required)
     * @param  string $commerceCaseId Unique identifier of a Commerce Case. (required)
     * @param  string $checkoutId Unique identifier of a Checkout (required)
     * @param  \PayoneCommercePlatform\Sdk\Domain\CompleteOrderRequest $completeOrderRequest completeOrderRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['completeOrder'] to see the possible values for this operation
     *
     * @throws \PayoneCommercePlatform\Sdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \PayoneCommercePlatform\Sdk\Domain\CompletePaymentResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse
     */
    public function completeOrder($merchantId, $commerceCaseId, $checkoutId, $completeOrderRequest, string $contentType = self::contentTypes['completeOrder'][0])
    {
        list($response) = $this->completeOrderWithHttpInfo($merchantId, $commerceCaseId, $checkoutId, $completeOrderRequest, $contentType);
        return $response;
    }

    /**
     * Operation completeOrderWithHttpInfo
     *
     * Complete an Order
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. (required)
     * @param  string $commerceCaseId Unique identifier of a Commerce Case. (required)
     * @param  string $checkoutId Unique identifier of a Checkout (required)
     * @param  \PayoneCommercePlatform\Sdk\Domain\CompleteOrderRequest $completeOrderRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['completeOrder'] to see the possible values for this operation
     *
     * @throws \PayoneCommercePlatform\Sdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \PayoneCommercePlatform\Sdk\Domain\CompletePaymentResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function completeOrderWithHttpInfo($merchantId, $commerceCaseId, $checkoutId, $completeOrderRequest, string $contentType = self::contentTypes['completeOrder'][0])
    {
        $request = $this->completeOrderRequest($merchantId, $commerceCaseId, $checkoutId, $completeOrderRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\PayoneCommercePlatform\Sdk\Domain\CompletePaymentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\CompletePaymentResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\CompletePaymentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 402:
                    if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 502:
                    if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\PayoneCommercePlatform\Sdk\Domain\CompletePaymentResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\CompletePaymentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 502:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation completeOrderAsync
     *
     * Complete an Order
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. (required)
     * @param  string $commerceCaseId Unique identifier of a Commerce Case. (required)
     * @param  string $checkoutId Unique identifier of a Checkout (required)
     * @param  \PayoneCommercePlatform\Sdk\Domain\CompleteOrderRequest $completeOrderRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['completeOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function completeOrderAsync($merchantId, $commerceCaseId, $checkoutId, $completeOrderRequest, string $contentType = self::contentTypes['completeOrder'][0])
    {
        return $this->completeOrderAsyncWithHttpInfo($merchantId, $commerceCaseId, $checkoutId, $completeOrderRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation completeOrderAsyncWithHttpInfo
     *
     * Complete an Order
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. (required)
     * @param  string $commerceCaseId Unique identifier of a Commerce Case. (required)
     * @param  string $checkoutId Unique identifier of a Checkout (required)
     * @param  \PayoneCommercePlatform\Sdk\Domain\CompleteOrderRequest $completeOrderRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['completeOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function completeOrderAsyncWithHttpInfo($merchantId, $commerceCaseId, $checkoutId, $completeOrderRequest, string $contentType = self::contentTypes['completeOrder'][0])
    {
        $returnType = '\PayoneCommercePlatform\Sdk\Domain\CompletePaymentResponse';
        $request = $this->completeOrderRequest($merchantId, $commerceCaseId, $checkoutId, $completeOrderRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'completeOrder'
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. (required)
     * @param  string $commerceCaseId Unique identifier of a Commerce Case. (required)
     * @param  string $checkoutId Unique identifier of a Checkout (required)
     * @param  \PayoneCommercePlatform\Sdk\Domain\CompleteOrderRequest $completeOrderRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['completeOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function completeOrderRequest($merchantId, $commerceCaseId, $checkoutId, $completeOrderRequest, string $contentType = self::contentTypes['completeOrder'][0])
    {

        // verify the required parameter 'merchantId' is set
        if ($merchantId === null || (is_array($merchantId) && count($merchantId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchantId when calling completeOrder'
            );
        }
        if (strlen($merchantId) > 64) {
            throw new \InvalidArgumentException('invalid length for "$merchantId" when calling OrderManagementCheckoutActionsApi.completeOrder, must be smaller than or equal to 64.');
        }
        if (strlen($merchantId) < 0) {
            throw new \InvalidArgumentException('invalid length for "$merchantId" when calling OrderManagementCheckoutActionsApi.completeOrder, must be bigger than or equal to 0.');
        }
        
        // verify the required parameter 'commerceCaseId' is set
        if ($commerceCaseId === null || (is_array($commerceCaseId) && count($commerceCaseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commerceCaseId when calling completeOrder'
            );
        }

        // verify the required parameter 'checkoutId' is set
        if ($checkoutId === null || (is_array($checkoutId) && count($checkoutId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $checkoutId when calling completeOrder'
            );
        }

        // verify the required parameter 'completeOrderRequest' is set
        if ($completeOrderRequest === null || (is_array($completeOrderRequest) && count($completeOrderRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $completeOrderRequest when calling completeOrder'
            );
        }


        $resourcePath = '/v1/{merchantId}/commerce-cases/{commerceCaseId}/checkouts/{checkoutId}/complete-order';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($merchantId !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantId' . '}',
                ObjectSerializer::toPathValue($merchantId),
                $resourcePath
            );
        }
        // path params
        if ($commerceCaseId !== null) {
            $resourcePath = str_replace(
                '{' . 'commerceCaseId' . '}',
                ObjectSerializer::toPathValue($commerceCaseId),
                $resourcePath
            );
        }
        // path params
        if ($checkoutId !== null) {
            $resourcePath = str_replace(
                '{' . 'checkoutId' . '}',
                ObjectSerializer::toPathValue($checkoutId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($completeOrderRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($completeOrderRequest));
            } else {
                $httpBody = $completeOrderRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createOrder
     *
     * Creates an Order that will automatially execute a Payment
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant. (required)
     * @param  string $commerceCaseId Unique identifier of a Commerce Case. (required)
     * @param  string $checkoutId Unique identifier of a Checkout (required)
     * @param  \PayoneCommercePlatform\Sdk\Domain\OrderRequest $orderRequest orderRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrder'] to see the possible values for this operation
     *
     * @throws \PayoneCommercePlatform\Sdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \PayoneCommercePlatform\Sdk\Domain\OrderResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse
     */
    public function createOrder($merchantId, $commerceCaseId, $checkoutId, $orderRequest, string $contentType = self::contentTypes['createOrder'][0])
    {
        list($response) = $this->createOrderWithHttpInfo($merchantId, $commerceCaseId, $checkoutId, $orderRequest, $contentType);
        return $response;
    }

    /**
     * Operation createOrderWithHttpInfo
     *
     * Creates an Order that will automatially execute a Payment
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant. (required)
     * @param  string $commerceCaseId Unique identifier of a Commerce Case. (required)
     * @param  string $checkoutId Unique identifier of a Checkout (required)
     * @param  \PayoneCommercePlatform\Sdk\Domain\OrderRequest $orderRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrder'] to see the possible values for this operation
     *
     * @throws \PayoneCommercePlatform\Sdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \PayoneCommercePlatform\Sdk\Domain\OrderResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createOrderWithHttpInfo($merchantId, $commerceCaseId, $checkoutId, $orderRequest, string $contentType = self::contentTypes['createOrder'][0])
    {
        $request = $this->createOrderRequest($merchantId, $commerceCaseId, $checkoutId, $orderRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\PayoneCommercePlatform\Sdk\Domain\OrderResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\OrderResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\OrderResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 402:
                    if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 502:
                    if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\PayoneCommercePlatform\Sdk\Domain\OrderResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\OrderResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 502:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createOrderAsync
     *
     * Creates an Order that will automatially execute a Payment
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant. (required)
     * @param  string $commerceCaseId Unique identifier of a Commerce Case. (required)
     * @param  string $checkoutId Unique identifier of a Checkout (required)
     * @param  \PayoneCommercePlatform\Sdk\Domain\OrderRequest $orderRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrderAsync($merchantId, $commerceCaseId, $checkoutId, $orderRequest, string $contentType = self::contentTypes['createOrder'][0])
    {
        return $this->createOrderAsyncWithHttpInfo($merchantId, $commerceCaseId, $checkoutId, $orderRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createOrderAsyncWithHttpInfo
     *
     * Creates an Order that will automatially execute a Payment
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant. (required)
     * @param  string $commerceCaseId Unique identifier of a Commerce Case. (required)
     * @param  string $checkoutId Unique identifier of a Checkout (required)
     * @param  \PayoneCommercePlatform\Sdk\Domain\OrderRequest $orderRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrderAsyncWithHttpInfo($merchantId, $commerceCaseId, $checkoutId, $orderRequest, string $contentType = self::contentTypes['createOrder'][0])
    {
        $returnType = '\PayoneCommercePlatform\Sdk\Domain\OrderResponse';
        $request = $this->createOrderRequest($merchantId, $commerceCaseId, $checkoutId, $orderRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createOrder'
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant. (required)
     * @param  string $commerceCaseId Unique identifier of a Commerce Case. (required)
     * @param  string $checkoutId Unique identifier of a Checkout (required)
     * @param  \PayoneCommercePlatform\Sdk\Domain\OrderRequest $orderRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createOrderRequest($merchantId, $commerceCaseId, $checkoutId, $orderRequest, string $contentType = self::contentTypes['createOrder'][0])
    {

        // verify the required parameter 'merchantId' is set
        if ($merchantId === null || (is_array($merchantId) && count($merchantId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchantId when calling createOrder'
            );
        }
        if (strlen($merchantId) > 64) {
            throw new \InvalidArgumentException('invalid length for "$merchantId" when calling OrderManagementCheckoutActionsApi.createOrder, must be smaller than or equal to 64.');
        }
        if (strlen($merchantId) < 0) {
            throw new \InvalidArgumentException('invalid length for "$merchantId" when calling OrderManagementCheckoutActionsApi.createOrder, must be bigger than or equal to 0.');
        }
        
        // verify the required parameter 'commerceCaseId' is set
        if ($commerceCaseId === null || (is_array($commerceCaseId) && count($commerceCaseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commerceCaseId when calling createOrder'
            );
        }

        // verify the required parameter 'checkoutId' is set
        if ($checkoutId === null || (is_array($checkoutId) && count($checkoutId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $checkoutId when calling createOrder'
            );
        }

        // verify the required parameter 'orderRequest' is set
        if ($orderRequest === null || (is_array($orderRequest) && count($orderRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderRequest when calling createOrder'
            );
        }


        $resourcePath = '/v1/{merchantId}/commerce-cases/{commerceCaseId}/checkouts/{checkoutId}/order';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($merchantId !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantId' . '}',
                ObjectSerializer::toPathValue($merchantId),
                $resourcePath
            );
        }
        // path params
        if ($commerceCaseId !== null) {
            $resourcePath = str_replace(
                '{' . 'commerceCaseId' . '}',
                ObjectSerializer::toPathValue($commerceCaseId),
                $resourcePath
            );
        }
        // path params
        if ($checkoutId !== null) {
            $resourcePath = str_replace(
                '{' . 'checkoutId' . '}',
                ObjectSerializer::toPathValue($checkoutId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($orderRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($orderRequest));
            } else {
                $httpBody = $orderRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deliverOrder
     *
     * Mark items of a Checkout as delivered and automatically capture the payment for the items
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant. (required)
     * @param  string $commerceCaseId Unique identifier of a Commerce Case. (required)
     * @param  string $checkoutId Unique identifier of a Checkout (required)
     * @param  \PayoneCommercePlatform\Sdk\Domain\DeliverRequest $deliverRequest deliverRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deliverOrder'] to see the possible values for this operation
     *
     * @throws \PayoneCommercePlatform\Sdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \PayoneCommercePlatform\Sdk\Domain\DeliverResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse
     */
    public function deliverOrder($merchantId, $commerceCaseId, $checkoutId, $deliverRequest, string $contentType = self::contentTypes['deliverOrder'][0])
    {
        list($response) = $this->deliverOrderWithHttpInfo($merchantId, $commerceCaseId, $checkoutId, $deliverRequest, $contentType);
        return $response;
    }

    /**
     * Operation deliverOrderWithHttpInfo
     *
     * Mark items of a Checkout as delivered and automatically capture the payment for the items
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant. (required)
     * @param  string $commerceCaseId Unique identifier of a Commerce Case. (required)
     * @param  string $checkoutId Unique identifier of a Checkout (required)
     * @param  \PayoneCommercePlatform\Sdk\Domain\DeliverRequest $deliverRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deliverOrder'] to see the possible values for this operation
     *
     * @throws \PayoneCommercePlatform\Sdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \PayoneCommercePlatform\Sdk\Domain\DeliverResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deliverOrderWithHttpInfo($merchantId, $commerceCaseId, $checkoutId, $deliverRequest, string $contentType = self::contentTypes['deliverOrder'][0])
    {
        $request = $this->deliverOrderRequest($merchantId, $commerceCaseId, $checkoutId, $deliverRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\PayoneCommercePlatform\Sdk\Domain\DeliverResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\DeliverResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\DeliverResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\PayoneCommercePlatform\Sdk\Domain\DeliverResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\DeliverResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deliverOrderAsync
     *
     * Mark items of a Checkout as delivered and automatically capture the payment for the items
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant. (required)
     * @param  string $commerceCaseId Unique identifier of a Commerce Case. (required)
     * @param  string $checkoutId Unique identifier of a Checkout (required)
     * @param  \PayoneCommercePlatform\Sdk\Domain\DeliverRequest $deliverRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deliverOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deliverOrderAsync($merchantId, $commerceCaseId, $checkoutId, $deliverRequest, string $contentType = self::contentTypes['deliverOrder'][0])
    {
        return $this->deliverOrderAsyncWithHttpInfo($merchantId, $commerceCaseId, $checkoutId, $deliverRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deliverOrderAsyncWithHttpInfo
     *
     * Mark items of a Checkout as delivered and automatically capture the payment for the items
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant. (required)
     * @param  string $commerceCaseId Unique identifier of a Commerce Case. (required)
     * @param  string $checkoutId Unique identifier of a Checkout (required)
     * @param  \PayoneCommercePlatform\Sdk\Domain\DeliverRequest $deliverRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deliverOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deliverOrderAsyncWithHttpInfo($merchantId, $commerceCaseId, $checkoutId, $deliverRequest, string $contentType = self::contentTypes['deliverOrder'][0])
    {
        $returnType = '\PayoneCommercePlatform\Sdk\Domain\DeliverResponse';
        $request = $this->deliverOrderRequest($merchantId, $commerceCaseId, $checkoutId, $deliverRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deliverOrder'
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant. (required)
     * @param  string $commerceCaseId Unique identifier of a Commerce Case. (required)
     * @param  string $checkoutId Unique identifier of a Checkout (required)
     * @param  \PayoneCommercePlatform\Sdk\Domain\DeliverRequest $deliverRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deliverOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deliverOrderRequest($merchantId, $commerceCaseId, $checkoutId, $deliverRequest, string $contentType = self::contentTypes['deliverOrder'][0])
    {

        // verify the required parameter 'merchantId' is set
        if ($merchantId === null || (is_array($merchantId) && count($merchantId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchantId when calling deliverOrder'
            );
        }
        if (strlen($merchantId) > 64) {
            throw new \InvalidArgumentException('invalid length for "$merchantId" when calling OrderManagementCheckoutActionsApi.deliverOrder, must be smaller than or equal to 64.');
        }
        if (strlen($merchantId) < 0) {
            throw new \InvalidArgumentException('invalid length for "$merchantId" when calling OrderManagementCheckoutActionsApi.deliverOrder, must be bigger than or equal to 0.');
        }
        
        // verify the required parameter 'commerceCaseId' is set
        if ($commerceCaseId === null || (is_array($commerceCaseId) && count($commerceCaseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commerceCaseId when calling deliverOrder'
            );
        }

        // verify the required parameter 'checkoutId' is set
        if ($checkoutId === null || (is_array($checkoutId) && count($checkoutId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $checkoutId when calling deliverOrder'
            );
        }

        // verify the required parameter 'deliverRequest' is set
        if ($deliverRequest === null || (is_array($deliverRequest) && count($deliverRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $deliverRequest when calling deliverOrder'
            );
        }


        $resourcePath = '/v1/{merchantId}/commerce-cases/{commerceCaseId}/checkouts/{checkoutId}/deliver';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($merchantId !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantId' . '}',
                ObjectSerializer::toPathValue($merchantId),
                $resourcePath
            );
        }
        // path params
        if ($commerceCaseId !== null) {
            $resourcePath = str_replace(
                '{' . 'commerceCaseId' . '}',
                ObjectSerializer::toPathValue($commerceCaseId),
                $resourcePath
            );
        }
        // path params
        if ($checkoutId !== null) {
            $resourcePath = str_replace(
                '{' . 'checkoutId' . '}',
                ObjectSerializer::toPathValue($checkoutId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($deliverRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($deliverRequest));
            } else {
                $httpBody = $deliverRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation returnOrder
     *
     * Mark items of a Checkout as returned and automatically refund the payment for the items
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant. (required)
     * @param  string $commerceCaseId Unique identifier of a Commerce Case. (required)
     * @param  string $checkoutId Unique identifier of a Checkout (required)
     * @param  \PayoneCommercePlatform\Sdk\Domain\ReturnRequest $returnRequest returnRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnOrder'] to see the possible values for this operation
     *
     * @throws \PayoneCommercePlatform\Sdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \PayoneCommercePlatform\Sdk\Domain\ReturnResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse
     */
    public function returnOrder($merchantId, $commerceCaseId, $checkoutId, $returnRequest = null, string $contentType = self::contentTypes['returnOrder'][0])
    {
        list($response) = $this->returnOrderWithHttpInfo($merchantId, $commerceCaseId, $checkoutId, $returnRequest, $contentType);
        return $response;
    }

    /**
     * Operation returnOrderWithHttpInfo
     *
     * Mark items of a Checkout as returned and automatically refund the payment for the items
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant. (required)
     * @param  string $commerceCaseId Unique identifier of a Commerce Case. (required)
     * @param  string $checkoutId Unique identifier of a Checkout (required)
     * @param  \PayoneCommercePlatform\Sdk\Domain\ReturnRequest $returnRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnOrder'] to see the possible values for this operation
     *
     * @throws \PayoneCommercePlatform\Sdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \PayoneCommercePlatform\Sdk\Domain\ReturnResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function returnOrderWithHttpInfo($merchantId, $commerceCaseId, $checkoutId, $returnRequest = null, string $contentType = self::contentTypes['returnOrder'][0])
    {
        $request = $this->returnOrderRequest($merchantId, $commerceCaseId, $checkoutId, $returnRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\PayoneCommercePlatform\Sdk\Domain\ReturnResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\ReturnResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\ReturnResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\PayoneCommercePlatform\Sdk\Domain\ReturnResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\ReturnResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation returnOrderAsync
     *
     * Mark items of a Checkout as returned and automatically refund the payment for the items
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant. (required)
     * @param  string $commerceCaseId Unique identifier of a Commerce Case. (required)
     * @param  string $checkoutId Unique identifier of a Checkout (required)
     * @param  \PayoneCommercePlatform\Sdk\Domain\ReturnRequest $returnRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function returnOrderAsync($merchantId, $commerceCaseId, $checkoutId, $returnRequest = null, string $contentType = self::contentTypes['returnOrder'][0])
    {
        return $this->returnOrderAsyncWithHttpInfo($merchantId, $commerceCaseId, $checkoutId, $returnRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation returnOrderAsyncWithHttpInfo
     *
     * Mark items of a Checkout as returned and automatically refund the payment for the items
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant. (required)
     * @param  string $commerceCaseId Unique identifier of a Commerce Case. (required)
     * @param  string $checkoutId Unique identifier of a Checkout (required)
     * @param  \PayoneCommercePlatform\Sdk\Domain\ReturnRequest $returnRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function returnOrderAsyncWithHttpInfo($merchantId, $commerceCaseId, $checkoutId, $returnRequest = null, string $contentType = self::contentTypes['returnOrder'][0])
    {
        $returnType = '\PayoneCommercePlatform\Sdk\Domain\ReturnResponse';
        $request = $this->returnOrderRequest($merchantId, $commerceCaseId, $checkoutId, $returnRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'returnOrder'
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant. (required)
     * @param  string $commerceCaseId Unique identifier of a Commerce Case. (required)
     * @param  string $checkoutId Unique identifier of a Checkout (required)
     * @param  \PayoneCommercePlatform\Sdk\Domain\ReturnRequest $returnRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function returnOrderRequest($merchantId, $commerceCaseId, $checkoutId, $returnRequest = null, string $contentType = self::contentTypes['returnOrder'][0])
    {

        // verify the required parameter 'merchantId' is set
        if ($merchantId === null || (is_array($merchantId) && count($merchantId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchantId when calling returnOrder'
            );
        }
        if (strlen($merchantId) > 64) {
            throw new \InvalidArgumentException('invalid length for "$merchantId" when calling OrderManagementCheckoutActionsApi.returnOrder, must be smaller than or equal to 64.');
        }
        if (strlen($merchantId) < 0) {
            throw new \InvalidArgumentException('invalid length for "$merchantId" when calling OrderManagementCheckoutActionsApi.returnOrder, must be bigger than or equal to 0.');
        }
        
        // verify the required parameter 'commerceCaseId' is set
        if ($commerceCaseId === null || (is_array($commerceCaseId) && count($commerceCaseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commerceCaseId when calling returnOrder'
            );
        }

        // verify the required parameter 'checkoutId' is set
        if ($checkoutId === null || (is_array($checkoutId) && count($checkoutId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $checkoutId when calling returnOrder'
            );
        }



        $resourcePath = '/v1/{merchantId}/commerce-cases/{commerceCaseId}/checkouts/{checkoutId}/return';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($merchantId !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantId' . '}',
                ObjectSerializer::toPathValue($merchantId),
                $resourcePath
            );
        }
        // path params
        if ($commerceCaseId !== null) {
            $resourcePath = str_replace(
                '{' . 'commerceCaseId' . '}',
                ObjectSerializer::toPathValue($commerceCaseId),
                $resourcePath
            );
        }
        // path params
        if ($checkoutId !== null) {
            $resourcePath = str_replace(
                '{' . 'checkoutId' . '}',
                ObjectSerializer::toPathValue($checkoutId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($returnRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($returnRequest));
            } else {
                $httpBody = $returnRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
