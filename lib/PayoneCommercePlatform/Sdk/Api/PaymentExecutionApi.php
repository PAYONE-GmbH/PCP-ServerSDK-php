<?php
/**
 * PaymentExecutionApi
 * PHP version 7.4
 *
 * @category Class
 * @package  PayoneCommercePlatform\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Commerce Platform API
 *
 * RESTful API for the creation of Commerce Cases with Checkouts and the execution of Payments.
 *
 * The version of the OpenAPI document: 1.6.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace PayoneCommercePlatform\Sdk\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use PayoneCommercePlatform\Sdk\ApiException;
use PayoneCommercePlatform\Sdk\Configuration;
use PayoneCommercePlatform\Sdk\HeaderSelector;
use PayoneCommercePlatform\Sdk\ObjectSerializer;

/**
 * PaymentExecutionApi Class Doc Comment
 *
 * @category Class
 * @package  PayoneCommercePlatform\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PaymentExecutionApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'cancelPaymentExecution' => [
            'application/json',
        ],
        'capturePaymentExecution' => [
            'application/json',
        ],
        'completePayment' => [
            'application/json',
        ],
        'createPayment' => [
            'application/json',
        ],
        'pausePayment' => [
            'application/json',
        ],
        'refundPaymentExecution' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation cancelPaymentExecution
     *
     * Cancel a Payment
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. (required)
     * @param  string $commerceCaseId Unique identifier of a Commerce Case. (required)
     * @param  string $checkoutId Unique identifier of a Checkout (required)
     * @param  string $paymentExecutionId Unique identifier of a paymentExecution (required)
     * @param  \PayoneCommercePlatform\Sdk\Domain\CancelPaymentRequest $cancelPaymentRequest cancelPaymentRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelPaymentExecution'] to see the possible values for this operation
     *
     * @throws \PayoneCommercePlatform\Sdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \PayoneCommercePlatform\Sdk\Domain\CancelPaymentResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse
     */
    public function cancelPaymentExecution($merchantId, $commerceCaseId, $checkoutId, $paymentExecutionId, $cancelPaymentRequest, string $contentType = self::contentTypes['cancelPaymentExecution'][0])
    {
        list($response) = $this->cancelPaymentExecutionWithHttpInfo($merchantId, $commerceCaseId, $checkoutId, $paymentExecutionId, $cancelPaymentRequest, $contentType);
        return $response;
    }

    /**
     * Operation cancelPaymentExecutionWithHttpInfo
     *
     * Cancel a Payment
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. (required)
     * @param  string $commerceCaseId Unique identifier of a Commerce Case. (required)
     * @param  string $checkoutId Unique identifier of a Checkout (required)
     * @param  string $paymentExecutionId Unique identifier of a paymentExecution (required)
     * @param  \PayoneCommercePlatform\Sdk\Domain\CancelPaymentRequest $cancelPaymentRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelPaymentExecution'] to see the possible values for this operation
     *
     * @throws \PayoneCommercePlatform\Sdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \PayoneCommercePlatform\Sdk\Domain\CancelPaymentResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelPaymentExecutionWithHttpInfo($merchantId, $commerceCaseId, $checkoutId, $paymentExecutionId, $cancelPaymentRequest, string $contentType = self::contentTypes['cancelPaymentExecution'][0])
    {
        $request = $this->cancelPaymentExecutionRequest($merchantId, $commerceCaseId, $checkoutId, $paymentExecutionId, $cancelPaymentRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\PayoneCommercePlatform\Sdk\Domain\CancelPaymentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\CancelPaymentResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\CancelPaymentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 402:
                    if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\PayoneCommercePlatform\Sdk\Domain\CancelPaymentResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\CancelPaymentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cancelPaymentExecutionAsync
     *
     * Cancel a Payment
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. (required)
     * @param  string $commerceCaseId Unique identifier of a Commerce Case. (required)
     * @param  string $checkoutId Unique identifier of a Checkout (required)
     * @param  string $paymentExecutionId Unique identifier of a paymentExecution (required)
     * @param  \PayoneCommercePlatform\Sdk\Domain\CancelPaymentRequest $cancelPaymentRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelPaymentExecution'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelPaymentExecutionAsync($merchantId, $commerceCaseId, $checkoutId, $paymentExecutionId, $cancelPaymentRequest, string $contentType = self::contentTypes['cancelPaymentExecution'][0])
    {
        return $this->cancelPaymentExecutionAsyncWithHttpInfo($merchantId, $commerceCaseId, $checkoutId, $paymentExecutionId, $cancelPaymentRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelPaymentExecutionAsyncWithHttpInfo
     *
     * Cancel a Payment
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. (required)
     * @param  string $commerceCaseId Unique identifier of a Commerce Case. (required)
     * @param  string $checkoutId Unique identifier of a Checkout (required)
     * @param  string $paymentExecutionId Unique identifier of a paymentExecution (required)
     * @param  \PayoneCommercePlatform\Sdk\Domain\CancelPaymentRequest $cancelPaymentRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelPaymentExecution'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelPaymentExecutionAsyncWithHttpInfo($merchantId, $commerceCaseId, $checkoutId, $paymentExecutionId, $cancelPaymentRequest, string $contentType = self::contentTypes['cancelPaymentExecution'][0])
    {
        $returnType = '\PayoneCommercePlatform\Sdk\Domain\CancelPaymentResponse';
        $request = $this->cancelPaymentExecutionRequest($merchantId, $commerceCaseId, $checkoutId, $paymentExecutionId, $cancelPaymentRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelPaymentExecution'
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. (required)
     * @param  string $commerceCaseId Unique identifier of a Commerce Case. (required)
     * @param  string $checkoutId Unique identifier of a Checkout (required)
     * @param  string $paymentExecutionId Unique identifier of a paymentExecution (required)
     * @param  \PayoneCommercePlatform\Sdk\Domain\CancelPaymentRequest $cancelPaymentRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelPaymentExecution'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cancelPaymentExecutionRequest($merchantId, $commerceCaseId, $checkoutId, $paymentExecutionId, $cancelPaymentRequest, string $contentType = self::contentTypes['cancelPaymentExecution'][0])
    {

        // verify the required parameter 'merchantId' is set
        if ($merchantId === null || (is_array($merchantId) && count($merchantId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchantId when calling cancelPaymentExecution'
            );
        }
        if (strlen($merchantId) > 64) {
            throw new \InvalidArgumentException('invalid length for "$merchantId" when calling PaymentExecutionApi.cancelPaymentExecution, must be smaller than or equal to 64.');
        }
        if (strlen($merchantId) < 0) {
            throw new \InvalidArgumentException('invalid length for "$merchantId" when calling PaymentExecutionApi.cancelPaymentExecution, must be bigger than or equal to 0.');
        }
        
        // verify the required parameter 'commerceCaseId' is set
        if ($commerceCaseId === null || (is_array($commerceCaseId) && count($commerceCaseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commerceCaseId when calling cancelPaymentExecution'
            );
        }

        // verify the required parameter 'checkoutId' is set
        if ($checkoutId === null || (is_array($checkoutId) && count($checkoutId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $checkoutId when calling cancelPaymentExecution'
            );
        }

        // verify the required parameter 'paymentExecutionId' is set
        if ($paymentExecutionId === null || (is_array($paymentExecutionId) && count($paymentExecutionId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $paymentExecutionId when calling cancelPaymentExecution'
            );
        }

        // verify the required parameter 'cancelPaymentRequest' is set
        if ($cancelPaymentRequest === null || (is_array($cancelPaymentRequest) && count($cancelPaymentRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cancelPaymentRequest when calling cancelPaymentExecution'
            );
        }


        $resourcePath = '/v1/{merchantId}/commerce-cases/{commerceCaseId}/checkouts/{checkoutId}/payment-executions/{paymentExecutionId}/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($merchantId !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantId' . '}',
                ObjectSerializer::toPathValue($merchantId),
                $resourcePath
            );
        }
        // path params
        if ($commerceCaseId !== null) {
            $resourcePath = str_replace(
                '{' . 'commerceCaseId' . '}',
                ObjectSerializer::toPathValue($commerceCaseId),
                $resourcePath
            );
        }
        // path params
        if ($checkoutId !== null) {
            $resourcePath = str_replace(
                '{' . 'checkoutId' . '}',
                ObjectSerializer::toPathValue($checkoutId),
                $resourcePath
            );
        }
        // path params
        if ($paymentExecutionId !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentExecutionId' . '}',
                ObjectSerializer::toPathValue($paymentExecutionId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($cancelPaymentRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($cancelPaymentRequest));
            } else {
                $httpBody = $cancelPaymentRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation capturePaymentExecution
     *
     * Capture a Payment
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. (required)
     * @param  string $commerceCaseId Unique identifier of a Commerce Case. (required)
     * @param  string $checkoutId Unique identifier of a Checkout (required)
     * @param  string $paymentExecutionId Unique identifier of a paymentExecution (required)
     * @param  \PayoneCommercePlatform\Sdk\Domain\CapturePaymentRequest $capturePaymentRequest capturePaymentRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['capturePaymentExecution'] to see the possible values for this operation
     *
     * @throws \PayoneCommercePlatform\Sdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \PayoneCommercePlatform\Sdk\Domain\CapturePaymentResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse
     */
    public function capturePaymentExecution($merchantId, $commerceCaseId, $checkoutId, $paymentExecutionId, $capturePaymentRequest, string $contentType = self::contentTypes['capturePaymentExecution'][0])
    {
        list($response) = $this->capturePaymentExecutionWithHttpInfo($merchantId, $commerceCaseId, $checkoutId, $paymentExecutionId, $capturePaymentRequest, $contentType);
        return $response;
    }

    /**
     * Operation capturePaymentExecutionWithHttpInfo
     *
     * Capture a Payment
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. (required)
     * @param  string $commerceCaseId Unique identifier of a Commerce Case. (required)
     * @param  string $checkoutId Unique identifier of a Checkout (required)
     * @param  string $paymentExecutionId Unique identifier of a paymentExecution (required)
     * @param  \PayoneCommercePlatform\Sdk\Domain\CapturePaymentRequest $capturePaymentRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['capturePaymentExecution'] to see the possible values for this operation
     *
     * @throws \PayoneCommercePlatform\Sdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \PayoneCommercePlatform\Sdk\Domain\CapturePaymentResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function capturePaymentExecutionWithHttpInfo($merchantId, $commerceCaseId, $checkoutId, $paymentExecutionId, $capturePaymentRequest, string $contentType = self::contentTypes['capturePaymentExecution'][0])
    {
        $request = $this->capturePaymentExecutionRequest($merchantId, $commerceCaseId, $checkoutId, $paymentExecutionId, $capturePaymentRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\PayoneCommercePlatform\Sdk\Domain\CapturePaymentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\CapturePaymentResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\CapturePaymentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\PayoneCommercePlatform\Sdk\Domain\CapturePaymentResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\CapturePaymentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation capturePaymentExecutionAsync
     *
     * Capture a Payment
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. (required)
     * @param  string $commerceCaseId Unique identifier of a Commerce Case. (required)
     * @param  string $checkoutId Unique identifier of a Checkout (required)
     * @param  string $paymentExecutionId Unique identifier of a paymentExecution (required)
     * @param  \PayoneCommercePlatform\Sdk\Domain\CapturePaymentRequest $capturePaymentRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['capturePaymentExecution'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function capturePaymentExecutionAsync($merchantId, $commerceCaseId, $checkoutId, $paymentExecutionId, $capturePaymentRequest, string $contentType = self::contentTypes['capturePaymentExecution'][0])
    {
        return $this->capturePaymentExecutionAsyncWithHttpInfo($merchantId, $commerceCaseId, $checkoutId, $paymentExecutionId, $capturePaymentRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation capturePaymentExecutionAsyncWithHttpInfo
     *
     * Capture a Payment
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. (required)
     * @param  string $commerceCaseId Unique identifier of a Commerce Case. (required)
     * @param  string $checkoutId Unique identifier of a Checkout (required)
     * @param  string $paymentExecutionId Unique identifier of a paymentExecution (required)
     * @param  \PayoneCommercePlatform\Sdk\Domain\CapturePaymentRequest $capturePaymentRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['capturePaymentExecution'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function capturePaymentExecutionAsyncWithHttpInfo($merchantId, $commerceCaseId, $checkoutId, $paymentExecutionId, $capturePaymentRequest, string $contentType = self::contentTypes['capturePaymentExecution'][0])
    {
        $returnType = '\PayoneCommercePlatform\Sdk\Domain\CapturePaymentResponse';
        $request = $this->capturePaymentExecutionRequest($merchantId, $commerceCaseId, $checkoutId, $paymentExecutionId, $capturePaymentRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'capturePaymentExecution'
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. (required)
     * @param  string $commerceCaseId Unique identifier of a Commerce Case. (required)
     * @param  string $checkoutId Unique identifier of a Checkout (required)
     * @param  string $paymentExecutionId Unique identifier of a paymentExecution (required)
     * @param  \PayoneCommercePlatform\Sdk\Domain\CapturePaymentRequest $capturePaymentRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['capturePaymentExecution'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function capturePaymentExecutionRequest($merchantId, $commerceCaseId, $checkoutId, $paymentExecutionId, $capturePaymentRequest, string $contentType = self::contentTypes['capturePaymentExecution'][0])
    {

        // verify the required parameter 'merchantId' is set
        if ($merchantId === null || (is_array($merchantId) && count($merchantId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchantId when calling capturePaymentExecution'
            );
        }
        if (strlen($merchantId) > 64) {
            throw new \InvalidArgumentException('invalid length for "$merchantId" when calling PaymentExecutionApi.capturePaymentExecution, must be smaller than or equal to 64.');
        }
        if (strlen($merchantId) < 0) {
            throw new \InvalidArgumentException('invalid length for "$merchantId" when calling PaymentExecutionApi.capturePaymentExecution, must be bigger than or equal to 0.');
        }
        
        // verify the required parameter 'commerceCaseId' is set
        if ($commerceCaseId === null || (is_array($commerceCaseId) && count($commerceCaseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commerceCaseId when calling capturePaymentExecution'
            );
        }

        // verify the required parameter 'checkoutId' is set
        if ($checkoutId === null || (is_array($checkoutId) && count($checkoutId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $checkoutId when calling capturePaymentExecution'
            );
        }

        // verify the required parameter 'paymentExecutionId' is set
        if ($paymentExecutionId === null || (is_array($paymentExecutionId) && count($paymentExecutionId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $paymentExecutionId when calling capturePaymentExecution'
            );
        }

        // verify the required parameter 'capturePaymentRequest' is set
        if ($capturePaymentRequest === null || (is_array($capturePaymentRequest) && count($capturePaymentRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $capturePaymentRequest when calling capturePaymentExecution'
            );
        }


        $resourcePath = '/v1/{merchantId}/commerce-cases/{commerceCaseId}/checkouts/{checkoutId}/payment-executions/{paymentExecutionId}/capture';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($merchantId !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantId' . '}',
                ObjectSerializer::toPathValue($merchantId),
                $resourcePath
            );
        }
        // path params
        if ($commerceCaseId !== null) {
            $resourcePath = str_replace(
                '{' . 'commerceCaseId' . '}',
                ObjectSerializer::toPathValue($commerceCaseId),
                $resourcePath
            );
        }
        // path params
        if ($checkoutId !== null) {
            $resourcePath = str_replace(
                '{' . 'checkoutId' . '}',
                ObjectSerializer::toPathValue($checkoutId),
                $resourcePath
            );
        }
        // path params
        if ($paymentExecutionId !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentExecutionId' . '}',
                ObjectSerializer::toPathValue($paymentExecutionId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($capturePaymentRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($capturePaymentRequest));
            } else {
                $httpBody = $capturePaymentRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation completePayment
     *
     * Complete a Payment
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. (required)
     * @param  string $commerceCaseId Unique identifier of a Commerce Case. (required)
     * @param  string $checkoutId Unique identifier of a Checkout (required)
     * @param  string $paymentExecutionId Unique identifier of a paymentExecution (required)
     * @param  \PayoneCommercePlatform\Sdk\Domain\CompletePaymentRequest $completePaymentRequest completePaymentRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['completePayment'] to see the possible values for this operation
     *
     * @throws \PayoneCommercePlatform\Sdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \PayoneCommercePlatform\Sdk\Domain\CompletePaymentResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse
     */
    public function completePayment($merchantId, $commerceCaseId, $checkoutId, $paymentExecutionId, $completePaymentRequest, string $contentType = self::contentTypes['completePayment'][0])
    {
        list($response) = $this->completePaymentWithHttpInfo($merchantId, $commerceCaseId, $checkoutId, $paymentExecutionId, $completePaymentRequest, $contentType);
        return $response;
    }

    /**
     * Operation completePaymentWithHttpInfo
     *
     * Complete a Payment
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. (required)
     * @param  string $commerceCaseId Unique identifier of a Commerce Case. (required)
     * @param  string $checkoutId Unique identifier of a Checkout (required)
     * @param  string $paymentExecutionId Unique identifier of a paymentExecution (required)
     * @param  \PayoneCommercePlatform\Sdk\Domain\CompletePaymentRequest $completePaymentRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['completePayment'] to see the possible values for this operation
     *
     * @throws \PayoneCommercePlatform\Sdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \PayoneCommercePlatform\Sdk\Domain\CompletePaymentResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function completePaymentWithHttpInfo($merchantId, $commerceCaseId, $checkoutId, $paymentExecutionId, $completePaymentRequest, string $contentType = self::contentTypes['completePayment'][0])
    {
        $request = $this->completePaymentRequest($merchantId, $commerceCaseId, $checkoutId, $paymentExecutionId, $completePaymentRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\PayoneCommercePlatform\Sdk\Domain\CompletePaymentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\CompletePaymentResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\CompletePaymentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 402:
                    if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 502:
                    if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\PayoneCommercePlatform\Sdk\Domain\CompletePaymentResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\CompletePaymentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 502:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation completePaymentAsync
     *
     * Complete a Payment
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. (required)
     * @param  string $commerceCaseId Unique identifier of a Commerce Case. (required)
     * @param  string $checkoutId Unique identifier of a Checkout (required)
     * @param  string $paymentExecutionId Unique identifier of a paymentExecution (required)
     * @param  \PayoneCommercePlatform\Sdk\Domain\CompletePaymentRequest $completePaymentRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['completePayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function completePaymentAsync($merchantId, $commerceCaseId, $checkoutId, $paymentExecutionId, $completePaymentRequest, string $contentType = self::contentTypes['completePayment'][0])
    {
        return $this->completePaymentAsyncWithHttpInfo($merchantId, $commerceCaseId, $checkoutId, $paymentExecutionId, $completePaymentRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation completePaymentAsyncWithHttpInfo
     *
     * Complete a Payment
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. (required)
     * @param  string $commerceCaseId Unique identifier of a Commerce Case. (required)
     * @param  string $checkoutId Unique identifier of a Checkout (required)
     * @param  string $paymentExecutionId Unique identifier of a paymentExecution (required)
     * @param  \PayoneCommercePlatform\Sdk\Domain\CompletePaymentRequest $completePaymentRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['completePayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function completePaymentAsyncWithHttpInfo($merchantId, $commerceCaseId, $checkoutId, $paymentExecutionId, $completePaymentRequest, string $contentType = self::contentTypes['completePayment'][0])
    {
        $returnType = '\PayoneCommercePlatform\Sdk\Domain\CompletePaymentResponse';
        $request = $this->completePaymentRequest($merchantId, $commerceCaseId, $checkoutId, $paymentExecutionId, $completePaymentRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'completePayment'
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. (required)
     * @param  string $commerceCaseId Unique identifier of a Commerce Case. (required)
     * @param  string $checkoutId Unique identifier of a Checkout (required)
     * @param  string $paymentExecutionId Unique identifier of a paymentExecution (required)
     * @param  \PayoneCommercePlatform\Sdk\Domain\CompletePaymentRequest $completePaymentRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['completePayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function completePaymentRequest($merchantId, $commerceCaseId, $checkoutId, $paymentExecutionId, $completePaymentRequest, string $contentType = self::contentTypes['completePayment'][0])
    {

        // verify the required parameter 'merchantId' is set
        if ($merchantId === null || (is_array($merchantId) && count($merchantId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchantId when calling completePayment'
            );
        }
        if (strlen($merchantId) > 64) {
            throw new \InvalidArgumentException('invalid length for "$merchantId" when calling PaymentExecutionApi.completePayment, must be smaller than or equal to 64.');
        }
        if (strlen($merchantId) < 0) {
            throw new \InvalidArgumentException('invalid length for "$merchantId" when calling PaymentExecutionApi.completePayment, must be bigger than or equal to 0.');
        }
        
        // verify the required parameter 'commerceCaseId' is set
        if ($commerceCaseId === null || (is_array($commerceCaseId) && count($commerceCaseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commerceCaseId when calling completePayment'
            );
        }

        // verify the required parameter 'checkoutId' is set
        if ($checkoutId === null || (is_array($checkoutId) && count($checkoutId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $checkoutId when calling completePayment'
            );
        }

        // verify the required parameter 'paymentExecutionId' is set
        if ($paymentExecutionId === null || (is_array($paymentExecutionId) && count($paymentExecutionId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $paymentExecutionId when calling completePayment'
            );
        }

        // verify the required parameter 'completePaymentRequest' is set
        if ($completePaymentRequest === null || (is_array($completePaymentRequest) && count($completePaymentRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $completePaymentRequest when calling completePayment'
            );
        }


        $resourcePath = '/v1/{merchantId}/commerce-cases/{commerceCaseId}/checkouts/{checkoutId}/payment-executions/{paymentExecutionId}/complete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($merchantId !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantId' . '}',
                ObjectSerializer::toPathValue($merchantId),
                $resourcePath
            );
        }
        // path params
        if ($commerceCaseId !== null) {
            $resourcePath = str_replace(
                '{' . 'commerceCaseId' . '}',
                ObjectSerializer::toPathValue($commerceCaseId),
                $resourcePath
            );
        }
        // path params
        if ($checkoutId !== null) {
            $resourcePath = str_replace(
                '{' . 'checkoutId' . '}',
                ObjectSerializer::toPathValue($checkoutId),
                $resourcePath
            );
        }
        // path params
        if ($paymentExecutionId !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentExecutionId' . '}',
                ObjectSerializer::toPathValue($paymentExecutionId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($completePaymentRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($completePaymentRequest));
            } else {
                $httpBody = $completePaymentRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createPayment
     *
     * Create a Payment
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant. (required)
     * @param  string $commerceCaseId Unique identifier of a Commerce Case. (required)
     * @param  string $checkoutId Unique identifier of a Checkout (required)
     * @param  \PayoneCommercePlatform\Sdk\Domain\PaymentExecutionRequest $paymentExecutionRequest paymentExecutionRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPayment'] to see the possible values for this operation
     *
     * @throws \PayoneCommercePlatform\Sdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \PayoneCommercePlatform\Sdk\Domain\CreatePaymentResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse
     */
    public function createPayment($merchantId, $commerceCaseId, $checkoutId, $paymentExecutionRequest, string $contentType = self::contentTypes['createPayment'][0])
    {
        list($response) = $this->createPaymentWithHttpInfo($merchantId, $commerceCaseId, $checkoutId, $paymentExecutionRequest, $contentType);
        return $response;
    }

    /**
     * Operation createPaymentWithHttpInfo
     *
     * Create a Payment
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant. (required)
     * @param  string $commerceCaseId Unique identifier of a Commerce Case. (required)
     * @param  string $checkoutId Unique identifier of a Checkout (required)
     * @param  \PayoneCommercePlatform\Sdk\Domain\PaymentExecutionRequest $paymentExecutionRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPayment'] to see the possible values for this operation
     *
     * @throws \PayoneCommercePlatform\Sdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \PayoneCommercePlatform\Sdk\Domain\CreatePaymentResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPaymentWithHttpInfo($merchantId, $commerceCaseId, $checkoutId, $paymentExecutionRequest, string $contentType = self::contentTypes['createPayment'][0])
    {
        $request = $this->createPaymentRequest($merchantId, $commerceCaseId, $checkoutId, $paymentExecutionRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\PayoneCommercePlatform\Sdk\Domain\CreatePaymentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\CreatePaymentResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\CreatePaymentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 402:
                    if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 502:
                    if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\PayoneCommercePlatform\Sdk\Domain\CreatePaymentResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\CreatePaymentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 502:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createPaymentAsync
     *
     * Create a Payment
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant. (required)
     * @param  string $commerceCaseId Unique identifier of a Commerce Case. (required)
     * @param  string $checkoutId Unique identifier of a Checkout (required)
     * @param  \PayoneCommercePlatform\Sdk\Domain\PaymentExecutionRequest $paymentExecutionRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPaymentAsync($merchantId, $commerceCaseId, $checkoutId, $paymentExecutionRequest, string $contentType = self::contentTypes['createPayment'][0])
    {
        return $this->createPaymentAsyncWithHttpInfo($merchantId, $commerceCaseId, $checkoutId, $paymentExecutionRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createPaymentAsyncWithHttpInfo
     *
     * Create a Payment
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant. (required)
     * @param  string $commerceCaseId Unique identifier of a Commerce Case. (required)
     * @param  string $checkoutId Unique identifier of a Checkout (required)
     * @param  \PayoneCommercePlatform\Sdk\Domain\PaymentExecutionRequest $paymentExecutionRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPaymentAsyncWithHttpInfo($merchantId, $commerceCaseId, $checkoutId, $paymentExecutionRequest, string $contentType = self::contentTypes['createPayment'][0])
    {
        $returnType = '\PayoneCommercePlatform\Sdk\Domain\CreatePaymentResponse';
        $request = $this->createPaymentRequest($merchantId, $commerceCaseId, $checkoutId, $paymentExecutionRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createPayment'
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant. (required)
     * @param  string $commerceCaseId Unique identifier of a Commerce Case. (required)
     * @param  string $checkoutId Unique identifier of a Checkout (required)
     * @param  \PayoneCommercePlatform\Sdk\Domain\PaymentExecutionRequest $paymentExecutionRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createPaymentRequest($merchantId, $commerceCaseId, $checkoutId, $paymentExecutionRequest, string $contentType = self::contentTypes['createPayment'][0])
    {

        // verify the required parameter 'merchantId' is set
        if ($merchantId === null || (is_array($merchantId) && count($merchantId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchantId when calling createPayment'
            );
        }
        if (strlen($merchantId) > 64) {
            throw new \InvalidArgumentException('invalid length for "$merchantId" when calling PaymentExecutionApi.createPayment, must be smaller than or equal to 64.');
        }
        if (strlen($merchantId) < 0) {
            throw new \InvalidArgumentException('invalid length for "$merchantId" when calling PaymentExecutionApi.createPayment, must be bigger than or equal to 0.');
        }
        
        // verify the required parameter 'commerceCaseId' is set
        if ($commerceCaseId === null || (is_array($commerceCaseId) && count($commerceCaseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commerceCaseId when calling createPayment'
            );
        }

        // verify the required parameter 'checkoutId' is set
        if ($checkoutId === null || (is_array($checkoutId) && count($checkoutId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $checkoutId when calling createPayment'
            );
        }

        // verify the required parameter 'paymentExecutionRequest' is set
        if ($paymentExecutionRequest === null || (is_array($paymentExecutionRequest) && count($paymentExecutionRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $paymentExecutionRequest when calling createPayment'
            );
        }


        $resourcePath = '/v1/{merchantId}/commerce-cases/{commerceCaseId}/checkouts/{checkoutId}/payment-executions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($merchantId !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantId' . '}',
                ObjectSerializer::toPathValue($merchantId),
                $resourcePath
            );
        }
        // path params
        if ($commerceCaseId !== null) {
            $resourcePath = str_replace(
                '{' . 'commerceCaseId' . '}',
                ObjectSerializer::toPathValue($commerceCaseId),
                $resourcePath
            );
        }
        // path params
        if ($checkoutId !== null) {
            $resourcePath = str_replace(
                '{' . 'checkoutId' . '}',
                ObjectSerializer::toPathValue($checkoutId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($paymentExecutionRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($paymentExecutionRequest));
            } else {
                $httpBody = $paymentExecutionRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pausePayment
     *
     * Pause a Payment for selected payment methods
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. (required)
     * @param  string $commerceCaseId Unique identifier of a Commerce Case. (required)
     * @param  string $checkoutId Unique identifier of a Checkout (required)
     * @param  string $paymentExecutionId Unique identifier of a paymentExecution (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pausePayment'] to see the possible values for this operation
     *
     * @throws \PayoneCommercePlatform\Sdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \PayoneCommercePlatform\Sdk\Domain\PausePaymentResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse
     */
    public function pausePayment($merchantId, $commerceCaseId, $checkoutId, $paymentExecutionId, string $contentType = self::contentTypes['pausePayment'][0])
    {
        list($response) = $this->pausePaymentWithHttpInfo($merchantId, $commerceCaseId, $checkoutId, $paymentExecutionId, $contentType);
        return $response;
    }

    /**
     * Operation pausePaymentWithHttpInfo
     *
     * Pause a Payment for selected payment methods
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. (required)
     * @param  string $commerceCaseId Unique identifier of a Commerce Case. (required)
     * @param  string $checkoutId Unique identifier of a Checkout (required)
     * @param  string $paymentExecutionId Unique identifier of a paymentExecution (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pausePayment'] to see the possible values for this operation
     *
     * @throws \PayoneCommercePlatform\Sdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \PayoneCommercePlatform\Sdk\Domain\PausePaymentResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function pausePaymentWithHttpInfo($merchantId, $commerceCaseId, $checkoutId, $paymentExecutionId, string $contentType = self::contentTypes['pausePayment'][0])
    {
        $request = $this->pausePaymentRequest($merchantId, $commerceCaseId, $checkoutId, $paymentExecutionId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\PayoneCommercePlatform\Sdk\Domain\PausePaymentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\PausePaymentResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\PausePaymentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 402:
                    if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 502:
                    if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\PayoneCommercePlatform\Sdk\Domain\PausePaymentResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\PausePaymentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 502:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pausePaymentAsync
     *
     * Pause a Payment for selected payment methods
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. (required)
     * @param  string $commerceCaseId Unique identifier of a Commerce Case. (required)
     * @param  string $checkoutId Unique identifier of a Checkout (required)
     * @param  string $paymentExecutionId Unique identifier of a paymentExecution (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pausePayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pausePaymentAsync($merchantId, $commerceCaseId, $checkoutId, $paymentExecutionId, string $contentType = self::contentTypes['pausePayment'][0])
    {
        return $this->pausePaymentAsyncWithHttpInfo($merchantId, $commerceCaseId, $checkoutId, $paymentExecutionId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pausePaymentAsyncWithHttpInfo
     *
     * Pause a Payment for selected payment methods
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. (required)
     * @param  string $commerceCaseId Unique identifier of a Commerce Case. (required)
     * @param  string $checkoutId Unique identifier of a Checkout (required)
     * @param  string $paymentExecutionId Unique identifier of a paymentExecution (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pausePayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pausePaymentAsyncWithHttpInfo($merchantId, $commerceCaseId, $checkoutId, $paymentExecutionId, string $contentType = self::contentTypes['pausePayment'][0])
    {
        $returnType = '\PayoneCommercePlatform\Sdk\Domain\PausePaymentResponse';
        $request = $this->pausePaymentRequest($merchantId, $commerceCaseId, $checkoutId, $paymentExecutionId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pausePayment'
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. (required)
     * @param  string $commerceCaseId Unique identifier of a Commerce Case. (required)
     * @param  string $checkoutId Unique identifier of a Checkout (required)
     * @param  string $paymentExecutionId Unique identifier of a paymentExecution (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pausePayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function pausePaymentRequest($merchantId, $commerceCaseId, $checkoutId, $paymentExecutionId, string $contentType = self::contentTypes['pausePayment'][0])
    {

        // verify the required parameter 'merchantId' is set
        if ($merchantId === null || (is_array($merchantId) && count($merchantId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchantId when calling pausePayment'
            );
        }
        if (strlen($merchantId) > 64) {
            throw new \InvalidArgumentException('invalid length for "$merchantId" when calling PaymentExecutionApi.pausePayment, must be smaller than or equal to 64.');
        }
        if (strlen($merchantId) < 0) {
            throw new \InvalidArgumentException('invalid length for "$merchantId" when calling PaymentExecutionApi.pausePayment, must be bigger than or equal to 0.');
        }
        
        // verify the required parameter 'commerceCaseId' is set
        if ($commerceCaseId === null || (is_array($commerceCaseId) && count($commerceCaseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commerceCaseId when calling pausePayment'
            );
        }

        // verify the required parameter 'checkoutId' is set
        if ($checkoutId === null || (is_array($checkoutId) && count($checkoutId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $checkoutId when calling pausePayment'
            );
        }

        // verify the required parameter 'paymentExecutionId' is set
        if ($paymentExecutionId === null || (is_array($paymentExecutionId) && count($paymentExecutionId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $paymentExecutionId when calling pausePayment'
            );
        }


        $resourcePath = '/v1/{merchantId}/commerce-cases/{commerceCaseId}/checkouts/{checkoutId}/payment-executions/{paymentExecutionId}/pause';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($merchantId !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantId' . '}',
                ObjectSerializer::toPathValue($merchantId),
                $resourcePath
            );
        }
        // path params
        if ($commerceCaseId !== null) {
            $resourcePath = str_replace(
                '{' . 'commerceCaseId' . '}',
                ObjectSerializer::toPathValue($commerceCaseId),
                $resourcePath
            );
        }
        // path params
        if ($checkoutId !== null) {
            $resourcePath = str_replace(
                '{' . 'checkoutId' . '}',
                ObjectSerializer::toPathValue($checkoutId),
                $resourcePath
            );
        }
        // path params
        if ($paymentExecutionId !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentExecutionId' . '}',
                ObjectSerializer::toPathValue($paymentExecutionId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation refundPaymentExecution
     *
     * Refund a Payment
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. (required)
     * @param  string $commerceCaseId Unique identifier of a Commerce Case. (required)
     * @param  string $checkoutId Unique identifier of a Checkout (required)
     * @param  string $paymentExecutionId Unique identifier of a paymentExecution (required)
     * @param  \PayoneCommercePlatform\Sdk\Domain\RefundRequest $refundRequest refundRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refundPaymentExecution'] to see the possible values for this operation
     *
     * @throws \PayoneCommercePlatform\Sdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \PayoneCommercePlatform\Sdk\Domain\RefundPaymentResponse|\PayoneCommercePlatform\Sdk\Domain\RefundErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\RefundErrorResponse
     */
    public function refundPaymentExecution($merchantId, $commerceCaseId, $checkoutId, $paymentExecutionId, $refundRequest, string $contentType = self::contentTypes['refundPaymentExecution'][0])
    {
        list($response) = $this->refundPaymentExecutionWithHttpInfo($merchantId, $commerceCaseId, $checkoutId, $paymentExecutionId, $refundRequest, $contentType);
        return $response;
    }

    /**
     * Operation refundPaymentExecutionWithHttpInfo
     *
     * Refund a Payment
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. (required)
     * @param  string $commerceCaseId Unique identifier of a Commerce Case. (required)
     * @param  string $checkoutId Unique identifier of a Checkout (required)
     * @param  string $paymentExecutionId Unique identifier of a paymentExecution (required)
     * @param  \PayoneCommercePlatform\Sdk\Domain\RefundRequest $refundRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refundPaymentExecution'] to see the possible values for this operation
     *
     * @throws \PayoneCommercePlatform\Sdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \PayoneCommercePlatform\Sdk\Domain\RefundPaymentResponse|\PayoneCommercePlatform\Sdk\Domain\RefundErrorResponse|\PayoneCommercePlatform\Sdk\Domain\ErrorResponse|\PayoneCommercePlatform\Sdk\Domain\RefundErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function refundPaymentExecutionWithHttpInfo($merchantId, $commerceCaseId, $checkoutId, $paymentExecutionId, $refundRequest, string $contentType = self::contentTypes['refundPaymentExecution'][0])
    {
        $request = $this->refundPaymentExecutionRequest($merchantId, $commerceCaseId, $checkoutId, $paymentExecutionId, $refundRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\PayoneCommercePlatform\Sdk\Domain\RefundPaymentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\RefundPaymentResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\RefundPaymentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\PayoneCommercePlatform\Sdk\Domain\RefundErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\RefundErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\RefundErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\PayoneCommercePlatform\Sdk\Domain\RefundErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\PayoneCommercePlatform\Sdk\Domain\RefundErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PayoneCommercePlatform\Sdk\Domain\RefundErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\PayoneCommercePlatform\Sdk\Domain\RefundPaymentResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\RefundPaymentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\RefundErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayoneCommercePlatform\Sdk\Domain\RefundErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation refundPaymentExecutionAsync
     *
     * Refund a Payment
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. (required)
     * @param  string $commerceCaseId Unique identifier of a Commerce Case. (required)
     * @param  string $checkoutId Unique identifier of a Checkout (required)
     * @param  string $paymentExecutionId Unique identifier of a paymentExecution (required)
     * @param  \PayoneCommercePlatform\Sdk\Domain\RefundRequest $refundRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refundPaymentExecution'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function refundPaymentExecutionAsync($merchantId, $commerceCaseId, $checkoutId, $paymentExecutionId, $refundRequest, string $contentType = self::contentTypes['refundPaymentExecution'][0])
    {
        return $this->refundPaymentExecutionAsyncWithHttpInfo($merchantId, $commerceCaseId, $checkoutId, $paymentExecutionId, $refundRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation refundPaymentExecutionAsyncWithHttpInfo
     *
     * Refund a Payment
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. (required)
     * @param  string $commerceCaseId Unique identifier of a Commerce Case. (required)
     * @param  string $checkoutId Unique identifier of a Checkout (required)
     * @param  string $paymentExecutionId Unique identifier of a paymentExecution (required)
     * @param  \PayoneCommercePlatform\Sdk\Domain\RefundRequest $refundRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refundPaymentExecution'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function refundPaymentExecutionAsyncWithHttpInfo($merchantId, $commerceCaseId, $checkoutId, $paymentExecutionId, $refundRequest, string $contentType = self::contentTypes['refundPaymentExecution'][0])
    {
        $returnType = '\PayoneCommercePlatform\Sdk\Domain\RefundPaymentResponse';
        $request = $this->refundPaymentExecutionRequest($merchantId, $commerceCaseId, $checkoutId, $paymentExecutionId, $refundRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'refundPaymentExecution'
     *
     * @param  string $merchantId The merchantId identifies uniquely the merchant. (required)
     * @param  string $commerceCaseId Unique identifier of a Commerce Case. (required)
     * @param  string $checkoutId Unique identifier of a Checkout (required)
     * @param  string $paymentExecutionId Unique identifier of a paymentExecution (required)
     * @param  \PayoneCommercePlatform\Sdk\Domain\RefundRequest $refundRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refundPaymentExecution'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function refundPaymentExecutionRequest($merchantId, $commerceCaseId, $checkoutId, $paymentExecutionId, $refundRequest, string $contentType = self::contentTypes['refundPaymentExecution'][0])
    {

        // verify the required parameter 'merchantId' is set
        if ($merchantId === null || (is_array($merchantId) && count($merchantId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchantId when calling refundPaymentExecution'
            );
        }
        if (strlen($merchantId) > 64) {
            throw new \InvalidArgumentException('invalid length for "$merchantId" when calling PaymentExecutionApi.refundPaymentExecution, must be smaller than or equal to 64.');
        }
        if (strlen($merchantId) < 0) {
            throw new \InvalidArgumentException('invalid length for "$merchantId" when calling PaymentExecutionApi.refundPaymentExecution, must be bigger than or equal to 0.');
        }
        
        // verify the required parameter 'commerceCaseId' is set
        if ($commerceCaseId === null || (is_array($commerceCaseId) && count($commerceCaseId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commerceCaseId when calling refundPaymentExecution'
            );
        }

        // verify the required parameter 'checkoutId' is set
        if ($checkoutId === null || (is_array($checkoutId) && count($checkoutId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $checkoutId when calling refundPaymentExecution'
            );
        }

        // verify the required parameter 'paymentExecutionId' is set
        if ($paymentExecutionId === null || (is_array($paymentExecutionId) && count($paymentExecutionId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $paymentExecutionId when calling refundPaymentExecution'
            );
        }

        // verify the required parameter 'refundRequest' is set
        if ($refundRequest === null || (is_array($refundRequest) && count($refundRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $refundRequest when calling refundPaymentExecution'
            );
        }


        $resourcePath = '/v1/{merchantId}/commerce-cases/{commerceCaseId}/checkouts/{checkoutId}/payment-executions/{paymentExecutionId}/refund';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($merchantId !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantId' . '}',
                ObjectSerializer::toPathValue($merchantId),
                $resourcePath
            );
        }
        // path params
        if ($commerceCaseId !== null) {
            $resourcePath = str_replace(
                '{' . 'commerceCaseId' . '}',
                ObjectSerializer::toPathValue($commerceCaseId),
                $resourcePath
            );
        }
        // path params
        if ($checkoutId !== null) {
            $resourcePath = str_replace(
                '{' . 'checkoutId' . '}',
                ObjectSerializer::toPathValue($checkoutId),
                $resourcePath
            );
        }
        // path params
        if ($paymentExecutionId !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentExecutionId' . '}',
                ObjectSerializer::toPathValue($paymentExecutionId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($refundRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($refundRequest));
            } else {
                $httpBody = $refundRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
